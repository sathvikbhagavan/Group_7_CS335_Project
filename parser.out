Created by PLY (http://www.dabeaz.com/ply)

Unused terminals:

    DEFINE
    HASH
    INCLUDE
    MULTILINE_COMMENT
    SCOPE_RESOLUTION
    THIS

Grammar

Rule 0     S' -> start
Rule 1     start -> translation_unit
Rule 2     predefined_functions -> INPUT
Rule 3     predefined_functions -> OUTPUT
Rule 4     predefined_functions -> SQUARE_ROOT
Rule 5     predefined_functions -> SIN
Rule 6     predefined_functions -> COS
Rule 7     predefined_functions -> TAN
Rule 8     predefined_functions -> STRING_COPY
Rule 9     predefined_functions -> STRING_REVERSE
Rule 10    predefined_functions -> STRING_LENGTH
Rule 11    predefined_functions -> STRING_COMPARE
Rule 12    predefined_functions -> WRITE
Rule 13    predefined_functions -> READ
Rule 14    predefined_functions -> OPEN
Rule 15    primary_expression -> IDENTIFIER
Rule 16    primary_expression -> constant
Rule 17    primary_expression -> string
Rule 18    primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 19    primary_expression -> predefined_functions
Rule 20    constant -> NUMBER
Rule 21    constant -> DECIMAL_NUMBER
Rule 22    constant -> CHARACTER
Rule 23    constant -> TRUE
Rule 24    constant -> FALSE
Rule 25    constant -> NULL
Rule 26    string -> STRING_LITERAL
Rule 27    postfix_expression -> primary_expression
Rule 28    postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
Rule 29    postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 30    postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 31    postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 32    postfix_expression -> postfix_expression ARROW IDENTIFIER
Rule 33    postfix_expression -> postfix_expression PLUS_PLUS
Rule 34    postfix_expression -> postfix_expression MINUS_MINUS
Rule 35    argument_expression_list -> assignment_expression
Rule 36    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 37    unary_expression -> postfix_expression
Rule 38    unary_expression -> PLUS_PLUS unary_expression
Rule 39    unary_expression -> MINUS_MINUS unary_expression
Rule 40    unary_expression -> unary_operator cast_expression
Rule 41    unary_expression -> SIZEOF unary_expression
Rule 42    unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
Rule 43    unary_operator -> AND
Rule 44    unary_operator -> STAR
Rule 45    unary_operator -> PLUS
Rule 46    unary_operator -> MINUS
Rule 47    unary_operator -> NOT
Rule 48    unary_operator -> TILDE
Rule 49    cast_expression -> unary_expression
Rule 50    cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
Rule 51    multiplicative_expression -> cast_expression
Rule 52    multiplicative_expression -> multiplicative_expression STAR cast_expression
Rule 53    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 54    multiplicative_expression -> multiplicative_expression MODULUS cast_expression
Rule 55    additive_expression -> multiplicative_expression
Rule 56    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 57    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 58    shift_expression -> additive_expression
Rule 59    shift_expression -> shift_expression LEFT_SHIFT additive_expression
Rule 60    shift_expression -> shift_expression RIGHT_SHIFT additive_expression
Rule 61    relational_expression -> shift_expression
Rule 62    relational_expression -> relational_expression LESS_THAN shift_expression
Rule 63    relational_expression -> relational_expression GREATER_THAN shift_expression
Rule 64    relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression
Rule 65    relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression
Rule 66    equality_expression -> relational_expression
Rule 67    equality_expression -> equality_expression EQUALS_EQUALS relational_expression
Rule 68    equality_expression -> equality_expression NOT_EQUALS relational_expression
Rule 69    and_expression -> equality_expression
Rule 70    and_expression -> and_expression AND equality_expression
Rule 71    xor_expression -> and_expression
Rule 72    xor_expression -> xor_expression XOR and_expression
Rule 73    or_expression -> xor_expression
Rule 74    or_expression -> or_expression OR xor_expression
Rule 75    logical_and_expression -> or_expression
Rule 76    logical_and_expression -> logical_and_expression AND_AND or_expression
Rule 77    logical_or_expression -> logical_and_expression
Rule 78    logical_or_expression -> logical_or_expression OR_OR logical_and_expression
Rule 79    conditional_expression -> logical_or_expression
Rule 80    conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression
Rule 81    assignment_expression -> conditional_expression
Rule 82    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 83    assignment_operator -> EQUALS
Rule 84    assignment_operator -> DIVIDE_EQUALS
Rule 85    assignment_operator -> MULTIPLY_EQUALS
Rule 86    assignment_operator -> MODULUS_EQUALS
Rule 87    assignment_operator -> PLUS_EQUALS
Rule 88    assignment_operator -> MINUS_EQUALS
Rule 89    assignment_operator -> LEFT_SHIFT_EQUALS
Rule 90    assignment_operator -> RIGHT_SHIFT_EQUALS
Rule 91    assignment_operator -> AND_EQUALS
Rule 92    assignment_operator -> OR_EQUALS
Rule 93    assignment_operator -> XOR_EQUALS
Rule 94    expression -> assignment_expression
Rule 95    expression -> expression COMMA assignment_expression
Rule 96    declaration -> type_specifier SEMICOLON
Rule 97    declaration -> type_specifier init_declarators_list SEMICOLON
Rule 98    declaration -> class_specifier
Rule 99    init_declarators_list -> init_declarator
Rule 100   init_declarators_list -> init_declarators_list COMMA init_declarator
Rule 101   init_declarator -> declarator EQUALS initializer
Rule 102   init_declarator -> declarator
Rule 103   type_specifier -> VOID
Rule 104   type_specifier -> CHAR
Rule 105   type_specifier -> INT
Rule 106   type_specifier -> FLOAT
Rule 107   type_specifier -> DOUBLE
Rule 108   type_specifier -> STRING
Rule 109   type_specifier -> BOOL
Rule 110   type_specifier -> LONG_LONG_INT
Rule 111   type_specifier -> UNSIGNED_INT
Rule 112   type_specifier -> struct_specifier
Rule 113   type_specifier -> CLASS IDENTIFIER
Rule 114   pointer -> STAR
Rule 115   pointer -> STAR pointer
Rule 116   identifier_list -> IDENTIFIER
Rule 117   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 118   specifier_list -> type_specifier specifier_list
Rule 119   specifier_list -> type_specifier
Rule 120   direct_declarator -> IDENTIFIER
Rule 121   direct_declarator -> MAIN
Rule 122   direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
Rule 123   direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
Rule 124   direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
Rule 125   direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
Rule 126   direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
Rule 127   direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 128   declarator -> pointer direct_declarator
Rule 129   declarator -> direct_declarator
Rule 130   parameter_list -> parameter_declaration
Rule 131   parameter_list -> parameter_list COMMA parameter_declaration
Rule 132   parameter_declaration -> type_specifier declarator
Rule 133   parameter_declaration -> type_specifier abstract_declarator
Rule 134   parameter_declaration -> type_specifier
Rule 135   struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
Rule 136   struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
Rule 137   struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
Rule 138   struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
Rule 139   struct_specifier -> STRUCT IDENTIFIER
Rule 140   struct_declarator -> declarator
Rule 141   struct_declarator -> COLON conditional_expression
Rule 142   struct_declarator -> declarator COLON conditional_expression
Rule 143   struct_declarator_list -> struct_declarator
Rule 144   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 145   struct_declaration -> specifier_list struct_declarator_list SEMICOLON
Rule 146   struct_declaration_list -> struct_declaration
Rule 147   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 148   class_head -> CLASS base_clause
Rule 149   class_head -> CLASS
Rule 150   class_head -> CLASS IDENTIFIER base_clause
Rule 151   class_head -> CLASS IDENTIFIER
Rule 152   class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
Rule 153   class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
Rule 154   member_list -> member_access_list
Rule 155   member_list -> access_list
Rule 156   member_list -> member_list access_list
Rule 157   member_declarator -> init_declarator
Rule 158   member_declarator_list -> member_declarator
Rule 159   member_declarator_list -> member_declarator_list COMMA member_declarator
Rule 160   member_declaration -> type_specifier member_declarator_list SEMICOLON
Rule 161   member_declaration -> member_declarator_list SEMICOLON
Rule 162   member_declaration -> type_specifier SEMICOLON
Rule 163   member_declaration -> SEMICOLON
Rule 164   member_declaration -> function_definition
Rule 165   member_declaration -> class_specifier
Rule 166   access_list -> access_specifier COLON member_access_list
Rule 167   access_list -> access_specifier COLON
Rule 168   member_access_list -> member_declaration member_access_list
Rule 169   member_access_list -> member_declaration
Rule 170   base_clause -> COLON base_specifier_list
Rule 171   base_specifier_list -> base_specifier
Rule 172   base_specifier_list -> base_specifier_list COMMA base_specifier
Rule 173   base_specifier -> CLASS IDENTIFIER
Rule 174   base_specifier -> access_specifier CLASS IDENTIFIER
Rule 175   base_specifier -> IDENTIFIER
Rule 176   base_specifier -> access_specifier IDENTIFIER
Rule 177   access_specifier -> PRIVATE
Rule 178   access_specifier -> PUBLIC
Rule 179   abstract_declarator -> pointer
Rule 180   abstract_declarator -> direct_abstract_declarator
Rule 181   abstract_declarator -> pointer direct_abstract_declarator
Rule 182   direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS
Rule 183   direct_abstract_declarator -> LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
Rule 184   direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
Rule 185   direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
Rule 186   direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
Rule 187   direct_abstract_declarator -> LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 188   direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
Rule 189   direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 190   direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
Rule 191   initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET
Rule 192   initializer -> assignment_expression
Rule 193   initializer_list -> initializer_list COMMA initializer
Rule 194   initializer_list -> initializer
Rule 195   statement -> compound_statement
Rule 196   statement -> expression_statement
Rule 197   statement -> selection_statement
Rule 198   statement -> iteration_statement
Rule 199   statement -> jump_statement
Rule 200   statement -> labeled_statement
Rule 201   labeled_statement -> IDENTIFIER COLON statement
Rule 202   compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
Rule 203   compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
Rule 204   compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
Rule 205   compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
Rule 206   declaration_list -> declaration_list declaration
Rule 207   declaration_list -> declaration
Rule 208   statement_list -> statement
Rule 209   statement_list -> statement_list statement
Rule 210   expression_statement -> expression SEMICOLON
Rule 211   expression_statement -> SEMICOLON
Rule 212   selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 213   selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
Rule 214   iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
Rule 215   iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
Rule 216   iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
Rule 217   iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
Rule 218   iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
Rule 219   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 220   jump_statement -> BREAK SEMICOLON
Rule 221   jump_statement -> CONTINUE SEMICOLON
Rule 222   jump_statement -> RETURN SEMICOLON
Rule 223   jump_statement -> RETURN expression SEMICOLON
Rule 224   translation_unit -> translation_unit external_declaration
Rule 225   translation_unit -> external_declaration
Rule 226   external_declaration -> function_definition
Rule 227   external_declaration -> declaration
Rule 228   function_definition -> type_specifier declarator declaration_list compound_statement
Rule 229   function_definition -> type_specifier declarator compound_statement
Rule 230   function_definition -> declarator declaration_list compound_statement
Rule 231   function_definition -> declarator compound_statement

Terminals, with rules where they appear

AND                  : 43 70
AND_AND              : 76
AND_EQUALS           : 91
ARROW                : 32
BOOL                 : 109
BREAK                : 220
CHAR                 : 104
CHARACTER            : 22
CLASS                : 113 148 149 150 151 173 174
COLON                : 80 141 142 166 167 170 201
COMMA                : 36 95 100 117 131 144 159 172 193
CONTINUE             : 221
COS                  : 6
DECIMAL_NUMBER       : 21
DEFINE               : 
DIVIDE               : 53
DIVIDE_EQUALS        : 84
DOT                  : 31
DOUBLE               : 107
ELSE                 : 213
EQUALS               : 83 101
EQUALS_EQUALS        : 67
FALSE                : 24
FLOAT                : 106
FOR                  : 215 216 217 218
GOTO                 : 219
GREATER_THAN         : 63
GREATER_THAN_EQUALS  : 65
HASH                 : 
IDENTIFIER           : 15 31 32 113 116 117 120 135 137 139 150 151 173 174 175 176 201 219
IF                   : 212 213
INCLUDE              : 
INPUT                : 2
INT                  : 105
LEFT_CURLY_BRACKET   : 135 136 137 138 152 153 191 202 203 204 205
LEFT_PARENTHESIS     : 18 29 30 42 50 122 125 126 127 182 187 188 189 190 212 213 214 215 216 217 218
LEFT_SHIFT           : 59
LEFT_SHIFT_EQUALS    : 89
LEFT_SQUARE_BRACKET  : 28 123 124 183 184 185 186
LESS_THAN            : 62
LESS_THAN_EQUALS     : 64
LONG_LONG_INT        : 110
MAIN                 : 121
MINUS                : 46 57
MINUS_EQUALS         : 88
MINUS_MINUS          : 34 39
MODULUS              : 54
MODULUS_EQUALS       : 86
MULTILINE_COMMENT    : 
MULTIPLY_EQUALS      : 85
NOT                  : 47
NOT_EQUALS           : 68
NULL                 : 25
NUMBER               : 20
OPEN                 : 14
OR                   : 74
OR_EQUALS            : 92
OR_OR                : 78
OUTPUT               : 3
PLUS                 : 45 56
PLUS_EQUALS          : 87
PLUS_PLUS            : 33 38
PRIVATE              : 177
PUBLIC               : 178
QUESTION_MARK        : 80
READ                 : 13
RETURN               : 222 223
RIGHT_CURLY_BRACKET  : 135 136 137 138 152 153 191 202 203 204 205
RIGHT_PARENTHESIS    : 18 29 30 42 50 122 125 126 127 182 187 188 189 190 212 213 214 215 216 217 218
RIGHT_SHIFT          : 60
RIGHT_SHIFT_EQUALS   : 90
RIGHT_SQUARE_BRACKET : 28 123 124 183 184 185 186
SCOPE_RESOLUTION     : 
SEMICOLON            : 96 97 145 152 153 160 161 162 163 210 211 219 220 221 222 223
SIN                  : 5
SIZEOF               : 41 42
SQUARE_ROOT          : 4
STAR                 : 44 52 114 115
STRING               : 108
STRING_COMPARE       : 11
STRING_COPY          : 8
STRING_LENGTH        : 10
STRING_LITERAL       : 26
STRING_REVERSE       : 9
STRUCT               : 135 136 137 138 139
TAN                  : 7
THIS                 : 
TILDE                : 48
TRUE                 : 23
UNSIGNED_INT         : 111
VOID                 : 103
WHILE                : 214
WRITE                : 12
XOR                  : 72
XOR_EQUALS           : 93
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 133 182
access_list          : 155 156
access_specifier     : 166 167 174 176
additive_expression  : 56 57 58 59 60
and_expression       : 70 71 72
argument_expression_list : 30 36
assignment_expression : 35 36 82 94 95 192
assignment_operator  : 82
base_clause          : 148 150
base_specifier       : 171 172
base_specifier_list  : 170 172
cast_expression      : 40 50 51 52 53 54
class_head           : 152 153
class_specifier      : 98 165
compound_statement   : 195 214 215 216 217 218 228 229 230 231
conditional_expression : 80 81 123 141 142 184 186
constant             : 16
declaration          : 206 207 227
declaration_list     : 202 203 206 228 230
declarator           : 101 102 122 132 140 142 228 229 230 231
direct_abstract_declarator : 180 181 185 186 189 190
direct_declarator    : 123 124 125 126 127 128 129
equality_expression  : 67 68 69 70
expression           : 18 28 80 95 210 212 213 214 215 216 223
expression_statement : 196 215 215 216 216 217 217 218 218
external_declaration : 224 225
function_definition  : 164 226
identifier_list      : 117 126
init_declarator      : 99 100 157
init_declarators_list : 97 100
initializer          : 101 193 194
initializer_list     : 191 193
iteration_statement  : 198
jump_statement       : 199
labeled_statement    : 200
logical_and_expression : 76 77 78
logical_or_expression : 78 79 80
member_access_list   : 154 166 168
member_declaration   : 168 169
member_declarator    : 158 159
member_declarator_list : 159 160 161
member_list          : 152 156
multiplicative_expression : 52 53 54 55 56 57
or_expression        : 74 75 76
parameter_declaration : 130 131
parameter_list       : 125 131 188 190
pointer              : 115 128 179 181
postfix_expression   : 28 29 30 31 32 33 34 37
predefined_functions : 19
primary_expression   : 27
relational_expression : 62 63 64 65 66 67 68
selection_statement  : 197
shift_expression     : 59 60 61 62 63 64 65
specifier_list       : 118 145
start                : 0
statement            : 201 208 209 212 213 213
statement_list       : 202 204 209
string               : 17
struct_declaration   : 146 147
struct_declaration_list : 135 136 147
struct_declarator    : 143 144
struct_declarator_list : 144 145
struct_specifier     : 112
translation_unit     : 1 224
type_specifier       : 42 50 96 97 118 119 132 133 134 160 162 216 218 228 229
unary_expression     : 38 39 41 49 82
unary_operator       : 40
xor_expression       : 72 73 74


state 0

    (0) S' -> . start
    (1) start -> . translation_unit
    (224) translation_unit -> . translation_unit external_declaration
    (225) translation_unit -> . external_declaration
    (226) external_declaration -> . function_definition
    (227) external_declaration -> . declaration
    (228) function_definition -> . type_specifier declarator declaration_list compound_statement
    (229) function_definition -> . type_specifier declarator compound_statement
    (230) function_definition -> . declarator declaration_list compound_statement
    (231) function_definition -> . declarator compound_statement
    (96) declaration -> . type_specifier SEMICOLON
    (97) declaration -> . type_specifier init_declarators_list SEMICOLON
    (98) declaration -> . class_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (152) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (148) class_head -> . CLASS base_clause
    (149) class_head -> . CLASS
    (150) class_head -> . CLASS IDENTIFIER base_clause
    (151) class_head -> . CLASS IDENTIFIER

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    start                          shift and go to state 1
    translation_unit               shift and go to state 2
    external_declaration           shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    declarator                     shift and go to state 7
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22
    class_head                     shift and go to state 23

state 1

    (0) S' -> start .



state 2

    (1) start -> translation_unit .
    (224) translation_unit -> translation_unit . external_declaration
    (226) external_declaration -> . function_definition
    (227) external_declaration -> . declaration
    (228) function_definition -> . type_specifier declarator declaration_list compound_statement
    (229) function_definition -> . type_specifier declarator compound_statement
    (230) function_definition -> . declarator declaration_list compound_statement
    (231) function_definition -> . declarator compound_statement
    (96) declaration -> . type_specifier SEMICOLON
    (97) declaration -> . type_specifier init_declarators_list SEMICOLON
    (98) declaration -> . class_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (152) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (148) class_head -> . CLASS base_clause
    (149) class_head -> . CLASS
    (150) class_head -> . CLASS IDENTIFIER base_clause
    (151) class_head -> . CLASS IDENTIFIER

    $end            reduce using rule 1 (start -> translation_unit .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    external_declaration           shift and go to state 28
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    declarator                     shift and go to state 7
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22
    class_head                     shift and go to state 23

state 3

    (225) translation_unit -> external_declaration .

    VOID            reduce using rule 225 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 225 (translation_unit -> external_declaration .)
    INT             reduce using rule 225 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 225 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 225 (translation_unit -> external_declaration .)
    STRING          reduce using rule 225 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 225 (translation_unit -> external_declaration .)
    LONG_LONG_INT   reduce using rule 225 (translation_unit -> external_declaration .)
    UNSIGNED_INT    reduce using rule 225 (translation_unit -> external_declaration .)
    CLASS           reduce using rule 225 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 225 (translation_unit -> external_declaration .)
    STAR            reduce using rule 225 (translation_unit -> external_declaration .)
    IDENTIFIER      reduce using rule 225 (translation_unit -> external_declaration .)
    MAIN            reduce using rule 225 (translation_unit -> external_declaration .)
    LEFT_PARENTHESIS reduce using rule 225 (translation_unit -> external_declaration .)
    $end            reduce using rule 225 (translation_unit -> external_declaration .)


state 4

    (226) external_declaration -> function_definition .

    VOID            reduce using rule 226 (external_declaration -> function_definition .)
    CHAR            reduce using rule 226 (external_declaration -> function_definition .)
    INT             reduce using rule 226 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 226 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 226 (external_declaration -> function_definition .)
    STRING          reduce using rule 226 (external_declaration -> function_definition .)
    BOOL            reduce using rule 226 (external_declaration -> function_definition .)
    LONG_LONG_INT   reduce using rule 226 (external_declaration -> function_definition .)
    UNSIGNED_INT    reduce using rule 226 (external_declaration -> function_definition .)
    CLASS           reduce using rule 226 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 226 (external_declaration -> function_definition .)
    STAR            reduce using rule 226 (external_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 226 (external_declaration -> function_definition .)
    MAIN            reduce using rule 226 (external_declaration -> function_definition .)
    LEFT_PARENTHESIS reduce using rule 226 (external_declaration -> function_definition .)
    $end            reduce using rule 226 (external_declaration -> function_definition .)


state 5

    (227) external_declaration -> declaration .

    VOID            reduce using rule 227 (external_declaration -> declaration .)
    CHAR            reduce using rule 227 (external_declaration -> declaration .)
    INT             reduce using rule 227 (external_declaration -> declaration .)
    FLOAT           reduce using rule 227 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 227 (external_declaration -> declaration .)
    STRING          reduce using rule 227 (external_declaration -> declaration .)
    BOOL            reduce using rule 227 (external_declaration -> declaration .)
    LONG_LONG_INT   reduce using rule 227 (external_declaration -> declaration .)
    UNSIGNED_INT    reduce using rule 227 (external_declaration -> declaration .)
    CLASS           reduce using rule 227 (external_declaration -> declaration .)
    STRUCT          reduce using rule 227 (external_declaration -> declaration .)
    STAR            reduce using rule 227 (external_declaration -> declaration .)
    IDENTIFIER      reduce using rule 227 (external_declaration -> declaration .)
    MAIN            reduce using rule 227 (external_declaration -> declaration .)
    LEFT_PARENTHESIS reduce using rule 227 (external_declaration -> declaration .)
    $end            reduce using rule 227 (external_declaration -> declaration .)


state 6

    (228) function_definition -> type_specifier . declarator declaration_list compound_statement
    (229) function_definition -> type_specifier . declarator compound_statement
    (96) declaration -> type_specifier . SEMICOLON
    (97) declaration -> type_specifier . init_declarators_list SEMICOLON
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (99) init_declarators_list -> . init_declarator
    (100) init_declarators_list -> . init_declarators_list COMMA init_declarator
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (101) init_declarator -> . declarator EQUALS initializer
    (102) init_declarator -> . declarator

    SEMICOLON       shift and go to state 30
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    declarator                     shift and go to state 29
    init_declarators_list          shift and go to state 31
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22
    init_declarator                shift and go to state 32

state 7

    (230) function_definition -> declarator . declaration_list compound_statement
    (231) function_definition -> declarator . compound_statement
    (206) declaration_list -> . declaration_list declaration
    (207) declaration_list -> . declaration
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (96) declaration -> . type_specifier SEMICOLON
    (97) declaration -> . type_specifier init_declarators_list SEMICOLON
    (98) declaration -> . class_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (152) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (148) class_head -> . CLASS base_clause
    (149) class_head -> . CLASS
    (150) class_head -> . CLASS IDENTIFIER base_clause
    (151) class_head -> . CLASS IDENTIFIER

    LEFT_CURLY_BRACKET shift and go to state 36
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24

    declaration_list               shift and go to state 33
    compound_statement             shift and go to state 34
    declaration                    shift and go to state 35
    type_specifier                 shift and go to state 37
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23

state 8

    (98) declaration -> class_specifier .

    VOID            reduce using rule 98 (declaration -> class_specifier .)
    CHAR            reduce using rule 98 (declaration -> class_specifier .)
    INT             reduce using rule 98 (declaration -> class_specifier .)
    FLOAT           reduce using rule 98 (declaration -> class_specifier .)
    DOUBLE          reduce using rule 98 (declaration -> class_specifier .)
    STRING          reduce using rule 98 (declaration -> class_specifier .)
    BOOL            reduce using rule 98 (declaration -> class_specifier .)
    LONG_LONG_INT   reduce using rule 98 (declaration -> class_specifier .)
    UNSIGNED_INT    reduce using rule 98 (declaration -> class_specifier .)
    CLASS           reduce using rule 98 (declaration -> class_specifier .)
    STRUCT          reduce using rule 98 (declaration -> class_specifier .)
    STAR            reduce using rule 98 (declaration -> class_specifier .)
    IDENTIFIER      reduce using rule 98 (declaration -> class_specifier .)
    MAIN            reduce using rule 98 (declaration -> class_specifier .)
    LEFT_PARENTHESIS reduce using rule 98 (declaration -> class_specifier .)
    $end            reduce using rule 98 (declaration -> class_specifier .)
    LEFT_CURLY_BRACKET reduce using rule 98 (declaration -> class_specifier .)
    RIGHT_CURLY_BRACKET reduce using rule 98 (declaration -> class_specifier .)
    SEMICOLON       reduce using rule 98 (declaration -> class_specifier .)
    IF              reduce using rule 98 (declaration -> class_specifier .)
    WHILE           reduce using rule 98 (declaration -> class_specifier .)
    FOR             reduce using rule 98 (declaration -> class_specifier .)
    GOTO            reduce using rule 98 (declaration -> class_specifier .)
    BREAK           reduce using rule 98 (declaration -> class_specifier .)
    CONTINUE        reduce using rule 98 (declaration -> class_specifier .)
    RETURN          reduce using rule 98 (declaration -> class_specifier .)
    PLUS_PLUS       reduce using rule 98 (declaration -> class_specifier .)
    MINUS_MINUS     reduce using rule 98 (declaration -> class_specifier .)
    SIZEOF          reduce using rule 98 (declaration -> class_specifier .)
    AND             reduce using rule 98 (declaration -> class_specifier .)
    PLUS            reduce using rule 98 (declaration -> class_specifier .)
    MINUS           reduce using rule 98 (declaration -> class_specifier .)
    NOT             reduce using rule 98 (declaration -> class_specifier .)
    TILDE           reduce using rule 98 (declaration -> class_specifier .)
    NUMBER          reduce using rule 98 (declaration -> class_specifier .)
    DECIMAL_NUMBER  reduce using rule 98 (declaration -> class_specifier .)
    CHARACTER       reduce using rule 98 (declaration -> class_specifier .)
    TRUE            reduce using rule 98 (declaration -> class_specifier .)
    FALSE           reduce using rule 98 (declaration -> class_specifier .)
    NULL            reduce using rule 98 (declaration -> class_specifier .)
    STRING_LITERAL  reduce using rule 98 (declaration -> class_specifier .)
    INPUT           reduce using rule 98 (declaration -> class_specifier .)
    OUTPUT          reduce using rule 98 (declaration -> class_specifier .)
    SQUARE_ROOT     reduce using rule 98 (declaration -> class_specifier .)
    SIN             reduce using rule 98 (declaration -> class_specifier .)
    COS             reduce using rule 98 (declaration -> class_specifier .)
    TAN             reduce using rule 98 (declaration -> class_specifier .)
    STRING_COPY     reduce using rule 98 (declaration -> class_specifier .)
    STRING_REVERSE  reduce using rule 98 (declaration -> class_specifier .)
    STRING_LENGTH   reduce using rule 98 (declaration -> class_specifier .)
    STRING_COMPARE  reduce using rule 98 (declaration -> class_specifier .)
    WRITE           reduce using rule 98 (declaration -> class_specifier .)
    READ            reduce using rule 98 (declaration -> class_specifier .)
    OPEN            reduce using rule 98 (declaration -> class_specifier .)


state 9

    (103) type_specifier -> VOID .

    SEMICOLON       reduce using rule 103 (type_specifier -> VOID .)
    STAR            reduce using rule 103 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 103 (type_specifier -> VOID .)
    MAIN            reduce using rule 103 (type_specifier -> VOID .)
    LEFT_PARENTHESIS reduce using rule 103 (type_specifier -> VOID .)
    LEFT_SQUARE_BRACKET reduce using rule 103 (type_specifier -> VOID .)
    RIGHT_PARENTHESIS reduce using rule 103 (type_specifier -> VOID .)
    COMMA           reduce using rule 103 (type_specifier -> VOID .)
    VOID            reduce using rule 103 (type_specifier -> VOID .)
    CHAR            reduce using rule 103 (type_specifier -> VOID .)
    INT             reduce using rule 103 (type_specifier -> VOID .)
    FLOAT           reduce using rule 103 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 103 (type_specifier -> VOID .)
    STRING          reduce using rule 103 (type_specifier -> VOID .)
    BOOL            reduce using rule 103 (type_specifier -> VOID .)
    LONG_LONG_INT   reduce using rule 103 (type_specifier -> VOID .)
    UNSIGNED_INT    reduce using rule 103 (type_specifier -> VOID .)
    CLASS           reduce using rule 103 (type_specifier -> VOID .)
    STRUCT          reduce using rule 103 (type_specifier -> VOID .)
    COLON           reduce using rule 103 (type_specifier -> VOID .)
    PLUS_PLUS       reduce using rule 103 (type_specifier -> VOID .)
    MINUS_MINUS     reduce using rule 103 (type_specifier -> VOID .)
    SIZEOF          reduce using rule 103 (type_specifier -> VOID .)
    AND             reduce using rule 103 (type_specifier -> VOID .)
    PLUS            reduce using rule 103 (type_specifier -> VOID .)
    MINUS           reduce using rule 103 (type_specifier -> VOID .)
    NOT             reduce using rule 103 (type_specifier -> VOID .)
    TILDE           reduce using rule 103 (type_specifier -> VOID .)
    NUMBER          reduce using rule 103 (type_specifier -> VOID .)
    DECIMAL_NUMBER  reduce using rule 103 (type_specifier -> VOID .)
    CHARACTER       reduce using rule 103 (type_specifier -> VOID .)
    TRUE            reduce using rule 103 (type_specifier -> VOID .)
    FALSE           reduce using rule 103 (type_specifier -> VOID .)
    NULL            reduce using rule 103 (type_specifier -> VOID .)
    STRING_LITERAL  reduce using rule 103 (type_specifier -> VOID .)
    INPUT           reduce using rule 103 (type_specifier -> VOID .)
    OUTPUT          reduce using rule 103 (type_specifier -> VOID .)
    SQUARE_ROOT     reduce using rule 103 (type_specifier -> VOID .)
    SIN             reduce using rule 103 (type_specifier -> VOID .)
    COS             reduce using rule 103 (type_specifier -> VOID .)
    TAN             reduce using rule 103 (type_specifier -> VOID .)
    STRING_COPY     reduce using rule 103 (type_specifier -> VOID .)
    STRING_REVERSE  reduce using rule 103 (type_specifier -> VOID .)
    STRING_LENGTH   reduce using rule 103 (type_specifier -> VOID .)
    STRING_COMPARE  reduce using rule 103 (type_specifier -> VOID .)
    WRITE           reduce using rule 103 (type_specifier -> VOID .)
    READ            reduce using rule 103 (type_specifier -> VOID .)
    OPEN            reduce using rule 103 (type_specifier -> VOID .)


state 10

    (104) type_specifier -> CHAR .

    SEMICOLON       reduce using rule 104 (type_specifier -> CHAR .)
    STAR            reduce using rule 104 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 104 (type_specifier -> CHAR .)
    MAIN            reduce using rule 104 (type_specifier -> CHAR .)
    LEFT_PARENTHESIS reduce using rule 104 (type_specifier -> CHAR .)
    LEFT_SQUARE_BRACKET reduce using rule 104 (type_specifier -> CHAR .)
    RIGHT_PARENTHESIS reduce using rule 104 (type_specifier -> CHAR .)
    COMMA           reduce using rule 104 (type_specifier -> CHAR .)
    VOID            reduce using rule 104 (type_specifier -> CHAR .)
    CHAR            reduce using rule 104 (type_specifier -> CHAR .)
    INT             reduce using rule 104 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 104 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 104 (type_specifier -> CHAR .)
    STRING          reduce using rule 104 (type_specifier -> CHAR .)
    BOOL            reduce using rule 104 (type_specifier -> CHAR .)
    LONG_LONG_INT   reduce using rule 104 (type_specifier -> CHAR .)
    UNSIGNED_INT    reduce using rule 104 (type_specifier -> CHAR .)
    CLASS           reduce using rule 104 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 104 (type_specifier -> CHAR .)
    COLON           reduce using rule 104 (type_specifier -> CHAR .)
    PLUS_PLUS       reduce using rule 104 (type_specifier -> CHAR .)
    MINUS_MINUS     reduce using rule 104 (type_specifier -> CHAR .)
    SIZEOF          reduce using rule 104 (type_specifier -> CHAR .)
    AND             reduce using rule 104 (type_specifier -> CHAR .)
    PLUS            reduce using rule 104 (type_specifier -> CHAR .)
    MINUS           reduce using rule 104 (type_specifier -> CHAR .)
    NOT             reduce using rule 104 (type_specifier -> CHAR .)
    TILDE           reduce using rule 104 (type_specifier -> CHAR .)
    NUMBER          reduce using rule 104 (type_specifier -> CHAR .)
    DECIMAL_NUMBER  reduce using rule 104 (type_specifier -> CHAR .)
    CHARACTER       reduce using rule 104 (type_specifier -> CHAR .)
    TRUE            reduce using rule 104 (type_specifier -> CHAR .)
    FALSE           reduce using rule 104 (type_specifier -> CHAR .)
    NULL            reduce using rule 104 (type_specifier -> CHAR .)
    STRING_LITERAL  reduce using rule 104 (type_specifier -> CHAR .)
    INPUT           reduce using rule 104 (type_specifier -> CHAR .)
    OUTPUT          reduce using rule 104 (type_specifier -> CHAR .)
    SQUARE_ROOT     reduce using rule 104 (type_specifier -> CHAR .)
    SIN             reduce using rule 104 (type_specifier -> CHAR .)
    COS             reduce using rule 104 (type_specifier -> CHAR .)
    TAN             reduce using rule 104 (type_specifier -> CHAR .)
    STRING_COPY     reduce using rule 104 (type_specifier -> CHAR .)
    STRING_REVERSE  reduce using rule 104 (type_specifier -> CHAR .)
    STRING_LENGTH   reduce using rule 104 (type_specifier -> CHAR .)
    STRING_COMPARE  reduce using rule 104 (type_specifier -> CHAR .)
    WRITE           reduce using rule 104 (type_specifier -> CHAR .)
    READ            reduce using rule 104 (type_specifier -> CHAR .)
    OPEN            reduce using rule 104 (type_specifier -> CHAR .)


state 11

    (105) type_specifier -> INT .

    SEMICOLON       reduce using rule 105 (type_specifier -> INT .)
    STAR            reduce using rule 105 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 105 (type_specifier -> INT .)
    MAIN            reduce using rule 105 (type_specifier -> INT .)
    LEFT_PARENTHESIS reduce using rule 105 (type_specifier -> INT .)
    LEFT_SQUARE_BRACKET reduce using rule 105 (type_specifier -> INT .)
    RIGHT_PARENTHESIS reduce using rule 105 (type_specifier -> INT .)
    COMMA           reduce using rule 105 (type_specifier -> INT .)
    VOID            reduce using rule 105 (type_specifier -> INT .)
    CHAR            reduce using rule 105 (type_specifier -> INT .)
    INT             reduce using rule 105 (type_specifier -> INT .)
    FLOAT           reduce using rule 105 (type_specifier -> INT .)
    DOUBLE          reduce using rule 105 (type_specifier -> INT .)
    STRING          reduce using rule 105 (type_specifier -> INT .)
    BOOL            reduce using rule 105 (type_specifier -> INT .)
    LONG_LONG_INT   reduce using rule 105 (type_specifier -> INT .)
    UNSIGNED_INT    reduce using rule 105 (type_specifier -> INT .)
    CLASS           reduce using rule 105 (type_specifier -> INT .)
    STRUCT          reduce using rule 105 (type_specifier -> INT .)
    COLON           reduce using rule 105 (type_specifier -> INT .)
    PLUS_PLUS       reduce using rule 105 (type_specifier -> INT .)
    MINUS_MINUS     reduce using rule 105 (type_specifier -> INT .)
    SIZEOF          reduce using rule 105 (type_specifier -> INT .)
    AND             reduce using rule 105 (type_specifier -> INT .)
    PLUS            reduce using rule 105 (type_specifier -> INT .)
    MINUS           reduce using rule 105 (type_specifier -> INT .)
    NOT             reduce using rule 105 (type_specifier -> INT .)
    TILDE           reduce using rule 105 (type_specifier -> INT .)
    NUMBER          reduce using rule 105 (type_specifier -> INT .)
    DECIMAL_NUMBER  reduce using rule 105 (type_specifier -> INT .)
    CHARACTER       reduce using rule 105 (type_specifier -> INT .)
    TRUE            reduce using rule 105 (type_specifier -> INT .)
    FALSE           reduce using rule 105 (type_specifier -> INT .)
    NULL            reduce using rule 105 (type_specifier -> INT .)
    STRING_LITERAL  reduce using rule 105 (type_specifier -> INT .)
    INPUT           reduce using rule 105 (type_specifier -> INT .)
    OUTPUT          reduce using rule 105 (type_specifier -> INT .)
    SQUARE_ROOT     reduce using rule 105 (type_specifier -> INT .)
    SIN             reduce using rule 105 (type_specifier -> INT .)
    COS             reduce using rule 105 (type_specifier -> INT .)
    TAN             reduce using rule 105 (type_specifier -> INT .)
    STRING_COPY     reduce using rule 105 (type_specifier -> INT .)
    STRING_REVERSE  reduce using rule 105 (type_specifier -> INT .)
    STRING_LENGTH   reduce using rule 105 (type_specifier -> INT .)
    STRING_COMPARE  reduce using rule 105 (type_specifier -> INT .)
    WRITE           reduce using rule 105 (type_specifier -> INT .)
    READ            reduce using rule 105 (type_specifier -> INT .)
    OPEN            reduce using rule 105 (type_specifier -> INT .)


state 12

    (106) type_specifier -> FLOAT .

    SEMICOLON       reduce using rule 106 (type_specifier -> FLOAT .)
    STAR            reduce using rule 106 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 106 (type_specifier -> FLOAT .)
    MAIN            reduce using rule 106 (type_specifier -> FLOAT .)
    LEFT_PARENTHESIS reduce using rule 106 (type_specifier -> FLOAT .)
    LEFT_SQUARE_BRACKET reduce using rule 106 (type_specifier -> FLOAT .)
    RIGHT_PARENTHESIS reduce using rule 106 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 106 (type_specifier -> FLOAT .)
    VOID            reduce using rule 106 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 106 (type_specifier -> FLOAT .)
    INT             reduce using rule 106 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 106 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 106 (type_specifier -> FLOAT .)
    STRING          reduce using rule 106 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 106 (type_specifier -> FLOAT .)
    LONG_LONG_INT   reduce using rule 106 (type_specifier -> FLOAT .)
    UNSIGNED_INT    reduce using rule 106 (type_specifier -> FLOAT .)
    CLASS           reduce using rule 106 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 106 (type_specifier -> FLOAT .)
    COLON           reduce using rule 106 (type_specifier -> FLOAT .)
    PLUS_PLUS       reduce using rule 106 (type_specifier -> FLOAT .)
    MINUS_MINUS     reduce using rule 106 (type_specifier -> FLOAT .)
    SIZEOF          reduce using rule 106 (type_specifier -> FLOAT .)
    AND             reduce using rule 106 (type_specifier -> FLOAT .)
    PLUS            reduce using rule 106 (type_specifier -> FLOAT .)
    MINUS           reduce using rule 106 (type_specifier -> FLOAT .)
    NOT             reduce using rule 106 (type_specifier -> FLOAT .)
    TILDE           reduce using rule 106 (type_specifier -> FLOAT .)
    NUMBER          reduce using rule 106 (type_specifier -> FLOAT .)
    DECIMAL_NUMBER  reduce using rule 106 (type_specifier -> FLOAT .)
    CHARACTER       reduce using rule 106 (type_specifier -> FLOAT .)
    TRUE            reduce using rule 106 (type_specifier -> FLOAT .)
    FALSE           reduce using rule 106 (type_specifier -> FLOAT .)
    NULL            reduce using rule 106 (type_specifier -> FLOAT .)
    STRING_LITERAL  reduce using rule 106 (type_specifier -> FLOAT .)
    INPUT           reduce using rule 106 (type_specifier -> FLOAT .)
    OUTPUT          reduce using rule 106 (type_specifier -> FLOAT .)
    SQUARE_ROOT     reduce using rule 106 (type_specifier -> FLOAT .)
    SIN             reduce using rule 106 (type_specifier -> FLOAT .)
    COS             reduce using rule 106 (type_specifier -> FLOAT .)
    TAN             reduce using rule 106 (type_specifier -> FLOAT .)
    STRING_COPY     reduce using rule 106 (type_specifier -> FLOAT .)
    STRING_REVERSE  reduce using rule 106 (type_specifier -> FLOAT .)
    STRING_LENGTH   reduce using rule 106 (type_specifier -> FLOAT .)
    STRING_COMPARE  reduce using rule 106 (type_specifier -> FLOAT .)
    WRITE           reduce using rule 106 (type_specifier -> FLOAT .)
    READ            reduce using rule 106 (type_specifier -> FLOAT .)
    OPEN            reduce using rule 106 (type_specifier -> FLOAT .)


state 13

    (107) type_specifier -> DOUBLE .

    SEMICOLON       reduce using rule 107 (type_specifier -> DOUBLE .)
    STAR            reduce using rule 107 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 107 (type_specifier -> DOUBLE .)
    MAIN            reduce using rule 107 (type_specifier -> DOUBLE .)
    LEFT_PARENTHESIS reduce using rule 107 (type_specifier -> DOUBLE .)
    LEFT_SQUARE_BRACKET reduce using rule 107 (type_specifier -> DOUBLE .)
    RIGHT_PARENTHESIS reduce using rule 107 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 107 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 107 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 107 (type_specifier -> DOUBLE .)
    INT             reduce using rule 107 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 107 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 107 (type_specifier -> DOUBLE .)
    STRING          reduce using rule 107 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 107 (type_specifier -> DOUBLE .)
    LONG_LONG_INT   reduce using rule 107 (type_specifier -> DOUBLE .)
    UNSIGNED_INT    reduce using rule 107 (type_specifier -> DOUBLE .)
    CLASS           reduce using rule 107 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 107 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 107 (type_specifier -> DOUBLE .)
    PLUS_PLUS       reduce using rule 107 (type_specifier -> DOUBLE .)
    MINUS_MINUS     reduce using rule 107 (type_specifier -> DOUBLE .)
    SIZEOF          reduce using rule 107 (type_specifier -> DOUBLE .)
    AND             reduce using rule 107 (type_specifier -> DOUBLE .)
    PLUS            reduce using rule 107 (type_specifier -> DOUBLE .)
    MINUS           reduce using rule 107 (type_specifier -> DOUBLE .)
    NOT             reduce using rule 107 (type_specifier -> DOUBLE .)
    TILDE           reduce using rule 107 (type_specifier -> DOUBLE .)
    NUMBER          reduce using rule 107 (type_specifier -> DOUBLE .)
    DECIMAL_NUMBER  reduce using rule 107 (type_specifier -> DOUBLE .)
    CHARACTER       reduce using rule 107 (type_specifier -> DOUBLE .)
    TRUE            reduce using rule 107 (type_specifier -> DOUBLE .)
    FALSE           reduce using rule 107 (type_specifier -> DOUBLE .)
    NULL            reduce using rule 107 (type_specifier -> DOUBLE .)
    STRING_LITERAL  reduce using rule 107 (type_specifier -> DOUBLE .)
    INPUT           reduce using rule 107 (type_specifier -> DOUBLE .)
    OUTPUT          reduce using rule 107 (type_specifier -> DOUBLE .)
    SQUARE_ROOT     reduce using rule 107 (type_specifier -> DOUBLE .)
    SIN             reduce using rule 107 (type_specifier -> DOUBLE .)
    COS             reduce using rule 107 (type_specifier -> DOUBLE .)
    TAN             reduce using rule 107 (type_specifier -> DOUBLE .)
    STRING_COPY     reduce using rule 107 (type_specifier -> DOUBLE .)
    STRING_REVERSE  reduce using rule 107 (type_specifier -> DOUBLE .)
    STRING_LENGTH   reduce using rule 107 (type_specifier -> DOUBLE .)
    STRING_COMPARE  reduce using rule 107 (type_specifier -> DOUBLE .)
    WRITE           reduce using rule 107 (type_specifier -> DOUBLE .)
    READ            reduce using rule 107 (type_specifier -> DOUBLE .)
    OPEN            reduce using rule 107 (type_specifier -> DOUBLE .)


state 14

    (108) type_specifier -> STRING .

    SEMICOLON       reduce using rule 108 (type_specifier -> STRING .)
    STAR            reduce using rule 108 (type_specifier -> STRING .)
    IDENTIFIER      reduce using rule 108 (type_specifier -> STRING .)
    MAIN            reduce using rule 108 (type_specifier -> STRING .)
    LEFT_PARENTHESIS reduce using rule 108 (type_specifier -> STRING .)
    LEFT_SQUARE_BRACKET reduce using rule 108 (type_specifier -> STRING .)
    RIGHT_PARENTHESIS reduce using rule 108 (type_specifier -> STRING .)
    COMMA           reduce using rule 108 (type_specifier -> STRING .)
    VOID            reduce using rule 108 (type_specifier -> STRING .)
    CHAR            reduce using rule 108 (type_specifier -> STRING .)
    INT             reduce using rule 108 (type_specifier -> STRING .)
    FLOAT           reduce using rule 108 (type_specifier -> STRING .)
    DOUBLE          reduce using rule 108 (type_specifier -> STRING .)
    STRING          reduce using rule 108 (type_specifier -> STRING .)
    BOOL            reduce using rule 108 (type_specifier -> STRING .)
    LONG_LONG_INT   reduce using rule 108 (type_specifier -> STRING .)
    UNSIGNED_INT    reduce using rule 108 (type_specifier -> STRING .)
    CLASS           reduce using rule 108 (type_specifier -> STRING .)
    STRUCT          reduce using rule 108 (type_specifier -> STRING .)
    COLON           reduce using rule 108 (type_specifier -> STRING .)
    PLUS_PLUS       reduce using rule 108 (type_specifier -> STRING .)
    MINUS_MINUS     reduce using rule 108 (type_specifier -> STRING .)
    SIZEOF          reduce using rule 108 (type_specifier -> STRING .)
    AND             reduce using rule 108 (type_specifier -> STRING .)
    PLUS            reduce using rule 108 (type_specifier -> STRING .)
    MINUS           reduce using rule 108 (type_specifier -> STRING .)
    NOT             reduce using rule 108 (type_specifier -> STRING .)
    TILDE           reduce using rule 108 (type_specifier -> STRING .)
    NUMBER          reduce using rule 108 (type_specifier -> STRING .)
    DECIMAL_NUMBER  reduce using rule 108 (type_specifier -> STRING .)
    CHARACTER       reduce using rule 108 (type_specifier -> STRING .)
    TRUE            reduce using rule 108 (type_specifier -> STRING .)
    FALSE           reduce using rule 108 (type_specifier -> STRING .)
    NULL            reduce using rule 108 (type_specifier -> STRING .)
    STRING_LITERAL  reduce using rule 108 (type_specifier -> STRING .)
    INPUT           reduce using rule 108 (type_specifier -> STRING .)
    OUTPUT          reduce using rule 108 (type_specifier -> STRING .)
    SQUARE_ROOT     reduce using rule 108 (type_specifier -> STRING .)
    SIN             reduce using rule 108 (type_specifier -> STRING .)
    COS             reduce using rule 108 (type_specifier -> STRING .)
    TAN             reduce using rule 108 (type_specifier -> STRING .)
    STRING_COPY     reduce using rule 108 (type_specifier -> STRING .)
    STRING_REVERSE  reduce using rule 108 (type_specifier -> STRING .)
    STRING_LENGTH   reduce using rule 108 (type_specifier -> STRING .)
    STRING_COMPARE  reduce using rule 108 (type_specifier -> STRING .)
    WRITE           reduce using rule 108 (type_specifier -> STRING .)
    READ            reduce using rule 108 (type_specifier -> STRING .)
    OPEN            reduce using rule 108 (type_specifier -> STRING .)


state 15

    (109) type_specifier -> BOOL .

    SEMICOLON       reduce using rule 109 (type_specifier -> BOOL .)
    STAR            reduce using rule 109 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 109 (type_specifier -> BOOL .)
    MAIN            reduce using rule 109 (type_specifier -> BOOL .)
    LEFT_PARENTHESIS reduce using rule 109 (type_specifier -> BOOL .)
    LEFT_SQUARE_BRACKET reduce using rule 109 (type_specifier -> BOOL .)
    RIGHT_PARENTHESIS reduce using rule 109 (type_specifier -> BOOL .)
    COMMA           reduce using rule 109 (type_specifier -> BOOL .)
    VOID            reduce using rule 109 (type_specifier -> BOOL .)
    CHAR            reduce using rule 109 (type_specifier -> BOOL .)
    INT             reduce using rule 109 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 109 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 109 (type_specifier -> BOOL .)
    STRING          reduce using rule 109 (type_specifier -> BOOL .)
    BOOL            reduce using rule 109 (type_specifier -> BOOL .)
    LONG_LONG_INT   reduce using rule 109 (type_specifier -> BOOL .)
    UNSIGNED_INT    reduce using rule 109 (type_specifier -> BOOL .)
    CLASS           reduce using rule 109 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 109 (type_specifier -> BOOL .)
    COLON           reduce using rule 109 (type_specifier -> BOOL .)
    PLUS_PLUS       reduce using rule 109 (type_specifier -> BOOL .)
    MINUS_MINUS     reduce using rule 109 (type_specifier -> BOOL .)
    SIZEOF          reduce using rule 109 (type_specifier -> BOOL .)
    AND             reduce using rule 109 (type_specifier -> BOOL .)
    PLUS            reduce using rule 109 (type_specifier -> BOOL .)
    MINUS           reduce using rule 109 (type_specifier -> BOOL .)
    NOT             reduce using rule 109 (type_specifier -> BOOL .)
    TILDE           reduce using rule 109 (type_specifier -> BOOL .)
    NUMBER          reduce using rule 109 (type_specifier -> BOOL .)
    DECIMAL_NUMBER  reduce using rule 109 (type_specifier -> BOOL .)
    CHARACTER       reduce using rule 109 (type_specifier -> BOOL .)
    TRUE            reduce using rule 109 (type_specifier -> BOOL .)
    FALSE           reduce using rule 109 (type_specifier -> BOOL .)
    NULL            reduce using rule 109 (type_specifier -> BOOL .)
    STRING_LITERAL  reduce using rule 109 (type_specifier -> BOOL .)
    INPUT           reduce using rule 109 (type_specifier -> BOOL .)
    OUTPUT          reduce using rule 109 (type_specifier -> BOOL .)
    SQUARE_ROOT     reduce using rule 109 (type_specifier -> BOOL .)
    SIN             reduce using rule 109 (type_specifier -> BOOL .)
    COS             reduce using rule 109 (type_specifier -> BOOL .)
    TAN             reduce using rule 109 (type_specifier -> BOOL .)
    STRING_COPY     reduce using rule 109 (type_specifier -> BOOL .)
    STRING_REVERSE  reduce using rule 109 (type_specifier -> BOOL .)
    STRING_LENGTH   reduce using rule 109 (type_specifier -> BOOL .)
    STRING_COMPARE  reduce using rule 109 (type_specifier -> BOOL .)
    WRITE           reduce using rule 109 (type_specifier -> BOOL .)
    READ            reduce using rule 109 (type_specifier -> BOOL .)
    OPEN            reduce using rule 109 (type_specifier -> BOOL .)


state 16

    (110) type_specifier -> LONG_LONG_INT .

    SEMICOLON       reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    STAR            reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    IDENTIFIER      reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    MAIN            reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    LEFT_PARENTHESIS reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    LEFT_SQUARE_BRACKET reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    RIGHT_PARENTHESIS reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    COMMA           reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    VOID            reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    CHAR            reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    INT             reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    FLOAT           reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    DOUBLE          reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    STRING          reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    BOOL            reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    LONG_LONG_INT   reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    UNSIGNED_INT    reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    CLASS           reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    STRUCT          reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    COLON           reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    PLUS_PLUS       reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    MINUS_MINUS     reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    SIZEOF          reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    AND             reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    PLUS            reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    MINUS           reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    NOT             reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    TILDE           reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    NUMBER          reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    DECIMAL_NUMBER  reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    CHARACTER       reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    TRUE            reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    FALSE           reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    NULL            reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    STRING_LITERAL  reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    INPUT           reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    OUTPUT          reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    SQUARE_ROOT     reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    SIN             reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    COS             reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    TAN             reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    STRING_COPY     reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    STRING_REVERSE  reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    STRING_LENGTH   reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    STRING_COMPARE  reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    WRITE           reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    READ            reduce using rule 110 (type_specifier -> LONG_LONG_INT .)
    OPEN            reduce using rule 110 (type_specifier -> LONG_LONG_INT .)


state 17

    (111) type_specifier -> UNSIGNED_INT .

    SEMICOLON       reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    STAR            reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    IDENTIFIER      reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    MAIN            reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    LEFT_PARENTHESIS reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    LEFT_SQUARE_BRACKET reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    RIGHT_PARENTHESIS reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    COMMA           reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    VOID            reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    CHAR            reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    INT             reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    FLOAT           reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    DOUBLE          reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    STRING          reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    BOOL            reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    LONG_LONG_INT   reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    UNSIGNED_INT    reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    CLASS           reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    STRUCT          reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    COLON           reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    PLUS_PLUS       reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    MINUS_MINUS     reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    SIZEOF          reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    AND             reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    PLUS            reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    MINUS           reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    NOT             reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    TILDE           reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    NUMBER          reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    DECIMAL_NUMBER  reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    CHARACTER       reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    TRUE            reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    FALSE           reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    NULL            reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    STRING_LITERAL  reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    INPUT           reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    OUTPUT          reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    SQUARE_ROOT     reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    SIN             reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    COS             reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    TAN             reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    STRING_COPY     reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    STRING_REVERSE  reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    STRING_LENGTH   reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    STRING_COMPARE  reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    WRITE           reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    READ            reduce using rule 111 (type_specifier -> UNSIGNED_INT .)
    OPEN            reduce using rule 111 (type_specifier -> UNSIGNED_INT .)


state 18

    (112) type_specifier -> struct_specifier .

    SEMICOLON       reduce using rule 112 (type_specifier -> struct_specifier .)
    STAR            reduce using rule 112 (type_specifier -> struct_specifier .)
    IDENTIFIER      reduce using rule 112 (type_specifier -> struct_specifier .)
    MAIN            reduce using rule 112 (type_specifier -> struct_specifier .)
    LEFT_PARENTHESIS reduce using rule 112 (type_specifier -> struct_specifier .)
    LEFT_SQUARE_BRACKET reduce using rule 112 (type_specifier -> struct_specifier .)
    RIGHT_PARENTHESIS reduce using rule 112 (type_specifier -> struct_specifier .)
    COMMA           reduce using rule 112 (type_specifier -> struct_specifier .)
    VOID            reduce using rule 112 (type_specifier -> struct_specifier .)
    CHAR            reduce using rule 112 (type_specifier -> struct_specifier .)
    INT             reduce using rule 112 (type_specifier -> struct_specifier .)
    FLOAT           reduce using rule 112 (type_specifier -> struct_specifier .)
    DOUBLE          reduce using rule 112 (type_specifier -> struct_specifier .)
    STRING          reduce using rule 112 (type_specifier -> struct_specifier .)
    BOOL            reduce using rule 112 (type_specifier -> struct_specifier .)
    LONG_LONG_INT   reduce using rule 112 (type_specifier -> struct_specifier .)
    UNSIGNED_INT    reduce using rule 112 (type_specifier -> struct_specifier .)
    CLASS           reduce using rule 112 (type_specifier -> struct_specifier .)
    STRUCT          reduce using rule 112 (type_specifier -> struct_specifier .)
    COLON           reduce using rule 112 (type_specifier -> struct_specifier .)
    PLUS_PLUS       reduce using rule 112 (type_specifier -> struct_specifier .)
    MINUS_MINUS     reduce using rule 112 (type_specifier -> struct_specifier .)
    SIZEOF          reduce using rule 112 (type_specifier -> struct_specifier .)
    AND             reduce using rule 112 (type_specifier -> struct_specifier .)
    PLUS            reduce using rule 112 (type_specifier -> struct_specifier .)
    MINUS           reduce using rule 112 (type_specifier -> struct_specifier .)
    NOT             reduce using rule 112 (type_specifier -> struct_specifier .)
    TILDE           reduce using rule 112 (type_specifier -> struct_specifier .)
    NUMBER          reduce using rule 112 (type_specifier -> struct_specifier .)
    DECIMAL_NUMBER  reduce using rule 112 (type_specifier -> struct_specifier .)
    CHARACTER       reduce using rule 112 (type_specifier -> struct_specifier .)
    TRUE            reduce using rule 112 (type_specifier -> struct_specifier .)
    FALSE           reduce using rule 112 (type_specifier -> struct_specifier .)
    NULL            reduce using rule 112 (type_specifier -> struct_specifier .)
    STRING_LITERAL  reduce using rule 112 (type_specifier -> struct_specifier .)
    INPUT           reduce using rule 112 (type_specifier -> struct_specifier .)
    OUTPUT          reduce using rule 112 (type_specifier -> struct_specifier .)
    SQUARE_ROOT     reduce using rule 112 (type_specifier -> struct_specifier .)
    SIN             reduce using rule 112 (type_specifier -> struct_specifier .)
    COS             reduce using rule 112 (type_specifier -> struct_specifier .)
    TAN             reduce using rule 112 (type_specifier -> struct_specifier .)
    STRING_COPY     reduce using rule 112 (type_specifier -> struct_specifier .)
    STRING_REVERSE  reduce using rule 112 (type_specifier -> struct_specifier .)
    STRING_LENGTH   reduce using rule 112 (type_specifier -> struct_specifier .)
    STRING_COMPARE  reduce using rule 112 (type_specifier -> struct_specifier .)
    WRITE           reduce using rule 112 (type_specifier -> struct_specifier .)
    READ            reduce using rule 112 (type_specifier -> struct_specifier .)
    OPEN            reduce using rule 112 (type_specifier -> struct_specifier .)


state 19

    (113) type_specifier -> CLASS . IDENTIFIER
    (148) class_head -> CLASS . base_clause
    (149) class_head -> CLASS .
    (150) class_head -> CLASS . IDENTIFIER base_clause
    (151) class_head -> CLASS . IDENTIFIER
    (170) base_clause -> . COLON base_specifier_list

    IDENTIFIER      shift and go to state 38
    LEFT_CURLY_BRACKET reduce using rule 149 (class_head -> CLASS .)
    COLON           shift and go to state 40

    base_clause                    shift and go to state 39

state 20

    (120) direct_declarator -> IDENTIFIER .

    LEFT_SQUARE_BRACKET reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    STRING          reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    BOOL            reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    LONG_LONG_INT   reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    UNSIGNED_INT    reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    CLASS           reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    EQUALS          reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 120 (direct_declarator -> IDENTIFIER .)
    COLON           reduce using rule 120 (direct_declarator -> IDENTIFIER .)


state 21

    (128) declarator -> pointer . direct_declarator
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    direct_declarator              shift and go to state 41

state 22

    (129) declarator -> direct_declarator .
    (123) direct_declarator -> direct_declarator . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> direct_declarator . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> direct_declarator . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> direct_declarator . LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> direct_declarator . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_CURLY_BRACKET reduce using rule 129 (declarator -> direct_declarator .)
    VOID            reduce using rule 129 (declarator -> direct_declarator .)
    CHAR            reduce using rule 129 (declarator -> direct_declarator .)
    INT             reduce using rule 129 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 129 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 129 (declarator -> direct_declarator .)
    STRING          reduce using rule 129 (declarator -> direct_declarator .)
    BOOL            reduce using rule 129 (declarator -> direct_declarator .)
    LONG_LONG_INT   reduce using rule 129 (declarator -> direct_declarator .)
    UNSIGNED_INT    reduce using rule 129 (declarator -> direct_declarator .)
    CLASS           reduce using rule 129 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 129 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 129 (declarator -> direct_declarator .)
    SEMICOLON       reduce using rule 129 (declarator -> direct_declarator .)
    COMMA           reduce using rule 129 (declarator -> direct_declarator .)
    RIGHT_PARENTHESIS reduce using rule 129 (declarator -> direct_declarator .)
    COLON           reduce using rule 129 (declarator -> direct_declarator .)
    LEFT_SQUARE_BRACKET shift and go to state 42
    LEFT_PARENTHESIS shift and go to state 43


state 23

    (152) class_specifier -> class_head . LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> class_head . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON

    LEFT_CURLY_BRACKET shift and go to state 44


state 24

    (135) struct_specifier -> STRUCT . IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> STRUCT . LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> STRUCT . IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> STRUCT . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> STRUCT . IDENTIFIER

    IDENTIFIER      shift and go to state 45
    LEFT_CURLY_BRACKET shift and go to state 46


state 25

    (114) pointer -> STAR .
    (115) pointer -> STAR . pointer
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer

    IDENTIFIER      reduce using rule 114 (pointer -> STAR .)
    MAIN            reduce using rule 114 (pointer -> STAR .)
    LEFT_PARENTHESIS reduce using rule 114 (pointer -> STAR .)
    LEFT_SQUARE_BRACKET reduce using rule 114 (pointer -> STAR .)
    RIGHT_PARENTHESIS reduce using rule 114 (pointer -> STAR .)
    COMMA           reduce using rule 114 (pointer -> STAR .)
    STAR            shift and go to state 25

    pointer                        shift and go to state 47

state 26

    (121) direct_declarator -> MAIN .

    LEFT_SQUARE_BRACKET reduce using rule 121 (direct_declarator -> MAIN .)
    LEFT_PARENTHESIS reduce using rule 121 (direct_declarator -> MAIN .)
    LEFT_CURLY_BRACKET reduce using rule 121 (direct_declarator -> MAIN .)
    VOID            reduce using rule 121 (direct_declarator -> MAIN .)
    CHAR            reduce using rule 121 (direct_declarator -> MAIN .)
    INT             reduce using rule 121 (direct_declarator -> MAIN .)
    FLOAT           reduce using rule 121 (direct_declarator -> MAIN .)
    DOUBLE          reduce using rule 121 (direct_declarator -> MAIN .)
    STRING          reduce using rule 121 (direct_declarator -> MAIN .)
    BOOL            reduce using rule 121 (direct_declarator -> MAIN .)
    LONG_LONG_INT   reduce using rule 121 (direct_declarator -> MAIN .)
    UNSIGNED_INT    reduce using rule 121 (direct_declarator -> MAIN .)
    CLASS           reduce using rule 121 (direct_declarator -> MAIN .)
    STRUCT          reduce using rule 121 (direct_declarator -> MAIN .)
    EQUALS          reduce using rule 121 (direct_declarator -> MAIN .)
    SEMICOLON       reduce using rule 121 (direct_declarator -> MAIN .)
    COMMA           reduce using rule 121 (direct_declarator -> MAIN .)
    RIGHT_PARENTHESIS reduce using rule 121 (direct_declarator -> MAIN .)
    COLON           reduce using rule 121 (direct_declarator -> MAIN .)


state 27

    (122) direct_declarator -> LEFT_PARENTHESIS . declarator RIGHT_PARENTHESIS
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    declarator                     shift and go to state 48
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 28

    (224) translation_unit -> translation_unit external_declaration .

    VOID            reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    STRING          reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    LONG_LONG_INT   reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED_INT    reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    CLASS           reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    STAR            reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    IDENTIFIER      reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    MAIN            reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    LEFT_PARENTHESIS reduce using rule 224 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 224 (translation_unit -> translation_unit external_declaration .)


state 29

    (228) function_definition -> type_specifier declarator . declaration_list compound_statement
    (229) function_definition -> type_specifier declarator . compound_statement
    (101) init_declarator -> declarator . EQUALS initializer
    (102) init_declarator -> declarator .
    (206) declaration_list -> . declaration_list declaration
    (207) declaration_list -> . declaration
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (96) declaration -> . type_specifier SEMICOLON
    (97) declaration -> . type_specifier init_declarators_list SEMICOLON
    (98) declaration -> . class_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (152) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (148) class_head -> . CLASS base_clause
    (149) class_head -> . CLASS
    (150) class_head -> . CLASS IDENTIFIER base_clause
    (151) class_head -> . CLASS IDENTIFIER

    EQUALS          shift and go to state 51
    SEMICOLON       reduce using rule 102 (init_declarator -> declarator .)
    COMMA           reduce using rule 102 (init_declarator -> declarator .)
    LEFT_CURLY_BRACKET shift and go to state 36
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24

    type_specifier                 shift and go to state 37
    declaration_list               shift and go to state 49
    compound_statement             shift and go to state 50
    declaration                    shift and go to state 35
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23

state 30

    (96) declaration -> type_specifier SEMICOLON .

    VOID            reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    CHAR            reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    INT             reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    FLOAT           reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    DOUBLE          reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    STRING          reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    BOOL            reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    LONG_LONG_INT   reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    UNSIGNED_INT    reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    CLASS           reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    STRUCT          reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    STAR            reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    IDENTIFIER      reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    MAIN            reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    $end            reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    SEMICOLON       reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    IF              reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    WHILE           reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    FOR             reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    GOTO            reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    BREAK           reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    CONTINUE        reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    RETURN          reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    PLUS_PLUS       reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    MINUS_MINUS     reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    SIZEOF          reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    AND             reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    PLUS            reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    MINUS           reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    NOT             reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    TILDE           reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    NUMBER          reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    CHARACTER       reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    TRUE            reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    FALSE           reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    NULL            reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    STRING_LITERAL  reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    INPUT           reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    OUTPUT          reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    SQUARE_ROOT     reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    SIN             reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    COS             reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    TAN             reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    STRING_COPY     reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    STRING_REVERSE  reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    STRING_LENGTH   reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    STRING_COMPARE  reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    WRITE           reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    READ            reduce using rule 96 (declaration -> type_specifier SEMICOLON .)
    OPEN            reduce using rule 96 (declaration -> type_specifier SEMICOLON .)


state 31

    (97) declaration -> type_specifier init_declarators_list . SEMICOLON
    (100) init_declarators_list -> init_declarators_list . COMMA init_declarator

    SEMICOLON       shift and go to state 52
    COMMA           shift and go to state 53


state 32

    (99) init_declarators_list -> init_declarator .

    SEMICOLON       reduce using rule 99 (init_declarators_list -> init_declarator .)
    COMMA           reduce using rule 99 (init_declarators_list -> init_declarator .)


state 33

    (230) function_definition -> declarator declaration_list . compound_statement
    (206) declaration_list -> declaration_list . declaration
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (96) declaration -> . type_specifier SEMICOLON
    (97) declaration -> . type_specifier init_declarators_list SEMICOLON
    (98) declaration -> . class_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (152) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (148) class_head -> . CLASS base_clause
    (149) class_head -> . CLASS
    (150) class_head -> . CLASS IDENTIFIER base_clause
    (151) class_head -> . CLASS IDENTIFIER

    LEFT_CURLY_BRACKET shift and go to state 36
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24

    compound_statement             shift and go to state 54
    declaration                    shift and go to state 55
    type_specifier                 shift and go to state 37
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23

state 34

    (231) function_definition -> declarator compound_statement .

    VOID            reduce using rule 231 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 231 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 231 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 231 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 231 (function_definition -> declarator compound_statement .)
    STRING          reduce using rule 231 (function_definition -> declarator compound_statement .)
    BOOL            reduce using rule 231 (function_definition -> declarator compound_statement .)
    LONG_LONG_INT   reduce using rule 231 (function_definition -> declarator compound_statement .)
    UNSIGNED_INT    reduce using rule 231 (function_definition -> declarator compound_statement .)
    CLASS           reduce using rule 231 (function_definition -> declarator compound_statement .)
    STRUCT          reduce using rule 231 (function_definition -> declarator compound_statement .)
    STAR            reduce using rule 231 (function_definition -> declarator compound_statement .)
    IDENTIFIER      reduce using rule 231 (function_definition -> declarator compound_statement .)
    MAIN            reduce using rule 231 (function_definition -> declarator compound_statement .)
    LEFT_PARENTHESIS reduce using rule 231 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 231 (function_definition -> declarator compound_statement .)
    SEMICOLON       reduce using rule 231 (function_definition -> declarator compound_statement .)
    RIGHT_CURLY_BRACKET reduce using rule 231 (function_definition -> declarator compound_statement .)
    PRIVATE         reduce using rule 231 (function_definition -> declarator compound_statement .)
    PUBLIC          reduce using rule 231 (function_definition -> declarator compound_statement .)


state 35

    (207) declaration_list -> declaration .

    LEFT_CURLY_BRACKET reduce using rule 207 (declaration_list -> declaration .)
    VOID            reduce using rule 207 (declaration_list -> declaration .)
    CHAR            reduce using rule 207 (declaration_list -> declaration .)
    INT             reduce using rule 207 (declaration_list -> declaration .)
    FLOAT           reduce using rule 207 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 207 (declaration_list -> declaration .)
    STRING          reduce using rule 207 (declaration_list -> declaration .)
    BOOL            reduce using rule 207 (declaration_list -> declaration .)
    LONG_LONG_INT   reduce using rule 207 (declaration_list -> declaration .)
    UNSIGNED_INT    reduce using rule 207 (declaration_list -> declaration .)
    CLASS           reduce using rule 207 (declaration_list -> declaration .)
    STRUCT          reduce using rule 207 (declaration_list -> declaration .)
    RIGHT_CURLY_BRACKET reduce using rule 207 (declaration_list -> declaration .)
    SEMICOLON       reduce using rule 207 (declaration_list -> declaration .)
    IF              reduce using rule 207 (declaration_list -> declaration .)
    WHILE           reduce using rule 207 (declaration_list -> declaration .)
    FOR             reduce using rule 207 (declaration_list -> declaration .)
    GOTO            reduce using rule 207 (declaration_list -> declaration .)
    BREAK           reduce using rule 207 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 207 (declaration_list -> declaration .)
    RETURN          reduce using rule 207 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 207 (declaration_list -> declaration .)
    PLUS_PLUS       reduce using rule 207 (declaration_list -> declaration .)
    MINUS_MINUS     reduce using rule 207 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 207 (declaration_list -> declaration .)
    AND             reduce using rule 207 (declaration_list -> declaration .)
    STAR            reduce using rule 207 (declaration_list -> declaration .)
    PLUS            reduce using rule 207 (declaration_list -> declaration .)
    MINUS           reduce using rule 207 (declaration_list -> declaration .)
    NOT             reduce using rule 207 (declaration_list -> declaration .)
    TILDE           reduce using rule 207 (declaration_list -> declaration .)
    LEFT_PARENTHESIS reduce using rule 207 (declaration_list -> declaration .)
    NUMBER          reduce using rule 207 (declaration_list -> declaration .)
    DECIMAL_NUMBER  reduce using rule 207 (declaration_list -> declaration .)
    CHARACTER       reduce using rule 207 (declaration_list -> declaration .)
    TRUE            reduce using rule 207 (declaration_list -> declaration .)
    FALSE           reduce using rule 207 (declaration_list -> declaration .)
    NULL            reduce using rule 207 (declaration_list -> declaration .)
    STRING_LITERAL  reduce using rule 207 (declaration_list -> declaration .)
    INPUT           reduce using rule 207 (declaration_list -> declaration .)
    OUTPUT          reduce using rule 207 (declaration_list -> declaration .)
    SQUARE_ROOT     reduce using rule 207 (declaration_list -> declaration .)
    SIN             reduce using rule 207 (declaration_list -> declaration .)
    COS             reduce using rule 207 (declaration_list -> declaration .)
    TAN             reduce using rule 207 (declaration_list -> declaration .)
    STRING_COPY     reduce using rule 207 (declaration_list -> declaration .)
    STRING_REVERSE  reduce using rule 207 (declaration_list -> declaration .)
    STRING_LENGTH   reduce using rule 207 (declaration_list -> declaration .)
    STRING_COMPARE  reduce using rule 207 (declaration_list -> declaration .)
    WRITE           reduce using rule 207 (declaration_list -> declaration .)
    READ            reduce using rule 207 (declaration_list -> declaration .)
    OPEN            reduce using rule 207 (declaration_list -> declaration .)


state 36

    (202) compound_statement -> LEFT_CURLY_BRACKET . declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> LEFT_CURLY_BRACKET . declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> LEFT_CURLY_BRACKET . statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> LEFT_CURLY_BRACKET . RIGHT_CURLY_BRACKET
    (206) declaration_list -> . declaration_list declaration
    (207) declaration_list -> . declaration
    (208) statement_list -> . statement
    (209) statement_list -> . statement_list statement
    (96) declaration -> . type_specifier SEMICOLON
    (97) declaration -> . type_specifier init_declarators_list SEMICOLON
    (98) declaration -> . class_specifier
    (195) statement -> . compound_statement
    (196) statement -> . expression_statement
    (197) statement -> . selection_statement
    (198) statement -> . iteration_statement
    (199) statement -> . jump_statement
    (200) statement -> . labeled_statement
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (152) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (210) expression_statement -> . expression SEMICOLON
    (211) expression_statement -> . SEMICOLON
    (212) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (213) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (214) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (215) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (216) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (217) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (219) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) jump_statement -> . BREAK SEMICOLON
    (221) jump_statement -> . CONTINUE SEMICOLON
    (222) jump_statement -> . RETURN SEMICOLON
    (223) jump_statement -> . RETURN expression SEMICOLON
    (201) labeled_statement -> . IDENTIFIER COLON statement
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (148) class_head -> . CLASS base_clause
    (149) class_head -> . CLASS
    (150) class_head -> . CLASS IDENTIFIER base_clause
    (151) class_head -> . CLASS IDENTIFIER
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_CURLY_BRACKET shift and go to state 58
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    WHILE           shift and go to state 71
    FOR             shift and go to state 72
    GOTO            shift and go to state 73
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 75
    RETURN          shift and go to state 76
    IDENTIFIER      shift and go to state 67
    STRUCT          shift and go to state 24
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    declaration_list               shift and go to state 56
    statement_list                 shift and go to state 57
    declaration                    shift and go to state 35
    statement                      shift and go to state 59
    type_specifier                 shift and go to state 37
    class_specifier                shift and go to state 8
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 37

    (96) declaration -> type_specifier . SEMICOLON
    (97) declaration -> type_specifier . init_declarators_list SEMICOLON
    (99) init_declarators_list -> . init_declarator
    (100) init_declarators_list -> . init_declarators_list COMMA init_declarator
    (101) init_declarator -> . declarator EQUALS initializer
    (102) init_declarator -> . declarator
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    SEMICOLON       shift and go to state 30
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    init_declarators_list          shift and go to state 31
    init_declarator                shift and go to state 32
    declarator                     shift and go to state 126
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 38

    (113) type_specifier -> CLASS IDENTIFIER .
    (150) class_head -> CLASS IDENTIFIER . base_clause
    (151) class_head -> CLASS IDENTIFIER .
    (170) base_clause -> . COLON base_specifier_list

    SEMICOLON       reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    STAR            reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    IDENTIFIER      reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    MAIN            reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 151 (class_head -> CLASS IDENTIFIER .)
    COLON           shift and go to state 40

    base_clause                    shift and go to state 127

state 39

    (148) class_head -> CLASS base_clause .

    LEFT_CURLY_BRACKET reduce using rule 148 (class_head -> CLASS base_clause .)


state 40

    (170) base_clause -> COLON . base_specifier_list
    (171) base_specifier_list -> . base_specifier
    (172) base_specifier_list -> . base_specifier_list COMMA base_specifier
    (173) base_specifier -> . CLASS IDENTIFIER
    (174) base_specifier -> . access_specifier CLASS IDENTIFIER
    (175) base_specifier -> . IDENTIFIER
    (176) base_specifier -> . access_specifier IDENTIFIER
    (177) access_specifier -> . PRIVATE
    (178) access_specifier -> . PUBLIC

    CLASS           shift and go to state 130
    IDENTIFIER      shift and go to state 131
    PRIVATE         shift and go to state 133
    PUBLIC          shift and go to state 134

    base_specifier_list            shift and go to state 128
    base_specifier                 shift and go to state 129
    access_specifier               shift and go to state 132

state 41

    (128) declarator -> pointer direct_declarator .
    (123) direct_declarator -> direct_declarator . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> direct_declarator . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> direct_declarator . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> direct_declarator . LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> direct_declarator . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_CURLY_BRACKET reduce using rule 128 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 128 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 128 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 128 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 128 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 128 (declarator -> pointer direct_declarator .)
    STRING          reduce using rule 128 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 128 (declarator -> pointer direct_declarator .)
    LONG_LONG_INT   reduce using rule 128 (declarator -> pointer direct_declarator .)
    UNSIGNED_INT    reduce using rule 128 (declarator -> pointer direct_declarator .)
    CLASS           reduce using rule 128 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 128 (declarator -> pointer direct_declarator .)
    EQUALS          reduce using rule 128 (declarator -> pointer direct_declarator .)
    SEMICOLON       reduce using rule 128 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 128 (declarator -> pointer direct_declarator .)
    RIGHT_PARENTHESIS reduce using rule 128 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 128 (declarator -> pointer direct_declarator .)
    LEFT_SQUARE_BRACKET shift and go to state 42
    LEFT_PARENTHESIS shift and go to state 43


state 42

    (123) direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET . conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET . RIGHT_SQUARE_BRACKET
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    RIGHT_SQUARE_BRACKET shift and go to state 136
    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    conditional_expression         shift and go to state 135
    logical_or_expression          shift and go to state 80
    logical_and_expression         shift and go to state 87
    or_expression                  shift and go to state 95
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 43

    (125) direct_declarator -> direct_declarator LEFT_PARENTHESIS . parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> direct_declarator LEFT_PARENTHESIS . identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> direct_declarator LEFT_PARENTHESIS . RIGHT_PARENTHESIS
    (130) parameter_list -> . parameter_declaration
    (131) parameter_list -> . parameter_list COMMA parameter_declaration
    (116) identifier_list -> . IDENTIFIER
    (117) identifier_list -> . identifier_list COMMA IDENTIFIER
    (132) parameter_declaration -> . type_specifier declarator
    (133) parameter_declaration -> . type_specifier abstract_declarator
    (134) parameter_declaration -> . type_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_PARENTHESIS shift and go to state 141
    IDENTIFIER      shift and go to state 144
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 146
    STRUCT          shift and go to state 24

    parameter_list                 shift and go to state 140
    identifier_list                shift and go to state 142
    parameter_declaration          shift and go to state 143
    type_specifier                 shift and go to state 145
    struct_specifier               shift and go to state 18

state 44

    (152) class_specifier -> class_head LEFT_CURLY_BRACKET . member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> class_head LEFT_CURLY_BRACKET . RIGHT_CURLY_BRACKET SEMICOLON
    (154) member_list -> . member_access_list
    (155) member_list -> . access_list
    (156) member_list -> . member_list access_list
    (168) member_access_list -> . member_declaration member_access_list
    (169) member_access_list -> . member_declaration
    (166) access_list -> . access_specifier COLON member_access_list
    (167) access_list -> . access_specifier COLON
    (160) member_declaration -> . type_specifier member_declarator_list SEMICOLON
    (161) member_declaration -> . member_declarator_list SEMICOLON
    (162) member_declaration -> . type_specifier SEMICOLON
    (163) member_declaration -> . SEMICOLON
    (164) member_declaration -> . function_definition
    (165) member_declaration -> . class_specifier
    (177) access_specifier -> . PRIVATE
    (178) access_specifier -> . PUBLIC
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (158) member_declarator_list -> . member_declarator
    (159) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (228) function_definition -> . type_specifier declarator declaration_list compound_statement
    (229) function_definition -> . type_specifier declarator compound_statement
    (230) function_definition -> . declarator declaration_list compound_statement
    (231) function_definition -> . declarator compound_statement
    (152) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (157) member_declarator -> . init_declarator
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (148) class_head -> . CLASS base_clause
    (149) class_head -> . CLASS
    (150) class_head -> . CLASS IDENTIFIER base_clause
    (151) class_head -> . CLASS IDENTIFIER
    (101) init_declarator -> . declarator EQUALS initializer
    (102) init_declarator -> . declarator
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    RIGHT_CURLY_BRACKET shift and go to state 148
    SEMICOLON       shift and go to state 149
    PRIVATE         shift and go to state 133
    PUBLIC          shift and go to state 134
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    class_head                     shift and go to state 23
    member_list                    shift and go to state 147
    member_access_list             shift and go to state 150
    access_list                    shift and go to state 151
    member_declaration             shift and go to state 152
    access_specifier               shift and go to state 153
    type_specifier                 shift and go to state 154
    member_declarator_list         shift and go to state 155
    function_definition            shift and go to state 156
    class_specifier                shift and go to state 157
    struct_specifier               shift and go to state 18
    member_declarator              shift and go to state 158
    declarator                     shift and go to state 159
    init_declarator                shift and go to state 160
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 45

    (135) struct_specifier -> STRUCT IDENTIFIER . LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> STRUCT IDENTIFIER . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> STRUCT IDENTIFIER .

    LEFT_CURLY_BRACKET shift and go to state 161
    SEMICOLON       reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    STAR            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    IDENTIFIER      reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    MAIN            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    LEFT_SQUARE_BRACKET reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    COMMA           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    VOID            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    CHAR            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    INT             reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    FLOAT           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    DOUBLE          reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    STRING          reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    BOOL            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    LONG_LONG_INT   reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    UNSIGNED_INT    reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    CLASS           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    STRUCT          reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    COLON           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    SIZEOF          reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    AND             reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    PLUS            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    MINUS           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    NOT             reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    TILDE           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    NUMBER          reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    DECIMAL_NUMBER  reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    CHARACTER       reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    TRUE            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    FALSE           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    NULL            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    STRING_LITERAL  reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    INPUT           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    OUTPUT          reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    SQUARE_ROOT     reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    SIN             reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    COS             reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    TAN             reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    STRING_COPY     reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    STRING_REVERSE  reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    STRING_LENGTH   reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    STRING_COMPARE  reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    WRITE           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    READ            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)
    OPEN            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER .)


state 46

    (136) struct_specifier -> STRUCT LEFT_CURLY_BRACKET . struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> STRUCT LEFT_CURLY_BRACKET . RIGHT_CURLY_BRACKET
    (146) struct_declaration_list -> . struct_declaration
    (147) struct_declaration_list -> . struct_declaration_list struct_declaration
    (145) struct_declaration -> . specifier_list struct_declarator_list SEMICOLON
    (118) specifier_list -> . type_specifier specifier_list
    (119) specifier_list -> . type_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_CURLY_BRACKET shift and go to state 163
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 146
    STRUCT          shift and go to state 24

    struct_declaration_list        shift and go to state 162
    struct_declaration             shift and go to state 164
    specifier_list                 shift and go to state 165
    type_specifier                 shift and go to state 166
    struct_specifier               shift and go to state 18

state 47

    (115) pointer -> STAR pointer .

    IDENTIFIER      reduce using rule 115 (pointer -> STAR pointer .)
    MAIN            reduce using rule 115 (pointer -> STAR pointer .)
    LEFT_PARENTHESIS reduce using rule 115 (pointer -> STAR pointer .)
    LEFT_SQUARE_BRACKET reduce using rule 115 (pointer -> STAR pointer .)
    RIGHT_PARENTHESIS reduce using rule 115 (pointer -> STAR pointer .)
    COMMA           reduce using rule 115 (pointer -> STAR pointer .)


state 48

    (122) direct_declarator -> LEFT_PARENTHESIS declarator . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 167


state 49

    (228) function_definition -> type_specifier declarator declaration_list . compound_statement
    (206) declaration_list -> declaration_list . declaration
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (96) declaration -> . type_specifier SEMICOLON
    (97) declaration -> . type_specifier init_declarators_list SEMICOLON
    (98) declaration -> . class_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (152) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (148) class_head -> . CLASS base_clause
    (149) class_head -> . CLASS
    (150) class_head -> . CLASS IDENTIFIER base_clause
    (151) class_head -> . CLASS IDENTIFIER

    LEFT_CURLY_BRACKET shift and go to state 36
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24

    type_specifier                 shift and go to state 37
    compound_statement             shift and go to state 168
    declaration                    shift and go to state 55
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23

state 50

    (229) function_definition -> type_specifier declarator compound_statement .

    VOID            reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    INT             reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    DOUBLE          reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    STRING          reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    BOOL            reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    LONG_LONG_INT   reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    UNSIGNED_INT    reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    CLASS           reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    STRUCT          reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    STAR            reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    IDENTIFIER      reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    MAIN            reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    LEFT_PARENTHESIS reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    $end            reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    SEMICOLON       reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    RIGHT_CURLY_BRACKET reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    PRIVATE         reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)
    PUBLIC          reduce using rule 229 (function_definition -> type_specifier declarator compound_statement .)


state 51

    (101) init_declarator -> declarator EQUALS . initializer
    (191) initializer -> . LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET
    (192) initializer -> . assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    LEFT_CURLY_BRACKET shift and go to state 170
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    initializer                    shift and go to state 169
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 52

    (97) declaration -> type_specifier init_declarators_list SEMICOLON .

    VOID            reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    CHAR            reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    INT             reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    FLOAT           reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    DOUBLE          reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRING          reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    BOOL            reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    LONG_LONG_INT   reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    UNSIGNED_INT    reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    CLASS           reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRUCT          reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STAR            reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    IDENTIFIER      reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    MAIN            reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    $end            reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    SEMICOLON       reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    IF              reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    WHILE           reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    FOR             reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    GOTO            reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    BREAK           reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    CONTINUE        reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    RETURN          reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    PLUS_PLUS       reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    MINUS_MINUS     reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    SIZEOF          reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    AND             reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    PLUS            reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    MINUS           reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    NOT             reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    TILDE           reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    NUMBER          reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    CHARACTER       reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    TRUE            reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    FALSE           reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    NULL            reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRING_LITERAL  reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    INPUT           reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    OUTPUT          reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    SQUARE_ROOT     reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    SIN             reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    COS             reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    TAN             reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRING_COPY     reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRING_REVERSE  reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRING_LENGTH   reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRING_COMPARE  reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    WRITE           reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    READ            reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    OPEN            reduce using rule 97 (declaration -> type_specifier init_declarators_list SEMICOLON .)


state 53

    (100) init_declarators_list -> init_declarators_list COMMA . init_declarator
    (101) init_declarator -> . declarator EQUALS initializer
    (102) init_declarator -> . declarator
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    init_declarator                shift and go to state 172
    declarator                     shift and go to state 126
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 54

    (230) function_definition -> declarator declaration_list compound_statement .

    VOID            reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    CHAR            reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    STRING          reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    BOOL            reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    LONG_LONG_INT   reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    UNSIGNED_INT    reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    CLASS           reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    STAR            reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    MAIN            reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    LEFT_PARENTHESIS reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    SEMICOLON       reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    RIGHT_CURLY_BRACKET reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    PRIVATE         reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)
    PUBLIC          reduce using rule 230 (function_definition -> declarator declaration_list compound_statement .)


state 55

    (206) declaration_list -> declaration_list declaration .

    LEFT_CURLY_BRACKET reduce using rule 206 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 206 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 206 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 206 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 206 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 206 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 206 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 206 (declaration_list -> declaration_list declaration .)
    LONG_LONG_INT   reduce using rule 206 (declaration_list -> declaration_list declaration .)
    UNSIGNED_INT    reduce using rule 206 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 206 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 206 (declaration_list -> declaration_list declaration .)
    RIGHT_CURLY_BRACKET reduce using rule 206 (declaration_list -> declaration_list declaration .)
    SEMICOLON       reduce using rule 206 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 206 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 206 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 206 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 206 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 206 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 206 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 206 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 206 (declaration_list -> declaration_list declaration .)
    PLUS_PLUS       reduce using rule 206 (declaration_list -> declaration_list declaration .)
    MINUS_MINUS     reduce using rule 206 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 206 (declaration_list -> declaration_list declaration .)
    AND             reduce using rule 206 (declaration_list -> declaration_list declaration .)
    STAR            reduce using rule 206 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 206 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 206 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 206 (declaration_list -> declaration_list declaration .)
    TILDE           reduce using rule 206 (declaration_list -> declaration_list declaration .)
    LEFT_PARENTHESIS reduce using rule 206 (declaration_list -> declaration_list declaration .)
    NUMBER          reduce using rule 206 (declaration_list -> declaration_list declaration .)
    DECIMAL_NUMBER  reduce using rule 206 (declaration_list -> declaration_list declaration .)
    CHARACTER       reduce using rule 206 (declaration_list -> declaration_list declaration .)
    TRUE            reduce using rule 206 (declaration_list -> declaration_list declaration .)
    FALSE           reduce using rule 206 (declaration_list -> declaration_list declaration .)
    NULL            reduce using rule 206 (declaration_list -> declaration_list declaration .)
    STRING_LITERAL  reduce using rule 206 (declaration_list -> declaration_list declaration .)
    INPUT           reduce using rule 206 (declaration_list -> declaration_list declaration .)
    OUTPUT          reduce using rule 206 (declaration_list -> declaration_list declaration .)
    SQUARE_ROOT     reduce using rule 206 (declaration_list -> declaration_list declaration .)
    SIN             reduce using rule 206 (declaration_list -> declaration_list declaration .)
    COS             reduce using rule 206 (declaration_list -> declaration_list declaration .)
    TAN             reduce using rule 206 (declaration_list -> declaration_list declaration .)
    STRING_COPY     reduce using rule 206 (declaration_list -> declaration_list declaration .)
    STRING_REVERSE  reduce using rule 206 (declaration_list -> declaration_list declaration .)
    STRING_LENGTH   reduce using rule 206 (declaration_list -> declaration_list declaration .)
    STRING_COMPARE  reduce using rule 206 (declaration_list -> declaration_list declaration .)
    WRITE           reduce using rule 206 (declaration_list -> declaration_list declaration .)
    READ            reduce using rule 206 (declaration_list -> declaration_list declaration .)
    OPEN            reduce using rule 206 (declaration_list -> declaration_list declaration .)


state 56

    (202) compound_statement -> LEFT_CURLY_BRACKET declaration_list . statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> LEFT_CURLY_BRACKET declaration_list . RIGHT_CURLY_BRACKET
    (206) declaration_list -> declaration_list . declaration
    (208) statement_list -> . statement
    (209) statement_list -> . statement_list statement
    (96) declaration -> . type_specifier SEMICOLON
    (97) declaration -> . type_specifier init_declarators_list SEMICOLON
    (98) declaration -> . class_specifier
    (195) statement -> . compound_statement
    (196) statement -> . expression_statement
    (197) statement -> . selection_statement
    (198) statement -> . iteration_statement
    (199) statement -> . jump_statement
    (200) statement -> . labeled_statement
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (152) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (210) expression_statement -> . expression SEMICOLON
    (211) expression_statement -> . SEMICOLON
    (212) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (213) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (214) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (215) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (216) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (217) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (219) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) jump_statement -> . BREAK SEMICOLON
    (221) jump_statement -> . CONTINUE SEMICOLON
    (222) jump_statement -> . RETURN SEMICOLON
    (223) jump_statement -> . RETURN expression SEMICOLON
    (201) labeled_statement -> . IDENTIFIER COLON statement
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (148) class_head -> . CLASS base_clause
    (149) class_head -> . CLASS
    (150) class_head -> . CLASS IDENTIFIER base_clause
    (151) class_head -> . CLASS IDENTIFIER
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_CURLY_BRACKET shift and go to state 174
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    WHILE           shift and go to state 71
    FOR             shift and go to state 72
    GOTO            shift and go to state 73
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 75
    RETURN          shift and go to state 76
    IDENTIFIER      shift and go to state 67
    STRUCT          shift and go to state 24
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    statement_list                 shift and go to state 173
    declaration                    shift and go to state 55
    statement                      shift and go to state 59
    type_specifier                 shift and go to state 37
    class_specifier                shift and go to state 8
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 57

    (204) compound_statement -> LEFT_CURLY_BRACKET statement_list . RIGHT_CURLY_BRACKET
    (209) statement_list -> statement_list . statement
    (195) statement -> . compound_statement
    (196) statement -> . expression_statement
    (197) statement -> . selection_statement
    (198) statement -> . iteration_statement
    (199) statement -> . jump_statement
    (200) statement -> . labeled_statement
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (210) expression_statement -> . expression SEMICOLON
    (211) expression_statement -> . SEMICOLON
    (212) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (213) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (214) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (215) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (216) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (217) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (219) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) jump_statement -> . BREAK SEMICOLON
    (221) jump_statement -> . CONTINUE SEMICOLON
    (222) jump_statement -> . RETURN SEMICOLON
    (223) jump_statement -> . RETURN expression SEMICOLON
    (201) labeled_statement -> . IDENTIFIER COLON statement
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_CURLY_BRACKET shift and go to state 175
    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    WHILE           shift and go to state 71
    FOR             shift and go to state 72
    GOTO            shift and go to state 73
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 75
    RETURN          shift and go to state 76
    IDENTIFIER      shift and go to state 67
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    statement                      shift and go to state 176
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 58

    (205) compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .

    VOID            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PRIVATE         reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PUBLIC          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    GOTO            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)


state 59

    (208) statement_list -> statement .

    RIGHT_CURLY_BRACKET reduce using rule 208 (statement_list -> statement .)
    LEFT_CURLY_BRACKET reduce using rule 208 (statement_list -> statement .)
    SEMICOLON       reduce using rule 208 (statement_list -> statement .)
    IF              reduce using rule 208 (statement_list -> statement .)
    WHILE           reduce using rule 208 (statement_list -> statement .)
    FOR             reduce using rule 208 (statement_list -> statement .)
    GOTO            reduce using rule 208 (statement_list -> statement .)
    BREAK           reduce using rule 208 (statement_list -> statement .)
    CONTINUE        reduce using rule 208 (statement_list -> statement .)
    RETURN          reduce using rule 208 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 208 (statement_list -> statement .)
    PLUS_PLUS       reduce using rule 208 (statement_list -> statement .)
    MINUS_MINUS     reduce using rule 208 (statement_list -> statement .)
    SIZEOF          reduce using rule 208 (statement_list -> statement .)
    AND             reduce using rule 208 (statement_list -> statement .)
    STAR            reduce using rule 208 (statement_list -> statement .)
    PLUS            reduce using rule 208 (statement_list -> statement .)
    MINUS           reduce using rule 208 (statement_list -> statement .)
    NOT             reduce using rule 208 (statement_list -> statement .)
    TILDE           reduce using rule 208 (statement_list -> statement .)
    LEFT_PARENTHESIS reduce using rule 208 (statement_list -> statement .)
    NUMBER          reduce using rule 208 (statement_list -> statement .)
    DECIMAL_NUMBER  reduce using rule 208 (statement_list -> statement .)
    CHARACTER       reduce using rule 208 (statement_list -> statement .)
    TRUE            reduce using rule 208 (statement_list -> statement .)
    FALSE           reduce using rule 208 (statement_list -> statement .)
    NULL            reduce using rule 208 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 208 (statement_list -> statement .)
    INPUT           reduce using rule 208 (statement_list -> statement .)
    OUTPUT          reduce using rule 208 (statement_list -> statement .)
    SQUARE_ROOT     reduce using rule 208 (statement_list -> statement .)
    SIN             reduce using rule 208 (statement_list -> statement .)
    COS             reduce using rule 208 (statement_list -> statement .)
    TAN             reduce using rule 208 (statement_list -> statement .)
    STRING_COPY     reduce using rule 208 (statement_list -> statement .)
    STRING_REVERSE  reduce using rule 208 (statement_list -> statement .)
    STRING_LENGTH   reduce using rule 208 (statement_list -> statement .)
    STRING_COMPARE  reduce using rule 208 (statement_list -> statement .)
    WRITE           reduce using rule 208 (statement_list -> statement .)
    READ            reduce using rule 208 (statement_list -> statement .)
    OPEN            reduce using rule 208 (statement_list -> statement .)


state 60

    (211) expression_statement -> SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 211 (expression_statement -> SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 211 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 211 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 211 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 211 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 211 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 211 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 211 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 211 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 211 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 211 (expression_statement -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 211 (expression_statement -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 211 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 211 (expression_statement -> SEMICOLON .)
    AND             reduce using rule 211 (expression_statement -> SEMICOLON .)
    STAR            reduce using rule 211 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 211 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 211 (expression_statement -> SEMICOLON .)
    NOT             reduce using rule 211 (expression_statement -> SEMICOLON .)
    TILDE           reduce using rule 211 (expression_statement -> SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 211 (expression_statement -> SEMICOLON .)
    NUMBER          reduce using rule 211 (expression_statement -> SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 211 (expression_statement -> SEMICOLON .)
    CHARACTER       reduce using rule 211 (expression_statement -> SEMICOLON .)
    TRUE            reduce using rule 211 (expression_statement -> SEMICOLON .)
    FALSE           reduce using rule 211 (expression_statement -> SEMICOLON .)
    NULL            reduce using rule 211 (expression_statement -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 211 (expression_statement -> SEMICOLON .)
    INPUT           reduce using rule 211 (expression_statement -> SEMICOLON .)
    OUTPUT          reduce using rule 211 (expression_statement -> SEMICOLON .)
    SQUARE_ROOT     reduce using rule 211 (expression_statement -> SEMICOLON .)
    SIN             reduce using rule 211 (expression_statement -> SEMICOLON .)
    COS             reduce using rule 211 (expression_statement -> SEMICOLON .)
    TAN             reduce using rule 211 (expression_statement -> SEMICOLON .)
    STRING_COPY     reduce using rule 211 (expression_statement -> SEMICOLON .)
    STRING_REVERSE  reduce using rule 211 (expression_statement -> SEMICOLON .)
    STRING_LENGTH   reduce using rule 211 (expression_statement -> SEMICOLON .)
    STRING_COMPARE  reduce using rule 211 (expression_statement -> SEMICOLON .)
    WRITE           reduce using rule 211 (expression_statement -> SEMICOLON .)
    READ            reduce using rule 211 (expression_statement -> SEMICOLON .)
    OPEN            reduce using rule 211 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 211 (expression_statement -> SEMICOLON .)
    RIGHT_PARENTHESIS reduce using rule 211 (expression_statement -> SEMICOLON .)


state 61

    (195) statement -> compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 195 (statement -> compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 195 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 195 (statement -> compound_statement .)
    IF              reduce using rule 195 (statement -> compound_statement .)
    WHILE           reduce using rule 195 (statement -> compound_statement .)
    FOR             reduce using rule 195 (statement -> compound_statement .)
    GOTO            reduce using rule 195 (statement -> compound_statement .)
    BREAK           reduce using rule 195 (statement -> compound_statement .)
    CONTINUE        reduce using rule 195 (statement -> compound_statement .)
    RETURN          reduce using rule 195 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 195 (statement -> compound_statement .)
    PLUS_PLUS       reduce using rule 195 (statement -> compound_statement .)
    MINUS_MINUS     reduce using rule 195 (statement -> compound_statement .)
    SIZEOF          reduce using rule 195 (statement -> compound_statement .)
    AND             reduce using rule 195 (statement -> compound_statement .)
    STAR            reduce using rule 195 (statement -> compound_statement .)
    PLUS            reduce using rule 195 (statement -> compound_statement .)
    MINUS           reduce using rule 195 (statement -> compound_statement .)
    NOT             reduce using rule 195 (statement -> compound_statement .)
    TILDE           reduce using rule 195 (statement -> compound_statement .)
    LEFT_PARENTHESIS reduce using rule 195 (statement -> compound_statement .)
    NUMBER          reduce using rule 195 (statement -> compound_statement .)
    DECIMAL_NUMBER  reduce using rule 195 (statement -> compound_statement .)
    CHARACTER       reduce using rule 195 (statement -> compound_statement .)
    TRUE            reduce using rule 195 (statement -> compound_statement .)
    FALSE           reduce using rule 195 (statement -> compound_statement .)
    NULL            reduce using rule 195 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 195 (statement -> compound_statement .)
    INPUT           reduce using rule 195 (statement -> compound_statement .)
    OUTPUT          reduce using rule 195 (statement -> compound_statement .)
    SQUARE_ROOT     reduce using rule 195 (statement -> compound_statement .)
    SIN             reduce using rule 195 (statement -> compound_statement .)
    COS             reduce using rule 195 (statement -> compound_statement .)
    TAN             reduce using rule 195 (statement -> compound_statement .)
    STRING_COPY     reduce using rule 195 (statement -> compound_statement .)
    STRING_REVERSE  reduce using rule 195 (statement -> compound_statement .)
    STRING_LENGTH   reduce using rule 195 (statement -> compound_statement .)
    STRING_COMPARE  reduce using rule 195 (statement -> compound_statement .)
    WRITE           reduce using rule 195 (statement -> compound_statement .)
    READ            reduce using rule 195 (statement -> compound_statement .)
    OPEN            reduce using rule 195 (statement -> compound_statement .)
    ELSE            reduce using rule 195 (statement -> compound_statement .)


state 62

    (196) statement -> expression_statement .

    RIGHT_CURLY_BRACKET reduce using rule 196 (statement -> expression_statement .)
    LEFT_CURLY_BRACKET reduce using rule 196 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 196 (statement -> expression_statement .)
    IF              reduce using rule 196 (statement -> expression_statement .)
    WHILE           reduce using rule 196 (statement -> expression_statement .)
    FOR             reduce using rule 196 (statement -> expression_statement .)
    GOTO            reduce using rule 196 (statement -> expression_statement .)
    BREAK           reduce using rule 196 (statement -> expression_statement .)
    CONTINUE        reduce using rule 196 (statement -> expression_statement .)
    RETURN          reduce using rule 196 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 196 (statement -> expression_statement .)
    PLUS_PLUS       reduce using rule 196 (statement -> expression_statement .)
    MINUS_MINUS     reduce using rule 196 (statement -> expression_statement .)
    SIZEOF          reduce using rule 196 (statement -> expression_statement .)
    AND             reduce using rule 196 (statement -> expression_statement .)
    STAR            reduce using rule 196 (statement -> expression_statement .)
    PLUS            reduce using rule 196 (statement -> expression_statement .)
    MINUS           reduce using rule 196 (statement -> expression_statement .)
    NOT             reduce using rule 196 (statement -> expression_statement .)
    TILDE           reduce using rule 196 (statement -> expression_statement .)
    LEFT_PARENTHESIS reduce using rule 196 (statement -> expression_statement .)
    NUMBER          reduce using rule 196 (statement -> expression_statement .)
    DECIMAL_NUMBER  reduce using rule 196 (statement -> expression_statement .)
    CHARACTER       reduce using rule 196 (statement -> expression_statement .)
    TRUE            reduce using rule 196 (statement -> expression_statement .)
    FALSE           reduce using rule 196 (statement -> expression_statement .)
    NULL            reduce using rule 196 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 196 (statement -> expression_statement .)
    INPUT           reduce using rule 196 (statement -> expression_statement .)
    OUTPUT          reduce using rule 196 (statement -> expression_statement .)
    SQUARE_ROOT     reduce using rule 196 (statement -> expression_statement .)
    SIN             reduce using rule 196 (statement -> expression_statement .)
    COS             reduce using rule 196 (statement -> expression_statement .)
    TAN             reduce using rule 196 (statement -> expression_statement .)
    STRING_COPY     reduce using rule 196 (statement -> expression_statement .)
    STRING_REVERSE  reduce using rule 196 (statement -> expression_statement .)
    STRING_LENGTH   reduce using rule 196 (statement -> expression_statement .)
    STRING_COMPARE  reduce using rule 196 (statement -> expression_statement .)
    WRITE           reduce using rule 196 (statement -> expression_statement .)
    READ            reduce using rule 196 (statement -> expression_statement .)
    OPEN            reduce using rule 196 (statement -> expression_statement .)
    ELSE            reduce using rule 196 (statement -> expression_statement .)


state 63

    (197) statement -> selection_statement .

    RIGHT_CURLY_BRACKET reduce using rule 197 (statement -> selection_statement .)
    LEFT_CURLY_BRACKET reduce using rule 197 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 197 (statement -> selection_statement .)
    IF              reduce using rule 197 (statement -> selection_statement .)
    WHILE           reduce using rule 197 (statement -> selection_statement .)
    FOR             reduce using rule 197 (statement -> selection_statement .)
    GOTO            reduce using rule 197 (statement -> selection_statement .)
    BREAK           reduce using rule 197 (statement -> selection_statement .)
    CONTINUE        reduce using rule 197 (statement -> selection_statement .)
    RETURN          reduce using rule 197 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 197 (statement -> selection_statement .)
    PLUS_PLUS       reduce using rule 197 (statement -> selection_statement .)
    MINUS_MINUS     reduce using rule 197 (statement -> selection_statement .)
    SIZEOF          reduce using rule 197 (statement -> selection_statement .)
    AND             reduce using rule 197 (statement -> selection_statement .)
    STAR            reduce using rule 197 (statement -> selection_statement .)
    PLUS            reduce using rule 197 (statement -> selection_statement .)
    MINUS           reduce using rule 197 (statement -> selection_statement .)
    NOT             reduce using rule 197 (statement -> selection_statement .)
    TILDE           reduce using rule 197 (statement -> selection_statement .)
    LEFT_PARENTHESIS reduce using rule 197 (statement -> selection_statement .)
    NUMBER          reduce using rule 197 (statement -> selection_statement .)
    DECIMAL_NUMBER  reduce using rule 197 (statement -> selection_statement .)
    CHARACTER       reduce using rule 197 (statement -> selection_statement .)
    TRUE            reduce using rule 197 (statement -> selection_statement .)
    FALSE           reduce using rule 197 (statement -> selection_statement .)
    NULL            reduce using rule 197 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 197 (statement -> selection_statement .)
    INPUT           reduce using rule 197 (statement -> selection_statement .)
    OUTPUT          reduce using rule 197 (statement -> selection_statement .)
    SQUARE_ROOT     reduce using rule 197 (statement -> selection_statement .)
    SIN             reduce using rule 197 (statement -> selection_statement .)
    COS             reduce using rule 197 (statement -> selection_statement .)
    TAN             reduce using rule 197 (statement -> selection_statement .)
    STRING_COPY     reduce using rule 197 (statement -> selection_statement .)
    STRING_REVERSE  reduce using rule 197 (statement -> selection_statement .)
    STRING_LENGTH   reduce using rule 197 (statement -> selection_statement .)
    STRING_COMPARE  reduce using rule 197 (statement -> selection_statement .)
    WRITE           reduce using rule 197 (statement -> selection_statement .)
    READ            reduce using rule 197 (statement -> selection_statement .)
    OPEN            reduce using rule 197 (statement -> selection_statement .)
    ELSE            reduce using rule 197 (statement -> selection_statement .)


state 64

    (198) statement -> iteration_statement .

    RIGHT_CURLY_BRACKET reduce using rule 198 (statement -> iteration_statement .)
    LEFT_CURLY_BRACKET reduce using rule 198 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 198 (statement -> iteration_statement .)
    IF              reduce using rule 198 (statement -> iteration_statement .)
    WHILE           reduce using rule 198 (statement -> iteration_statement .)
    FOR             reduce using rule 198 (statement -> iteration_statement .)
    GOTO            reduce using rule 198 (statement -> iteration_statement .)
    BREAK           reduce using rule 198 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 198 (statement -> iteration_statement .)
    RETURN          reduce using rule 198 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 198 (statement -> iteration_statement .)
    PLUS_PLUS       reduce using rule 198 (statement -> iteration_statement .)
    MINUS_MINUS     reduce using rule 198 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 198 (statement -> iteration_statement .)
    AND             reduce using rule 198 (statement -> iteration_statement .)
    STAR            reduce using rule 198 (statement -> iteration_statement .)
    PLUS            reduce using rule 198 (statement -> iteration_statement .)
    MINUS           reduce using rule 198 (statement -> iteration_statement .)
    NOT             reduce using rule 198 (statement -> iteration_statement .)
    TILDE           reduce using rule 198 (statement -> iteration_statement .)
    LEFT_PARENTHESIS reduce using rule 198 (statement -> iteration_statement .)
    NUMBER          reduce using rule 198 (statement -> iteration_statement .)
    DECIMAL_NUMBER  reduce using rule 198 (statement -> iteration_statement .)
    CHARACTER       reduce using rule 198 (statement -> iteration_statement .)
    TRUE            reduce using rule 198 (statement -> iteration_statement .)
    FALSE           reduce using rule 198 (statement -> iteration_statement .)
    NULL            reduce using rule 198 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 198 (statement -> iteration_statement .)
    INPUT           reduce using rule 198 (statement -> iteration_statement .)
    OUTPUT          reduce using rule 198 (statement -> iteration_statement .)
    SQUARE_ROOT     reduce using rule 198 (statement -> iteration_statement .)
    SIN             reduce using rule 198 (statement -> iteration_statement .)
    COS             reduce using rule 198 (statement -> iteration_statement .)
    TAN             reduce using rule 198 (statement -> iteration_statement .)
    STRING_COPY     reduce using rule 198 (statement -> iteration_statement .)
    STRING_REVERSE  reduce using rule 198 (statement -> iteration_statement .)
    STRING_LENGTH   reduce using rule 198 (statement -> iteration_statement .)
    STRING_COMPARE  reduce using rule 198 (statement -> iteration_statement .)
    WRITE           reduce using rule 198 (statement -> iteration_statement .)
    READ            reduce using rule 198 (statement -> iteration_statement .)
    OPEN            reduce using rule 198 (statement -> iteration_statement .)
    ELSE            reduce using rule 198 (statement -> iteration_statement .)


state 65

    (199) statement -> jump_statement .

    RIGHT_CURLY_BRACKET reduce using rule 199 (statement -> jump_statement .)
    LEFT_CURLY_BRACKET reduce using rule 199 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 199 (statement -> jump_statement .)
    IF              reduce using rule 199 (statement -> jump_statement .)
    WHILE           reduce using rule 199 (statement -> jump_statement .)
    FOR             reduce using rule 199 (statement -> jump_statement .)
    GOTO            reduce using rule 199 (statement -> jump_statement .)
    BREAK           reduce using rule 199 (statement -> jump_statement .)
    CONTINUE        reduce using rule 199 (statement -> jump_statement .)
    RETURN          reduce using rule 199 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 199 (statement -> jump_statement .)
    PLUS_PLUS       reduce using rule 199 (statement -> jump_statement .)
    MINUS_MINUS     reduce using rule 199 (statement -> jump_statement .)
    SIZEOF          reduce using rule 199 (statement -> jump_statement .)
    AND             reduce using rule 199 (statement -> jump_statement .)
    STAR            reduce using rule 199 (statement -> jump_statement .)
    PLUS            reduce using rule 199 (statement -> jump_statement .)
    MINUS           reduce using rule 199 (statement -> jump_statement .)
    NOT             reduce using rule 199 (statement -> jump_statement .)
    TILDE           reduce using rule 199 (statement -> jump_statement .)
    LEFT_PARENTHESIS reduce using rule 199 (statement -> jump_statement .)
    NUMBER          reduce using rule 199 (statement -> jump_statement .)
    DECIMAL_NUMBER  reduce using rule 199 (statement -> jump_statement .)
    CHARACTER       reduce using rule 199 (statement -> jump_statement .)
    TRUE            reduce using rule 199 (statement -> jump_statement .)
    FALSE           reduce using rule 199 (statement -> jump_statement .)
    NULL            reduce using rule 199 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 199 (statement -> jump_statement .)
    INPUT           reduce using rule 199 (statement -> jump_statement .)
    OUTPUT          reduce using rule 199 (statement -> jump_statement .)
    SQUARE_ROOT     reduce using rule 199 (statement -> jump_statement .)
    SIN             reduce using rule 199 (statement -> jump_statement .)
    COS             reduce using rule 199 (statement -> jump_statement .)
    TAN             reduce using rule 199 (statement -> jump_statement .)
    STRING_COPY     reduce using rule 199 (statement -> jump_statement .)
    STRING_REVERSE  reduce using rule 199 (statement -> jump_statement .)
    STRING_LENGTH   reduce using rule 199 (statement -> jump_statement .)
    STRING_COMPARE  reduce using rule 199 (statement -> jump_statement .)
    WRITE           reduce using rule 199 (statement -> jump_statement .)
    READ            reduce using rule 199 (statement -> jump_statement .)
    OPEN            reduce using rule 199 (statement -> jump_statement .)
    ELSE            reduce using rule 199 (statement -> jump_statement .)


state 66

    (200) statement -> labeled_statement .

    RIGHT_CURLY_BRACKET reduce using rule 200 (statement -> labeled_statement .)
    LEFT_CURLY_BRACKET reduce using rule 200 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 200 (statement -> labeled_statement .)
    IF              reduce using rule 200 (statement -> labeled_statement .)
    WHILE           reduce using rule 200 (statement -> labeled_statement .)
    FOR             reduce using rule 200 (statement -> labeled_statement .)
    GOTO            reduce using rule 200 (statement -> labeled_statement .)
    BREAK           reduce using rule 200 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 200 (statement -> labeled_statement .)
    RETURN          reduce using rule 200 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 200 (statement -> labeled_statement .)
    PLUS_PLUS       reduce using rule 200 (statement -> labeled_statement .)
    MINUS_MINUS     reduce using rule 200 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 200 (statement -> labeled_statement .)
    AND             reduce using rule 200 (statement -> labeled_statement .)
    STAR            reduce using rule 200 (statement -> labeled_statement .)
    PLUS            reduce using rule 200 (statement -> labeled_statement .)
    MINUS           reduce using rule 200 (statement -> labeled_statement .)
    NOT             reduce using rule 200 (statement -> labeled_statement .)
    TILDE           reduce using rule 200 (statement -> labeled_statement .)
    LEFT_PARENTHESIS reduce using rule 200 (statement -> labeled_statement .)
    NUMBER          reduce using rule 200 (statement -> labeled_statement .)
    DECIMAL_NUMBER  reduce using rule 200 (statement -> labeled_statement .)
    CHARACTER       reduce using rule 200 (statement -> labeled_statement .)
    TRUE            reduce using rule 200 (statement -> labeled_statement .)
    FALSE           reduce using rule 200 (statement -> labeled_statement .)
    NULL            reduce using rule 200 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 200 (statement -> labeled_statement .)
    INPUT           reduce using rule 200 (statement -> labeled_statement .)
    OUTPUT          reduce using rule 200 (statement -> labeled_statement .)
    SQUARE_ROOT     reduce using rule 200 (statement -> labeled_statement .)
    SIN             reduce using rule 200 (statement -> labeled_statement .)
    COS             reduce using rule 200 (statement -> labeled_statement .)
    TAN             reduce using rule 200 (statement -> labeled_statement .)
    STRING_COPY     reduce using rule 200 (statement -> labeled_statement .)
    STRING_REVERSE  reduce using rule 200 (statement -> labeled_statement .)
    STRING_LENGTH   reduce using rule 200 (statement -> labeled_statement .)
    STRING_COMPARE  reduce using rule 200 (statement -> labeled_statement .)
    WRITE           reduce using rule 200 (statement -> labeled_statement .)
    READ            reduce using rule 200 (statement -> labeled_statement .)
    OPEN            reduce using rule 200 (statement -> labeled_statement .)
    ELSE            reduce using rule 200 (statement -> labeled_statement .)


state 67

    (201) labeled_statement -> IDENTIFIER . COLON statement
    (15) primary_expression -> IDENTIFIER .

    COLON           shift and go to state 177
    LEFT_SQUARE_BRACKET reduce using rule 15 (primary_expression -> IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 15 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 15 (primary_expression -> IDENTIFIER .)
    ARROW           reduce using rule 15 (primary_expression -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 15 (primary_expression -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 15 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 15 (primary_expression -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 15 (primary_expression -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 15 (primary_expression -> IDENTIFIER .)
    MODULUS_EQUALS  reduce using rule 15 (primary_expression -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 15 (primary_expression -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 15 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 15 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 15 (primary_expression -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 15 (primary_expression -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 15 (primary_expression -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 15 (primary_expression -> IDENTIFIER .)
    STAR            reduce using rule 15 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 15 (primary_expression -> IDENTIFIER .)
    MODULUS         reduce using rule 15 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 15 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 15 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 15 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 15 (primary_expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 15 (primary_expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 15 (primary_expression -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 15 (primary_expression -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 15 (primary_expression -> IDENTIFIER .)
    EQUALS_EQUALS   reduce using rule 15 (primary_expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 15 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 15 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 15 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 15 (primary_expression -> IDENTIFIER .)
    AND_AND         reduce using rule 15 (primary_expression -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 15 (primary_expression -> IDENTIFIER .)
    OR_OR           reduce using rule 15 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 15 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 15 (primary_expression -> IDENTIFIER .)


state 68

    (210) expression_statement -> expression . SEMICOLON
    (95) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 178
    COMMA           shift and go to state 179


state 69

    (212) selection_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (213) selection_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement

    LEFT_PARENTHESIS shift and go to state 180


state 70

    (18) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (50) cast_expression -> LEFT_PARENTHESIS . type_specifier RIGHT_PARENTHESIS cast_expression
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 146
    STRUCT          shift and go to state 24
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    expression                     shift and go to state 181
    type_specifier                 shift and go to state 182
    cast_expression                shift and go to state 85
    assignment_expression          shift and go to state 77
    struct_specifier               shift and go to state 18
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 71

    (214) iteration_statement -> WHILE . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement

    LEFT_PARENTHESIS shift and go to state 183


state 72

    (215) iteration_statement -> FOR . LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (216) iteration_statement -> FOR . LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (217) iteration_statement -> FOR . LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> FOR . LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement

    LEFT_PARENTHESIS shift and go to state 184


state 73

    (219) jump_statement -> GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 185


state 74

    (220) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 186


state 75

    (221) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 187


state 76

    (222) jump_statement -> RETURN . SEMICOLON
    (223) jump_statement -> RETURN . expression SEMICOLON
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    SEMICOLON       shift and go to state 188
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    expression                     shift and go to state 189
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 77

    (94) expression -> assignment_expression .

    SEMICOLON       reduce using rule 94 (expression -> assignment_expression .)
    COMMA           reduce using rule 94 (expression -> assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 94 (expression -> assignment_expression .)
    COLON           reduce using rule 94 (expression -> assignment_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 94 (expression -> assignment_expression .)


state 78

    (81) assignment_expression -> conditional_expression .

    SEMICOLON       reduce using rule 81 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 81 (assignment_expression -> conditional_expression .)
    RIGHT_PARENTHESIS reduce using rule 81 (assignment_expression -> conditional_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 81 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 81 (assignment_expression -> conditional_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 81 (assignment_expression -> conditional_expression .)


state 79

    (82) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (49) cast_expression -> unary_expression .
    (83) assignment_operator -> . EQUALS
    (84) assignment_operator -> . DIVIDE_EQUALS
    (85) assignment_operator -> . MULTIPLY_EQUALS
    (86) assignment_operator -> . MODULUS_EQUALS
    (87) assignment_operator -> . PLUS_EQUALS
    (88) assignment_operator -> . MINUS_EQUALS
    (89) assignment_operator -> . LEFT_SHIFT_EQUALS
    (90) assignment_operator -> . RIGHT_SHIFT_EQUALS
    (91) assignment_operator -> . AND_EQUALS
    (92) assignment_operator -> . OR_EQUALS
    (93) assignment_operator -> . XOR_EQUALS

    STAR            reduce using rule 49 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 49 (cast_expression -> unary_expression .)
    MODULUS         reduce using rule 49 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 49 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 49 (cast_expression -> unary_expression .)
    LEFT_SHIFT      reduce using rule 49 (cast_expression -> unary_expression .)
    RIGHT_SHIFT     reduce using rule 49 (cast_expression -> unary_expression .)
    LESS_THAN       reduce using rule 49 (cast_expression -> unary_expression .)
    GREATER_THAN    reduce using rule 49 (cast_expression -> unary_expression .)
    LESS_THAN_EQUALS reduce using rule 49 (cast_expression -> unary_expression .)
    GREATER_THAN_EQUALS reduce using rule 49 (cast_expression -> unary_expression .)
    EQUALS_EQUALS   reduce using rule 49 (cast_expression -> unary_expression .)
    NOT_EQUALS      reduce using rule 49 (cast_expression -> unary_expression .)
    AND             reduce using rule 49 (cast_expression -> unary_expression .)
    XOR             reduce using rule 49 (cast_expression -> unary_expression .)
    OR              reduce using rule 49 (cast_expression -> unary_expression .)
    AND_AND         reduce using rule 49 (cast_expression -> unary_expression .)
    QUESTION_MARK   reduce using rule 49 (cast_expression -> unary_expression .)
    OR_OR           reduce using rule 49 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 49 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 49 (cast_expression -> unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 49 (cast_expression -> unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 49 (cast_expression -> unary_expression .)
    COLON           reduce using rule 49 (cast_expression -> unary_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 49 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 191
    DIVIDE_EQUALS   shift and go to state 192
    MULTIPLY_EQUALS shift and go to state 193
    MODULUS_EQUALS  shift and go to state 194
    PLUS_EQUALS     shift and go to state 195
    MINUS_EQUALS    shift and go to state 196
    LEFT_SHIFT_EQUALS shift and go to state 197
    RIGHT_SHIFT_EQUALS shift and go to state 198
    AND_EQUALS      shift and go to state 199
    OR_EQUALS       shift and go to state 200
    XOR_EQUALS      shift and go to state 201

    assignment_operator            shift and go to state 190

state 80

    (79) conditional_expression -> logical_or_expression .
    (80) conditional_expression -> logical_or_expression . QUESTION_MARK expression COLON conditional_expression
    (78) logical_or_expression -> logical_or_expression . OR_OR logical_and_expression

    SEMICOLON       reduce using rule 79 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 79 (conditional_expression -> logical_or_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 79 (conditional_expression -> logical_or_expression .)
    RIGHT_PARENTHESIS reduce using rule 79 (conditional_expression -> logical_or_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 79 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 79 (conditional_expression -> logical_or_expression .)
    QUESTION_MARK   shift and go to state 202
    OR_OR           shift and go to state 203


state 81

    (37) unary_expression -> postfix_expression .
    (28) postfix_expression -> postfix_expression . LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> postfix_expression . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> postfix_expression . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (32) postfix_expression -> postfix_expression . ARROW IDENTIFIER
    (33) postfix_expression -> postfix_expression . PLUS_PLUS
    (34) postfix_expression -> postfix_expression . MINUS_MINUS

    EQUALS          reduce using rule 37 (unary_expression -> postfix_expression .)
    DIVIDE_EQUALS   reduce using rule 37 (unary_expression -> postfix_expression .)
    MULTIPLY_EQUALS reduce using rule 37 (unary_expression -> postfix_expression .)
    MODULUS_EQUALS  reduce using rule 37 (unary_expression -> postfix_expression .)
    PLUS_EQUALS     reduce using rule 37 (unary_expression -> postfix_expression .)
    MINUS_EQUALS    reduce using rule 37 (unary_expression -> postfix_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 37 (unary_expression -> postfix_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 37 (unary_expression -> postfix_expression .)
    AND_EQUALS      reduce using rule 37 (unary_expression -> postfix_expression .)
    OR_EQUALS       reduce using rule 37 (unary_expression -> postfix_expression .)
    XOR_EQUALS      reduce using rule 37 (unary_expression -> postfix_expression .)
    STAR            reduce using rule 37 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 37 (unary_expression -> postfix_expression .)
    MODULUS         reduce using rule 37 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 37 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 37 (unary_expression -> postfix_expression .)
    LEFT_SHIFT      reduce using rule 37 (unary_expression -> postfix_expression .)
    RIGHT_SHIFT     reduce using rule 37 (unary_expression -> postfix_expression .)
    LESS_THAN       reduce using rule 37 (unary_expression -> postfix_expression .)
    GREATER_THAN    reduce using rule 37 (unary_expression -> postfix_expression .)
    LESS_THAN_EQUALS reduce using rule 37 (unary_expression -> postfix_expression .)
    GREATER_THAN_EQUALS reduce using rule 37 (unary_expression -> postfix_expression .)
    EQUALS_EQUALS   reduce using rule 37 (unary_expression -> postfix_expression .)
    NOT_EQUALS      reduce using rule 37 (unary_expression -> postfix_expression .)
    AND             reduce using rule 37 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 37 (unary_expression -> postfix_expression .)
    OR              reduce using rule 37 (unary_expression -> postfix_expression .)
    AND_AND         reduce using rule 37 (unary_expression -> postfix_expression .)
    QUESTION_MARK   reduce using rule 37 (unary_expression -> postfix_expression .)
    OR_OR           reduce using rule 37 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 37 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 37 (unary_expression -> postfix_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 37 (unary_expression -> postfix_expression .)
    RIGHT_PARENTHESIS reduce using rule 37 (unary_expression -> postfix_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 37 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 37 (unary_expression -> postfix_expression .)
    LEFT_SQUARE_BRACKET shift and go to state 204
    LEFT_PARENTHESIS shift and go to state 205
    DOT             shift and go to state 206
    ARROW           shift and go to state 207
    PLUS_PLUS       shift and go to state 208
    MINUS_MINUS     shift and go to state 209


state 82

    (38) unary_expression -> PLUS_PLUS . unary_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 211
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    unary_expression               shift and go to state 210
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 83

    (39) unary_expression -> MINUS_MINUS . unary_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 211
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    unary_expression               shift and go to state 212
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 84

    (40) unary_expression -> unary_operator . cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 213
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 85

    (51) multiplicative_expression -> cast_expression .

    STAR            reduce using rule 51 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 51 (multiplicative_expression -> cast_expression .)
    MODULUS         reduce using rule 51 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 51 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 51 (multiplicative_expression -> cast_expression .)
    LEFT_SHIFT      reduce using rule 51 (multiplicative_expression -> cast_expression .)
    RIGHT_SHIFT     reduce using rule 51 (multiplicative_expression -> cast_expression .)
    LESS_THAN       reduce using rule 51 (multiplicative_expression -> cast_expression .)
    GREATER_THAN    reduce using rule 51 (multiplicative_expression -> cast_expression .)
    LESS_THAN_EQUALS reduce using rule 51 (multiplicative_expression -> cast_expression .)
    GREATER_THAN_EQUALS reduce using rule 51 (multiplicative_expression -> cast_expression .)
    EQUALS_EQUALS   reduce using rule 51 (multiplicative_expression -> cast_expression .)
    NOT_EQUALS      reduce using rule 51 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 51 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 51 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 51 (multiplicative_expression -> cast_expression .)
    AND_AND         reduce using rule 51 (multiplicative_expression -> cast_expression .)
    QUESTION_MARK   reduce using rule 51 (multiplicative_expression -> cast_expression .)
    OR_OR           reduce using rule 51 (multiplicative_expression -> cast_expression .)
    SEMICOLON       reduce using rule 51 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 51 (multiplicative_expression -> cast_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 51 (multiplicative_expression -> cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 51 (multiplicative_expression -> cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 51 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 51 (multiplicative_expression -> cast_expression .)


state 86

    (41) unary_expression -> SIZEOF . unary_expression
    (42) unary_expression -> SIZEOF . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 215
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    unary_expression               shift and go to state 214
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 87

    (77) logical_or_expression -> logical_and_expression .
    (76) logical_and_expression -> logical_and_expression . AND_AND or_expression

    QUESTION_MARK   reduce using rule 77 (logical_or_expression -> logical_and_expression .)
    OR_OR           reduce using rule 77 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 77 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 77 (logical_or_expression -> logical_and_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 77 (logical_or_expression -> logical_and_expression .)
    RIGHT_PARENTHESIS reduce using rule 77 (logical_or_expression -> logical_and_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 77 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 77 (logical_or_expression -> logical_and_expression .)
    AND_AND         shift and go to state 216


state 88

    (27) postfix_expression -> primary_expression .

    LEFT_SQUARE_BRACKET reduce using rule 27 (postfix_expression -> primary_expression .)
    LEFT_PARENTHESIS reduce using rule 27 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 27 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 27 (postfix_expression -> primary_expression .)
    PLUS_PLUS       reduce using rule 27 (postfix_expression -> primary_expression .)
    MINUS_MINUS     reduce using rule 27 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 27 (postfix_expression -> primary_expression .)
    DIVIDE_EQUALS   reduce using rule 27 (postfix_expression -> primary_expression .)
    MULTIPLY_EQUALS reduce using rule 27 (postfix_expression -> primary_expression .)
    MODULUS_EQUALS  reduce using rule 27 (postfix_expression -> primary_expression .)
    PLUS_EQUALS     reduce using rule 27 (postfix_expression -> primary_expression .)
    MINUS_EQUALS    reduce using rule 27 (postfix_expression -> primary_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 27 (postfix_expression -> primary_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 27 (postfix_expression -> primary_expression .)
    AND_EQUALS      reduce using rule 27 (postfix_expression -> primary_expression .)
    OR_EQUALS       reduce using rule 27 (postfix_expression -> primary_expression .)
    XOR_EQUALS      reduce using rule 27 (postfix_expression -> primary_expression .)
    STAR            reduce using rule 27 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 27 (postfix_expression -> primary_expression .)
    MODULUS         reduce using rule 27 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 27 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 27 (postfix_expression -> primary_expression .)
    LEFT_SHIFT      reduce using rule 27 (postfix_expression -> primary_expression .)
    RIGHT_SHIFT     reduce using rule 27 (postfix_expression -> primary_expression .)
    LESS_THAN       reduce using rule 27 (postfix_expression -> primary_expression .)
    GREATER_THAN    reduce using rule 27 (postfix_expression -> primary_expression .)
    LESS_THAN_EQUALS reduce using rule 27 (postfix_expression -> primary_expression .)
    GREATER_THAN_EQUALS reduce using rule 27 (postfix_expression -> primary_expression .)
    EQUALS_EQUALS   reduce using rule 27 (postfix_expression -> primary_expression .)
    NOT_EQUALS      reduce using rule 27 (postfix_expression -> primary_expression .)
    AND             reduce using rule 27 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 27 (postfix_expression -> primary_expression .)
    OR              reduce using rule 27 (postfix_expression -> primary_expression .)
    AND_AND         reduce using rule 27 (postfix_expression -> primary_expression .)
    QUESTION_MARK   reduce using rule 27 (postfix_expression -> primary_expression .)
    OR_OR           reduce using rule 27 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 27 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 27 (postfix_expression -> primary_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 27 (postfix_expression -> primary_expression .)
    RIGHT_PARENTHESIS reduce using rule 27 (postfix_expression -> primary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 27 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 27 (postfix_expression -> primary_expression .)


state 89

    (43) unary_operator -> AND .

    LEFT_PARENTHESIS reduce using rule 43 (unary_operator -> AND .)
    PLUS_PLUS       reduce using rule 43 (unary_operator -> AND .)
    MINUS_MINUS     reduce using rule 43 (unary_operator -> AND .)
    SIZEOF          reduce using rule 43 (unary_operator -> AND .)
    AND             reduce using rule 43 (unary_operator -> AND .)
    STAR            reduce using rule 43 (unary_operator -> AND .)
    PLUS            reduce using rule 43 (unary_operator -> AND .)
    MINUS           reduce using rule 43 (unary_operator -> AND .)
    NOT             reduce using rule 43 (unary_operator -> AND .)
    TILDE           reduce using rule 43 (unary_operator -> AND .)
    IDENTIFIER      reduce using rule 43 (unary_operator -> AND .)
    NUMBER          reduce using rule 43 (unary_operator -> AND .)
    DECIMAL_NUMBER  reduce using rule 43 (unary_operator -> AND .)
    CHARACTER       reduce using rule 43 (unary_operator -> AND .)
    TRUE            reduce using rule 43 (unary_operator -> AND .)
    FALSE           reduce using rule 43 (unary_operator -> AND .)
    NULL            reduce using rule 43 (unary_operator -> AND .)
    STRING_LITERAL  reduce using rule 43 (unary_operator -> AND .)
    INPUT           reduce using rule 43 (unary_operator -> AND .)
    OUTPUT          reduce using rule 43 (unary_operator -> AND .)
    SQUARE_ROOT     reduce using rule 43 (unary_operator -> AND .)
    SIN             reduce using rule 43 (unary_operator -> AND .)
    COS             reduce using rule 43 (unary_operator -> AND .)
    TAN             reduce using rule 43 (unary_operator -> AND .)
    STRING_COPY     reduce using rule 43 (unary_operator -> AND .)
    STRING_REVERSE  reduce using rule 43 (unary_operator -> AND .)
    STRING_LENGTH   reduce using rule 43 (unary_operator -> AND .)
    STRING_COMPARE  reduce using rule 43 (unary_operator -> AND .)
    WRITE           reduce using rule 43 (unary_operator -> AND .)
    READ            reduce using rule 43 (unary_operator -> AND .)
    OPEN            reduce using rule 43 (unary_operator -> AND .)


state 90

    (44) unary_operator -> STAR .

    LEFT_PARENTHESIS reduce using rule 44 (unary_operator -> STAR .)
    PLUS_PLUS       reduce using rule 44 (unary_operator -> STAR .)
    MINUS_MINUS     reduce using rule 44 (unary_operator -> STAR .)
    SIZEOF          reduce using rule 44 (unary_operator -> STAR .)
    AND             reduce using rule 44 (unary_operator -> STAR .)
    STAR            reduce using rule 44 (unary_operator -> STAR .)
    PLUS            reduce using rule 44 (unary_operator -> STAR .)
    MINUS           reduce using rule 44 (unary_operator -> STAR .)
    NOT             reduce using rule 44 (unary_operator -> STAR .)
    TILDE           reduce using rule 44 (unary_operator -> STAR .)
    IDENTIFIER      reduce using rule 44 (unary_operator -> STAR .)
    NUMBER          reduce using rule 44 (unary_operator -> STAR .)
    DECIMAL_NUMBER  reduce using rule 44 (unary_operator -> STAR .)
    CHARACTER       reduce using rule 44 (unary_operator -> STAR .)
    TRUE            reduce using rule 44 (unary_operator -> STAR .)
    FALSE           reduce using rule 44 (unary_operator -> STAR .)
    NULL            reduce using rule 44 (unary_operator -> STAR .)
    STRING_LITERAL  reduce using rule 44 (unary_operator -> STAR .)
    INPUT           reduce using rule 44 (unary_operator -> STAR .)
    OUTPUT          reduce using rule 44 (unary_operator -> STAR .)
    SQUARE_ROOT     reduce using rule 44 (unary_operator -> STAR .)
    SIN             reduce using rule 44 (unary_operator -> STAR .)
    COS             reduce using rule 44 (unary_operator -> STAR .)
    TAN             reduce using rule 44 (unary_operator -> STAR .)
    STRING_COPY     reduce using rule 44 (unary_operator -> STAR .)
    STRING_REVERSE  reduce using rule 44 (unary_operator -> STAR .)
    STRING_LENGTH   reduce using rule 44 (unary_operator -> STAR .)
    STRING_COMPARE  reduce using rule 44 (unary_operator -> STAR .)
    WRITE           reduce using rule 44 (unary_operator -> STAR .)
    READ            reduce using rule 44 (unary_operator -> STAR .)
    OPEN            reduce using rule 44 (unary_operator -> STAR .)


state 91

    (45) unary_operator -> PLUS .

    LEFT_PARENTHESIS reduce using rule 45 (unary_operator -> PLUS .)
    PLUS_PLUS       reduce using rule 45 (unary_operator -> PLUS .)
    MINUS_MINUS     reduce using rule 45 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 45 (unary_operator -> PLUS .)
    AND             reduce using rule 45 (unary_operator -> PLUS .)
    STAR            reduce using rule 45 (unary_operator -> PLUS .)
    PLUS            reduce using rule 45 (unary_operator -> PLUS .)
    MINUS           reduce using rule 45 (unary_operator -> PLUS .)
    NOT             reduce using rule 45 (unary_operator -> PLUS .)
    TILDE           reduce using rule 45 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 45 (unary_operator -> PLUS .)
    NUMBER          reduce using rule 45 (unary_operator -> PLUS .)
    DECIMAL_NUMBER  reduce using rule 45 (unary_operator -> PLUS .)
    CHARACTER       reduce using rule 45 (unary_operator -> PLUS .)
    TRUE            reduce using rule 45 (unary_operator -> PLUS .)
    FALSE           reduce using rule 45 (unary_operator -> PLUS .)
    NULL            reduce using rule 45 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 45 (unary_operator -> PLUS .)
    INPUT           reduce using rule 45 (unary_operator -> PLUS .)
    OUTPUT          reduce using rule 45 (unary_operator -> PLUS .)
    SQUARE_ROOT     reduce using rule 45 (unary_operator -> PLUS .)
    SIN             reduce using rule 45 (unary_operator -> PLUS .)
    COS             reduce using rule 45 (unary_operator -> PLUS .)
    TAN             reduce using rule 45 (unary_operator -> PLUS .)
    STRING_COPY     reduce using rule 45 (unary_operator -> PLUS .)
    STRING_REVERSE  reduce using rule 45 (unary_operator -> PLUS .)
    STRING_LENGTH   reduce using rule 45 (unary_operator -> PLUS .)
    STRING_COMPARE  reduce using rule 45 (unary_operator -> PLUS .)
    WRITE           reduce using rule 45 (unary_operator -> PLUS .)
    READ            reduce using rule 45 (unary_operator -> PLUS .)
    OPEN            reduce using rule 45 (unary_operator -> PLUS .)


state 92

    (46) unary_operator -> MINUS .

    LEFT_PARENTHESIS reduce using rule 46 (unary_operator -> MINUS .)
    PLUS_PLUS       reduce using rule 46 (unary_operator -> MINUS .)
    MINUS_MINUS     reduce using rule 46 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 46 (unary_operator -> MINUS .)
    AND             reduce using rule 46 (unary_operator -> MINUS .)
    STAR            reduce using rule 46 (unary_operator -> MINUS .)
    PLUS            reduce using rule 46 (unary_operator -> MINUS .)
    MINUS           reduce using rule 46 (unary_operator -> MINUS .)
    NOT             reduce using rule 46 (unary_operator -> MINUS .)
    TILDE           reduce using rule 46 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 46 (unary_operator -> MINUS .)
    NUMBER          reduce using rule 46 (unary_operator -> MINUS .)
    DECIMAL_NUMBER  reduce using rule 46 (unary_operator -> MINUS .)
    CHARACTER       reduce using rule 46 (unary_operator -> MINUS .)
    TRUE            reduce using rule 46 (unary_operator -> MINUS .)
    FALSE           reduce using rule 46 (unary_operator -> MINUS .)
    NULL            reduce using rule 46 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 46 (unary_operator -> MINUS .)
    INPUT           reduce using rule 46 (unary_operator -> MINUS .)
    OUTPUT          reduce using rule 46 (unary_operator -> MINUS .)
    SQUARE_ROOT     reduce using rule 46 (unary_operator -> MINUS .)
    SIN             reduce using rule 46 (unary_operator -> MINUS .)
    COS             reduce using rule 46 (unary_operator -> MINUS .)
    TAN             reduce using rule 46 (unary_operator -> MINUS .)
    STRING_COPY     reduce using rule 46 (unary_operator -> MINUS .)
    STRING_REVERSE  reduce using rule 46 (unary_operator -> MINUS .)
    STRING_LENGTH   reduce using rule 46 (unary_operator -> MINUS .)
    STRING_COMPARE  reduce using rule 46 (unary_operator -> MINUS .)
    WRITE           reduce using rule 46 (unary_operator -> MINUS .)
    READ            reduce using rule 46 (unary_operator -> MINUS .)
    OPEN            reduce using rule 46 (unary_operator -> MINUS .)


state 93

    (47) unary_operator -> NOT .

    LEFT_PARENTHESIS reduce using rule 47 (unary_operator -> NOT .)
    PLUS_PLUS       reduce using rule 47 (unary_operator -> NOT .)
    MINUS_MINUS     reduce using rule 47 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 47 (unary_operator -> NOT .)
    AND             reduce using rule 47 (unary_operator -> NOT .)
    STAR            reduce using rule 47 (unary_operator -> NOT .)
    PLUS            reduce using rule 47 (unary_operator -> NOT .)
    MINUS           reduce using rule 47 (unary_operator -> NOT .)
    NOT             reduce using rule 47 (unary_operator -> NOT .)
    TILDE           reduce using rule 47 (unary_operator -> NOT .)
    IDENTIFIER      reduce using rule 47 (unary_operator -> NOT .)
    NUMBER          reduce using rule 47 (unary_operator -> NOT .)
    DECIMAL_NUMBER  reduce using rule 47 (unary_operator -> NOT .)
    CHARACTER       reduce using rule 47 (unary_operator -> NOT .)
    TRUE            reduce using rule 47 (unary_operator -> NOT .)
    FALSE           reduce using rule 47 (unary_operator -> NOT .)
    NULL            reduce using rule 47 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 47 (unary_operator -> NOT .)
    INPUT           reduce using rule 47 (unary_operator -> NOT .)
    OUTPUT          reduce using rule 47 (unary_operator -> NOT .)
    SQUARE_ROOT     reduce using rule 47 (unary_operator -> NOT .)
    SIN             reduce using rule 47 (unary_operator -> NOT .)
    COS             reduce using rule 47 (unary_operator -> NOT .)
    TAN             reduce using rule 47 (unary_operator -> NOT .)
    STRING_COPY     reduce using rule 47 (unary_operator -> NOT .)
    STRING_REVERSE  reduce using rule 47 (unary_operator -> NOT .)
    STRING_LENGTH   reduce using rule 47 (unary_operator -> NOT .)
    STRING_COMPARE  reduce using rule 47 (unary_operator -> NOT .)
    WRITE           reduce using rule 47 (unary_operator -> NOT .)
    READ            reduce using rule 47 (unary_operator -> NOT .)
    OPEN            reduce using rule 47 (unary_operator -> NOT .)


state 94

    (48) unary_operator -> TILDE .

    LEFT_PARENTHESIS reduce using rule 48 (unary_operator -> TILDE .)
    PLUS_PLUS       reduce using rule 48 (unary_operator -> TILDE .)
    MINUS_MINUS     reduce using rule 48 (unary_operator -> TILDE .)
    SIZEOF          reduce using rule 48 (unary_operator -> TILDE .)
    AND             reduce using rule 48 (unary_operator -> TILDE .)
    STAR            reduce using rule 48 (unary_operator -> TILDE .)
    PLUS            reduce using rule 48 (unary_operator -> TILDE .)
    MINUS           reduce using rule 48 (unary_operator -> TILDE .)
    NOT             reduce using rule 48 (unary_operator -> TILDE .)
    TILDE           reduce using rule 48 (unary_operator -> TILDE .)
    IDENTIFIER      reduce using rule 48 (unary_operator -> TILDE .)
    NUMBER          reduce using rule 48 (unary_operator -> TILDE .)
    DECIMAL_NUMBER  reduce using rule 48 (unary_operator -> TILDE .)
    CHARACTER       reduce using rule 48 (unary_operator -> TILDE .)
    TRUE            reduce using rule 48 (unary_operator -> TILDE .)
    FALSE           reduce using rule 48 (unary_operator -> TILDE .)
    NULL            reduce using rule 48 (unary_operator -> TILDE .)
    STRING_LITERAL  reduce using rule 48 (unary_operator -> TILDE .)
    INPUT           reduce using rule 48 (unary_operator -> TILDE .)
    OUTPUT          reduce using rule 48 (unary_operator -> TILDE .)
    SQUARE_ROOT     reduce using rule 48 (unary_operator -> TILDE .)
    SIN             reduce using rule 48 (unary_operator -> TILDE .)
    COS             reduce using rule 48 (unary_operator -> TILDE .)
    TAN             reduce using rule 48 (unary_operator -> TILDE .)
    STRING_COPY     reduce using rule 48 (unary_operator -> TILDE .)
    STRING_REVERSE  reduce using rule 48 (unary_operator -> TILDE .)
    STRING_LENGTH   reduce using rule 48 (unary_operator -> TILDE .)
    STRING_COMPARE  reduce using rule 48 (unary_operator -> TILDE .)
    WRITE           reduce using rule 48 (unary_operator -> TILDE .)
    READ            reduce using rule 48 (unary_operator -> TILDE .)
    OPEN            reduce using rule 48 (unary_operator -> TILDE .)


state 95

    (75) logical_and_expression -> or_expression .
    (74) or_expression -> or_expression . OR xor_expression

    AND_AND         reduce using rule 75 (logical_and_expression -> or_expression .)
    QUESTION_MARK   reduce using rule 75 (logical_and_expression -> or_expression .)
    OR_OR           reduce using rule 75 (logical_and_expression -> or_expression .)
    SEMICOLON       reduce using rule 75 (logical_and_expression -> or_expression .)
    COMMA           reduce using rule 75 (logical_and_expression -> or_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 75 (logical_and_expression -> or_expression .)
    RIGHT_PARENTHESIS reduce using rule 75 (logical_and_expression -> or_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 75 (logical_and_expression -> or_expression .)
    COLON           reduce using rule 75 (logical_and_expression -> or_expression .)
    OR              shift and go to state 217


state 96

    (16) primary_expression -> constant .

    LEFT_SQUARE_BRACKET reduce using rule 16 (primary_expression -> constant .)
    LEFT_PARENTHESIS reduce using rule 16 (primary_expression -> constant .)
    DOT             reduce using rule 16 (primary_expression -> constant .)
    ARROW           reduce using rule 16 (primary_expression -> constant .)
    PLUS_PLUS       reduce using rule 16 (primary_expression -> constant .)
    MINUS_MINUS     reduce using rule 16 (primary_expression -> constant .)
    EQUALS          reduce using rule 16 (primary_expression -> constant .)
    DIVIDE_EQUALS   reduce using rule 16 (primary_expression -> constant .)
    MULTIPLY_EQUALS reduce using rule 16 (primary_expression -> constant .)
    MODULUS_EQUALS  reduce using rule 16 (primary_expression -> constant .)
    PLUS_EQUALS     reduce using rule 16 (primary_expression -> constant .)
    MINUS_EQUALS    reduce using rule 16 (primary_expression -> constant .)
    LEFT_SHIFT_EQUALS reduce using rule 16 (primary_expression -> constant .)
    RIGHT_SHIFT_EQUALS reduce using rule 16 (primary_expression -> constant .)
    AND_EQUALS      reduce using rule 16 (primary_expression -> constant .)
    OR_EQUALS       reduce using rule 16 (primary_expression -> constant .)
    XOR_EQUALS      reduce using rule 16 (primary_expression -> constant .)
    STAR            reduce using rule 16 (primary_expression -> constant .)
    DIVIDE          reduce using rule 16 (primary_expression -> constant .)
    MODULUS         reduce using rule 16 (primary_expression -> constant .)
    PLUS            reduce using rule 16 (primary_expression -> constant .)
    MINUS           reduce using rule 16 (primary_expression -> constant .)
    LEFT_SHIFT      reduce using rule 16 (primary_expression -> constant .)
    RIGHT_SHIFT     reduce using rule 16 (primary_expression -> constant .)
    LESS_THAN       reduce using rule 16 (primary_expression -> constant .)
    GREATER_THAN    reduce using rule 16 (primary_expression -> constant .)
    LESS_THAN_EQUALS reduce using rule 16 (primary_expression -> constant .)
    GREATER_THAN_EQUALS reduce using rule 16 (primary_expression -> constant .)
    EQUALS_EQUALS   reduce using rule 16 (primary_expression -> constant .)
    NOT_EQUALS      reduce using rule 16 (primary_expression -> constant .)
    AND             reduce using rule 16 (primary_expression -> constant .)
    XOR             reduce using rule 16 (primary_expression -> constant .)
    OR              reduce using rule 16 (primary_expression -> constant .)
    AND_AND         reduce using rule 16 (primary_expression -> constant .)
    QUESTION_MARK   reduce using rule 16 (primary_expression -> constant .)
    OR_OR           reduce using rule 16 (primary_expression -> constant .)
    SEMICOLON       reduce using rule 16 (primary_expression -> constant .)
    COMMA           reduce using rule 16 (primary_expression -> constant .)
    RIGHT_SQUARE_BRACKET reduce using rule 16 (primary_expression -> constant .)
    RIGHT_PARENTHESIS reduce using rule 16 (primary_expression -> constant .)
    RIGHT_CURLY_BRACKET reduce using rule 16 (primary_expression -> constant .)
    COLON           reduce using rule 16 (primary_expression -> constant .)


state 97

    (17) primary_expression -> string .

    LEFT_SQUARE_BRACKET reduce using rule 17 (primary_expression -> string .)
    LEFT_PARENTHESIS reduce using rule 17 (primary_expression -> string .)
    DOT             reduce using rule 17 (primary_expression -> string .)
    ARROW           reduce using rule 17 (primary_expression -> string .)
    PLUS_PLUS       reduce using rule 17 (primary_expression -> string .)
    MINUS_MINUS     reduce using rule 17 (primary_expression -> string .)
    EQUALS          reduce using rule 17 (primary_expression -> string .)
    DIVIDE_EQUALS   reduce using rule 17 (primary_expression -> string .)
    MULTIPLY_EQUALS reduce using rule 17 (primary_expression -> string .)
    MODULUS_EQUALS  reduce using rule 17 (primary_expression -> string .)
    PLUS_EQUALS     reduce using rule 17 (primary_expression -> string .)
    MINUS_EQUALS    reduce using rule 17 (primary_expression -> string .)
    LEFT_SHIFT_EQUALS reduce using rule 17 (primary_expression -> string .)
    RIGHT_SHIFT_EQUALS reduce using rule 17 (primary_expression -> string .)
    AND_EQUALS      reduce using rule 17 (primary_expression -> string .)
    OR_EQUALS       reduce using rule 17 (primary_expression -> string .)
    XOR_EQUALS      reduce using rule 17 (primary_expression -> string .)
    STAR            reduce using rule 17 (primary_expression -> string .)
    DIVIDE          reduce using rule 17 (primary_expression -> string .)
    MODULUS         reduce using rule 17 (primary_expression -> string .)
    PLUS            reduce using rule 17 (primary_expression -> string .)
    MINUS           reduce using rule 17 (primary_expression -> string .)
    LEFT_SHIFT      reduce using rule 17 (primary_expression -> string .)
    RIGHT_SHIFT     reduce using rule 17 (primary_expression -> string .)
    LESS_THAN       reduce using rule 17 (primary_expression -> string .)
    GREATER_THAN    reduce using rule 17 (primary_expression -> string .)
    LESS_THAN_EQUALS reduce using rule 17 (primary_expression -> string .)
    GREATER_THAN_EQUALS reduce using rule 17 (primary_expression -> string .)
    EQUALS_EQUALS   reduce using rule 17 (primary_expression -> string .)
    NOT_EQUALS      reduce using rule 17 (primary_expression -> string .)
    AND             reduce using rule 17 (primary_expression -> string .)
    XOR             reduce using rule 17 (primary_expression -> string .)
    OR              reduce using rule 17 (primary_expression -> string .)
    AND_AND         reduce using rule 17 (primary_expression -> string .)
    QUESTION_MARK   reduce using rule 17 (primary_expression -> string .)
    OR_OR           reduce using rule 17 (primary_expression -> string .)
    SEMICOLON       reduce using rule 17 (primary_expression -> string .)
    COMMA           reduce using rule 17 (primary_expression -> string .)
    RIGHT_SQUARE_BRACKET reduce using rule 17 (primary_expression -> string .)
    RIGHT_PARENTHESIS reduce using rule 17 (primary_expression -> string .)
    RIGHT_CURLY_BRACKET reduce using rule 17 (primary_expression -> string .)
    COLON           reduce using rule 17 (primary_expression -> string .)


state 98

    (19) primary_expression -> predefined_functions .

    LEFT_SQUARE_BRACKET reduce using rule 19 (primary_expression -> predefined_functions .)
    LEFT_PARENTHESIS reduce using rule 19 (primary_expression -> predefined_functions .)
    DOT             reduce using rule 19 (primary_expression -> predefined_functions .)
    ARROW           reduce using rule 19 (primary_expression -> predefined_functions .)
    PLUS_PLUS       reduce using rule 19 (primary_expression -> predefined_functions .)
    MINUS_MINUS     reduce using rule 19 (primary_expression -> predefined_functions .)
    EQUALS          reduce using rule 19 (primary_expression -> predefined_functions .)
    DIVIDE_EQUALS   reduce using rule 19 (primary_expression -> predefined_functions .)
    MULTIPLY_EQUALS reduce using rule 19 (primary_expression -> predefined_functions .)
    MODULUS_EQUALS  reduce using rule 19 (primary_expression -> predefined_functions .)
    PLUS_EQUALS     reduce using rule 19 (primary_expression -> predefined_functions .)
    MINUS_EQUALS    reduce using rule 19 (primary_expression -> predefined_functions .)
    LEFT_SHIFT_EQUALS reduce using rule 19 (primary_expression -> predefined_functions .)
    RIGHT_SHIFT_EQUALS reduce using rule 19 (primary_expression -> predefined_functions .)
    AND_EQUALS      reduce using rule 19 (primary_expression -> predefined_functions .)
    OR_EQUALS       reduce using rule 19 (primary_expression -> predefined_functions .)
    XOR_EQUALS      reduce using rule 19 (primary_expression -> predefined_functions .)
    STAR            reduce using rule 19 (primary_expression -> predefined_functions .)
    DIVIDE          reduce using rule 19 (primary_expression -> predefined_functions .)
    MODULUS         reduce using rule 19 (primary_expression -> predefined_functions .)
    PLUS            reduce using rule 19 (primary_expression -> predefined_functions .)
    MINUS           reduce using rule 19 (primary_expression -> predefined_functions .)
    LEFT_SHIFT      reduce using rule 19 (primary_expression -> predefined_functions .)
    RIGHT_SHIFT     reduce using rule 19 (primary_expression -> predefined_functions .)
    LESS_THAN       reduce using rule 19 (primary_expression -> predefined_functions .)
    GREATER_THAN    reduce using rule 19 (primary_expression -> predefined_functions .)
    LESS_THAN_EQUALS reduce using rule 19 (primary_expression -> predefined_functions .)
    GREATER_THAN_EQUALS reduce using rule 19 (primary_expression -> predefined_functions .)
    EQUALS_EQUALS   reduce using rule 19 (primary_expression -> predefined_functions .)
    NOT_EQUALS      reduce using rule 19 (primary_expression -> predefined_functions .)
    AND             reduce using rule 19 (primary_expression -> predefined_functions .)
    XOR             reduce using rule 19 (primary_expression -> predefined_functions .)
    OR              reduce using rule 19 (primary_expression -> predefined_functions .)
    AND_AND         reduce using rule 19 (primary_expression -> predefined_functions .)
    QUESTION_MARK   reduce using rule 19 (primary_expression -> predefined_functions .)
    OR_OR           reduce using rule 19 (primary_expression -> predefined_functions .)
    SEMICOLON       reduce using rule 19 (primary_expression -> predefined_functions .)
    COMMA           reduce using rule 19 (primary_expression -> predefined_functions .)
    RIGHT_SQUARE_BRACKET reduce using rule 19 (primary_expression -> predefined_functions .)
    RIGHT_PARENTHESIS reduce using rule 19 (primary_expression -> predefined_functions .)
    RIGHT_CURLY_BRACKET reduce using rule 19 (primary_expression -> predefined_functions .)
    COLON           reduce using rule 19 (primary_expression -> predefined_functions .)


state 99

    (73) or_expression -> xor_expression .
    (72) xor_expression -> xor_expression . XOR and_expression

    OR              reduce using rule 73 (or_expression -> xor_expression .)
    AND_AND         reduce using rule 73 (or_expression -> xor_expression .)
    QUESTION_MARK   reduce using rule 73 (or_expression -> xor_expression .)
    OR_OR           reduce using rule 73 (or_expression -> xor_expression .)
    SEMICOLON       reduce using rule 73 (or_expression -> xor_expression .)
    COMMA           reduce using rule 73 (or_expression -> xor_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 73 (or_expression -> xor_expression .)
    RIGHT_PARENTHESIS reduce using rule 73 (or_expression -> xor_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 73 (or_expression -> xor_expression .)
    COLON           reduce using rule 73 (or_expression -> xor_expression .)
    XOR             shift and go to state 218


state 100

    (20) constant -> NUMBER .

    LEFT_SQUARE_BRACKET reduce using rule 20 (constant -> NUMBER .)
    LEFT_PARENTHESIS reduce using rule 20 (constant -> NUMBER .)
    DOT             reduce using rule 20 (constant -> NUMBER .)
    ARROW           reduce using rule 20 (constant -> NUMBER .)
    PLUS_PLUS       reduce using rule 20 (constant -> NUMBER .)
    MINUS_MINUS     reduce using rule 20 (constant -> NUMBER .)
    EQUALS          reduce using rule 20 (constant -> NUMBER .)
    DIVIDE_EQUALS   reduce using rule 20 (constant -> NUMBER .)
    MULTIPLY_EQUALS reduce using rule 20 (constant -> NUMBER .)
    MODULUS_EQUALS  reduce using rule 20 (constant -> NUMBER .)
    PLUS_EQUALS     reduce using rule 20 (constant -> NUMBER .)
    MINUS_EQUALS    reduce using rule 20 (constant -> NUMBER .)
    LEFT_SHIFT_EQUALS reduce using rule 20 (constant -> NUMBER .)
    RIGHT_SHIFT_EQUALS reduce using rule 20 (constant -> NUMBER .)
    AND_EQUALS      reduce using rule 20 (constant -> NUMBER .)
    OR_EQUALS       reduce using rule 20 (constant -> NUMBER .)
    XOR_EQUALS      reduce using rule 20 (constant -> NUMBER .)
    STAR            reduce using rule 20 (constant -> NUMBER .)
    DIVIDE          reduce using rule 20 (constant -> NUMBER .)
    MODULUS         reduce using rule 20 (constant -> NUMBER .)
    PLUS            reduce using rule 20 (constant -> NUMBER .)
    MINUS           reduce using rule 20 (constant -> NUMBER .)
    LEFT_SHIFT      reduce using rule 20 (constant -> NUMBER .)
    RIGHT_SHIFT     reduce using rule 20 (constant -> NUMBER .)
    LESS_THAN       reduce using rule 20 (constant -> NUMBER .)
    GREATER_THAN    reduce using rule 20 (constant -> NUMBER .)
    LESS_THAN_EQUALS reduce using rule 20 (constant -> NUMBER .)
    GREATER_THAN_EQUALS reduce using rule 20 (constant -> NUMBER .)
    EQUALS_EQUALS   reduce using rule 20 (constant -> NUMBER .)
    NOT_EQUALS      reduce using rule 20 (constant -> NUMBER .)
    AND             reduce using rule 20 (constant -> NUMBER .)
    XOR             reduce using rule 20 (constant -> NUMBER .)
    OR              reduce using rule 20 (constant -> NUMBER .)
    AND_AND         reduce using rule 20 (constant -> NUMBER .)
    QUESTION_MARK   reduce using rule 20 (constant -> NUMBER .)
    OR_OR           reduce using rule 20 (constant -> NUMBER .)
    SEMICOLON       reduce using rule 20 (constant -> NUMBER .)
    COMMA           reduce using rule 20 (constant -> NUMBER .)
    RIGHT_SQUARE_BRACKET reduce using rule 20 (constant -> NUMBER .)
    RIGHT_PARENTHESIS reduce using rule 20 (constant -> NUMBER .)
    RIGHT_CURLY_BRACKET reduce using rule 20 (constant -> NUMBER .)
    COLON           reduce using rule 20 (constant -> NUMBER .)


state 101

    (21) constant -> DECIMAL_NUMBER .

    LEFT_SQUARE_BRACKET reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    LEFT_PARENTHESIS reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    DOT             reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    ARROW           reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    PLUS_PLUS       reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    MINUS_MINUS     reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    EQUALS          reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    DIVIDE_EQUALS   reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    MULTIPLY_EQUALS reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    MODULUS_EQUALS  reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    PLUS_EQUALS     reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    MINUS_EQUALS    reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    LEFT_SHIFT_EQUALS reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    RIGHT_SHIFT_EQUALS reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    AND_EQUALS      reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    OR_EQUALS       reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    XOR_EQUALS      reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    STAR            reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    DIVIDE          reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    MODULUS         reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    PLUS            reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    MINUS           reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    LEFT_SHIFT      reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    RIGHT_SHIFT     reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    LESS_THAN       reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    GREATER_THAN    reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    LESS_THAN_EQUALS reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    GREATER_THAN_EQUALS reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    EQUALS_EQUALS   reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    NOT_EQUALS      reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    AND             reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    XOR             reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    OR              reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    AND_AND         reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    QUESTION_MARK   reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    OR_OR           reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    SEMICOLON       reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    COMMA           reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    RIGHT_SQUARE_BRACKET reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    RIGHT_PARENTHESIS reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    RIGHT_CURLY_BRACKET reduce using rule 21 (constant -> DECIMAL_NUMBER .)
    COLON           reduce using rule 21 (constant -> DECIMAL_NUMBER .)


state 102

    (22) constant -> CHARACTER .

    LEFT_SQUARE_BRACKET reduce using rule 22 (constant -> CHARACTER .)
    LEFT_PARENTHESIS reduce using rule 22 (constant -> CHARACTER .)
    DOT             reduce using rule 22 (constant -> CHARACTER .)
    ARROW           reduce using rule 22 (constant -> CHARACTER .)
    PLUS_PLUS       reduce using rule 22 (constant -> CHARACTER .)
    MINUS_MINUS     reduce using rule 22 (constant -> CHARACTER .)
    EQUALS          reduce using rule 22 (constant -> CHARACTER .)
    DIVIDE_EQUALS   reduce using rule 22 (constant -> CHARACTER .)
    MULTIPLY_EQUALS reduce using rule 22 (constant -> CHARACTER .)
    MODULUS_EQUALS  reduce using rule 22 (constant -> CHARACTER .)
    PLUS_EQUALS     reduce using rule 22 (constant -> CHARACTER .)
    MINUS_EQUALS    reduce using rule 22 (constant -> CHARACTER .)
    LEFT_SHIFT_EQUALS reduce using rule 22 (constant -> CHARACTER .)
    RIGHT_SHIFT_EQUALS reduce using rule 22 (constant -> CHARACTER .)
    AND_EQUALS      reduce using rule 22 (constant -> CHARACTER .)
    OR_EQUALS       reduce using rule 22 (constant -> CHARACTER .)
    XOR_EQUALS      reduce using rule 22 (constant -> CHARACTER .)
    STAR            reduce using rule 22 (constant -> CHARACTER .)
    DIVIDE          reduce using rule 22 (constant -> CHARACTER .)
    MODULUS         reduce using rule 22 (constant -> CHARACTER .)
    PLUS            reduce using rule 22 (constant -> CHARACTER .)
    MINUS           reduce using rule 22 (constant -> CHARACTER .)
    LEFT_SHIFT      reduce using rule 22 (constant -> CHARACTER .)
    RIGHT_SHIFT     reduce using rule 22 (constant -> CHARACTER .)
    LESS_THAN       reduce using rule 22 (constant -> CHARACTER .)
    GREATER_THAN    reduce using rule 22 (constant -> CHARACTER .)
    LESS_THAN_EQUALS reduce using rule 22 (constant -> CHARACTER .)
    GREATER_THAN_EQUALS reduce using rule 22 (constant -> CHARACTER .)
    EQUALS_EQUALS   reduce using rule 22 (constant -> CHARACTER .)
    NOT_EQUALS      reduce using rule 22 (constant -> CHARACTER .)
    AND             reduce using rule 22 (constant -> CHARACTER .)
    XOR             reduce using rule 22 (constant -> CHARACTER .)
    OR              reduce using rule 22 (constant -> CHARACTER .)
    AND_AND         reduce using rule 22 (constant -> CHARACTER .)
    QUESTION_MARK   reduce using rule 22 (constant -> CHARACTER .)
    OR_OR           reduce using rule 22 (constant -> CHARACTER .)
    SEMICOLON       reduce using rule 22 (constant -> CHARACTER .)
    COMMA           reduce using rule 22 (constant -> CHARACTER .)
    RIGHT_SQUARE_BRACKET reduce using rule 22 (constant -> CHARACTER .)
    RIGHT_PARENTHESIS reduce using rule 22 (constant -> CHARACTER .)
    RIGHT_CURLY_BRACKET reduce using rule 22 (constant -> CHARACTER .)
    COLON           reduce using rule 22 (constant -> CHARACTER .)


state 103

    (23) constant -> TRUE .

    LEFT_SQUARE_BRACKET reduce using rule 23 (constant -> TRUE .)
    LEFT_PARENTHESIS reduce using rule 23 (constant -> TRUE .)
    DOT             reduce using rule 23 (constant -> TRUE .)
    ARROW           reduce using rule 23 (constant -> TRUE .)
    PLUS_PLUS       reduce using rule 23 (constant -> TRUE .)
    MINUS_MINUS     reduce using rule 23 (constant -> TRUE .)
    EQUALS          reduce using rule 23 (constant -> TRUE .)
    DIVIDE_EQUALS   reduce using rule 23 (constant -> TRUE .)
    MULTIPLY_EQUALS reduce using rule 23 (constant -> TRUE .)
    MODULUS_EQUALS  reduce using rule 23 (constant -> TRUE .)
    PLUS_EQUALS     reduce using rule 23 (constant -> TRUE .)
    MINUS_EQUALS    reduce using rule 23 (constant -> TRUE .)
    LEFT_SHIFT_EQUALS reduce using rule 23 (constant -> TRUE .)
    RIGHT_SHIFT_EQUALS reduce using rule 23 (constant -> TRUE .)
    AND_EQUALS      reduce using rule 23 (constant -> TRUE .)
    OR_EQUALS       reduce using rule 23 (constant -> TRUE .)
    XOR_EQUALS      reduce using rule 23 (constant -> TRUE .)
    STAR            reduce using rule 23 (constant -> TRUE .)
    DIVIDE          reduce using rule 23 (constant -> TRUE .)
    MODULUS         reduce using rule 23 (constant -> TRUE .)
    PLUS            reduce using rule 23 (constant -> TRUE .)
    MINUS           reduce using rule 23 (constant -> TRUE .)
    LEFT_SHIFT      reduce using rule 23 (constant -> TRUE .)
    RIGHT_SHIFT     reduce using rule 23 (constant -> TRUE .)
    LESS_THAN       reduce using rule 23 (constant -> TRUE .)
    GREATER_THAN    reduce using rule 23 (constant -> TRUE .)
    LESS_THAN_EQUALS reduce using rule 23 (constant -> TRUE .)
    GREATER_THAN_EQUALS reduce using rule 23 (constant -> TRUE .)
    EQUALS_EQUALS   reduce using rule 23 (constant -> TRUE .)
    NOT_EQUALS      reduce using rule 23 (constant -> TRUE .)
    AND             reduce using rule 23 (constant -> TRUE .)
    XOR             reduce using rule 23 (constant -> TRUE .)
    OR              reduce using rule 23 (constant -> TRUE .)
    AND_AND         reduce using rule 23 (constant -> TRUE .)
    QUESTION_MARK   reduce using rule 23 (constant -> TRUE .)
    OR_OR           reduce using rule 23 (constant -> TRUE .)
    SEMICOLON       reduce using rule 23 (constant -> TRUE .)
    COMMA           reduce using rule 23 (constant -> TRUE .)
    RIGHT_SQUARE_BRACKET reduce using rule 23 (constant -> TRUE .)
    RIGHT_PARENTHESIS reduce using rule 23 (constant -> TRUE .)
    RIGHT_CURLY_BRACKET reduce using rule 23 (constant -> TRUE .)
    COLON           reduce using rule 23 (constant -> TRUE .)


state 104

    (24) constant -> FALSE .

    LEFT_SQUARE_BRACKET reduce using rule 24 (constant -> FALSE .)
    LEFT_PARENTHESIS reduce using rule 24 (constant -> FALSE .)
    DOT             reduce using rule 24 (constant -> FALSE .)
    ARROW           reduce using rule 24 (constant -> FALSE .)
    PLUS_PLUS       reduce using rule 24 (constant -> FALSE .)
    MINUS_MINUS     reduce using rule 24 (constant -> FALSE .)
    EQUALS          reduce using rule 24 (constant -> FALSE .)
    DIVIDE_EQUALS   reduce using rule 24 (constant -> FALSE .)
    MULTIPLY_EQUALS reduce using rule 24 (constant -> FALSE .)
    MODULUS_EQUALS  reduce using rule 24 (constant -> FALSE .)
    PLUS_EQUALS     reduce using rule 24 (constant -> FALSE .)
    MINUS_EQUALS    reduce using rule 24 (constant -> FALSE .)
    LEFT_SHIFT_EQUALS reduce using rule 24 (constant -> FALSE .)
    RIGHT_SHIFT_EQUALS reduce using rule 24 (constant -> FALSE .)
    AND_EQUALS      reduce using rule 24 (constant -> FALSE .)
    OR_EQUALS       reduce using rule 24 (constant -> FALSE .)
    XOR_EQUALS      reduce using rule 24 (constant -> FALSE .)
    STAR            reduce using rule 24 (constant -> FALSE .)
    DIVIDE          reduce using rule 24 (constant -> FALSE .)
    MODULUS         reduce using rule 24 (constant -> FALSE .)
    PLUS            reduce using rule 24 (constant -> FALSE .)
    MINUS           reduce using rule 24 (constant -> FALSE .)
    LEFT_SHIFT      reduce using rule 24 (constant -> FALSE .)
    RIGHT_SHIFT     reduce using rule 24 (constant -> FALSE .)
    LESS_THAN       reduce using rule 24 (constant -> FALSE .)
    GREATER_THAN    reduce using rule 24 (constant -> FALSE .)
    LESS_THAN_EQUALS reduce using rule 24 (constant -> FALSE .)
    GREATER_THAN_EQUALS reduce using rule 24 (constant -> FALSE .)
    EQUALS_EQUALS   reduce using rule 24 (constant -> FALSE .)
    NOT_EQUALS      reduce using rule 24 (constant -> FALSE .)
    AND             reduce using rule 24 (constant -> FALSE .)
    XOR             reduce using rule 24 (constant -> FALSE .)
    OR              reduce using rule 24 (constant -> FALSE .)
    AND_AND         reduce using rule 24 (constant -> FALSE .)
    QUESTION_MARK   reduce using rule 24 (constant -> FALSE .)
    OR_OR           reduce using rule 24 (constant -> FALSE .)
    SEMICOLON       reduce using rule 24 (constant -> FALSE .)
    COMMA           reduce using rule 24 (constant -> FALSE .)
    RIGHT_SQUARE_BRACKET reduce using rule 24 (constant -> FALSE .)
    RIGHT_PARENTHESIS reduce using rule 24 (constant -> FALSE .)
    RIGHT_CURLY_BRACKET reduce using rule 24 (constant -> FALSE .)
    COLON           reduce using rule 24 (constant -> FALSE .)


state 105

    (25) constant -> NULL .

    LEFT_SQUARE_BRACKET reduce using rule 25 (constant -> NULL .)
    LEFT_PARENTHESIS reduce using rule 25 (constant -> NULL .)
    DOT             reduce using rule 25 (constant -> NULL .)
    ARROW           reduce using rule 25 (constant -> NULL .)
    PLUS_PLUS       reduce using rule 25 (constant -> NULL .)
    MINUS_MINUS     reduce using rule 25 (constant -> NULL .)
    EQUALS          reduce using rule 25 (constant -> NULL .)
    DIVIDE_EQUALS   reduce using rule 25 (constant -> NULL .)
    MULTIPLY_EQUALS reduce using rule 25 (constant -> NULL .)
    MODULUS_EQUALS  reduce using rule 25 (constant -> NULL .)
    PLUS_EQUALS     reduce using rule 25 (constant -> NULL .)
    MINUS_EQUALS    reduce using rule 25 (constant -> NULL .)
    LEFT_SHIFT_EQUALS reduce using rule 25 (constant -> NULL .)
    RIGHT_SHIFT_EQUALS reduce using rule 25 (constant -> NULL .)
    AND_EQUALS      reduce using rule 25 (constant -> NULL .)
    OR_EQUALS       reduce using rule 25 (constant -> NULL .)
    XOR_EQUALS      reduce using rule 25 (constant -> NULL .)
    STAR            reduce using rule 25 (constant -> NULL .)
    DIVIDE          reduce using rule 25 (constant -> NULL .)
    MODULUS         reduce using rule 25 (constant -> NULL .)
    PLUS            reduce using rule 25 (constant -> NULL .)
    MINUS           reduce using rule 25 (constant -> NULL .)
    LEFT_SHIFT      reduce using rule 25 (constant -> NULL .)
    RIGHT_SHIFT     reduce using rule 25 (constant -> NULL .)
    LESS_THAN       reduce using rule 25 (constant -> NULL .)
    GREATER_THAN    reduce using rule 25 (constant -> NULL .)
    LESS_THAN_EQUALS reduce using rule 25 (constant -> NULL .)
    GREATER_THAN_EQUALS reduce using rule 25 (constant -> NULL .)
    EQUALS_EQUALS   reduce using rule 25 (constant -> NULL .)
    NOT_EQUALS      reduce using rule 25 (constant -> NULL .)
    AND             reduce using rule 25 (constant -> NULL .)
    XOR             reduce using rule 25 (constant -> NULL .)
    OR              reduce using rule 25 (constant -> NULL .)
    AND_AND         reduce using rule 25 (constant -> NULL .)
    QUESTION_MARK   reduce using rule 25 (constant -> NULL .)
    OR_OR           reduce using rule 25 (constant -> NULL .)
    SEMICOLON       reduce using rule 25 (constant -> NULL .)
    COMMA           reduce using rule 25 (constant -> NULL .)
    RIGHT_SQUARE_BRACKET reduce using rule 25 (constant -> NULL .)
    RIGHT_PARENTHESIS reduce using rule 25 (constant -> NULL .)
    RIGHT_CURLY_BRACKET reduce using rule 25 (constant -> NULL .)
    COLON           reduce using rule 25 (constant -> NULL .)


state 106

    (26) string -> STRING_LITERAL .

    LEFT_SQUARE_BRACKET reduce using rule 26 (string -> STRING_LITERAL .)
    LEFT_PARENTHESIS reduce using rule 26 (string -> STRING_LITERAL .)
    DOT             reduce using rule 26 (string -> STRING_LITERAL .)
    ARROW           reduce using rule 26 (string -> STRING_LITERAL .)
    PLUS_PLUS       reduce using rule 26 (string -> STRING_LITERAL .)
    MINUS_MINUS     reduce using rule 26 (string -> STRING_LITERAL .)
    EQUALS          reduce using rule 26 (string -> STRING_LITERAL .)
    DIVIDE_EQUALS   reduce using rule 26 (string -> STRING_LITERAL .)
    MULTIPLY_EQUALS reduce using rule 26 (string -> STRING_LITERAL .)
    MODULUS_EQUALS  reduce using rule 26 (string -> STRING_LITERAL .)
    PLUS_EQUALS     reduce using rule 26 (string -> STRING_LITERAL .)
    MINUS_EQUALS    reduce using rule 26 (string -> STRING_LITERAL .)
    LEFT_SHIFT_EQUALS reduce using rule 26 (string -> STRING_LITERAL .)
    RIGHT_SHIFT_EQUALS reduce using rule 26 (string -> STRING_LITERAL .)
    AND_EQUALS      reduce using rule 26 (string -> STRING_LITERAL .)
    OR_EQUALS       reduce using rule 26 (string -> STRING_LITERAL .)
    XOR_EQUALS      reduce using rule 26 (string -> STRING_LITERAL .)
    STAR            reduce using rule 26 (string -> STRING_LITERAL .)
    DIVIDE          reduce using rule 26 (string -> STRING_LITERAL .)
    MODULUS         reduce using rule 26 (string -> STRING_LITERAL .)
    PLUS            reduce using rule 26 (string -> STRING_LITERAL .)
    MINUS           reduce using rule 26 (string -> STRING_LITERAL .)
    LEFT_SHIFT      reduce using rule 26 (string -> STRING_LITERAL .)
    RIGHT_SHIFT     reduce using rule 26 (string -> STRING_LITERAL .)
    LESS_THAN       reduce using rule 26 (string -> STRING_LITERAL .)
    GREATER_THAN    reduce using rule 26 (string -> STRING_LITERAL .)
    LESS_THAN_EQUALS reduce using rule 26 (string -> STRING_LITERAL .)
    GREATER_THAN_EQUALS reduce using rule 26 (string -> STRING_LITERAL .)
    EQUALS_EQUALS   reduce using rule 26 (string -> STRING_LITERAL .)
    NOT_EQUALS      reduce using rule 26 (string -> STRING_LITERAL .)
    AND             reduce using rule 26 (string -> STRING_LITERAL .)
    XOR             reduce using rule 26 (string -> STRING_LITERAL .)
    OR              reduce using rule 26 (string -> STRING_LITERAL .)
    AND_AND         reduce using rule 26 (string -> STRING_LITERAL .)
    QUESTION_MARK   reduce using rule 26 (string -> STRING_LITERAL .)
    OR_OR           reduce using rule 26 (string -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 26 (string -> STRING_LITERAL .)
    COMMA           reduce using rule 26 (string -> STRING_LITERAL .)
    RIGHT_SQUARE_BRACKET reduce using rule 26 (string -> STRING_LITERAL .)
    RIGHT_PARENTHESIS reduce using rule 26 (string -> STRING_LITERAL .)
    RIGHT_CURLY_BRACKET reduce using rule 26 (string -> STRING_LITERAL .)
    COLON           reduce using rule 26 (string -> STRING_LITERAL .)


state 107

    (2) predefined_functions -> INPUT .

    LEFT_SQUARE_BRACKET reduce using rule 2 (predefined_functions -> INPUT .)
    LEFT_PARENTHESIS reduce using rule 2 (predefined_functions -> INPUT .)
    DOT             reduce using rule 2 (predefined_functions -> INPUT .)
    ARROW           reduce using rule 2 (predefined_functions -> INPUT .)
    PLUS_PLUS       reduce using rule 2 (predefined_functions -> INPUT .)
    MINUS_MINUS     reduce using rule 2 (predefined_functions -> INPUT .)
    EQUALS          reduce using rule 2 (predefined_functions -> INPUT .)
    DIVIDE_EQUALS   reduce using rule 2 (predefined_functions -> INPUT .)
    MULTIPLY_EQUALS reduce using rule 2 (predefined_functions -> INPUT .)
    MODULUS_EQUALS  reduce using rule 2 (predefined_functions -> INPUT .)
    PLUS_EQUALS     reduce using rule 2 (predefined_functions -> INPUT .)
    MINUS_EQUALS    reduce using rule 2 (predefined_functions -> INPUT .)
    LEFT_SHIFT_EQUALS reduce using rule 2 (predefined_functions -> INPUT .)
    RIGHT_SHIFT_EQUALS reduce using rule 2 (predefined_functions -> INPUT .)
    AND_EQUALS      reduce using rule 2 (predefined_functions -> INPUT .)
    OR_EQUALS       reduce using rule 2 (predefined_functions -> INPUT .)
    XOR_EQUALS      reduce using rule 2 (predefined_functions -> INPUT .)
    STAR            reduce using rule 2 (predefined_functions -> INPUT .)
    DIVIDE          reduce using rule 2 (predefined_functions -> INPUT .)
    MODULUS         reduce using rule 2 (predefined_functions -> INPUT .)
    PLUS            reduce using rule 2 (predefined_functions -> INPUT .)
    MINUS           reduce using rule 2 (predefined_functions -> INPUT .)
    LEFT_SHIFT      reduce using rule 2 (predefined_functions -> INPUT .)
    RIGHT_SHIFT     reduce using rule 2 (predefined_functions -> INPUT .)
    LESS_THAN       reduce using rule 2 (predefined_functions -> INPUT .)
    GREATER_THAN    reduce using rule 2 (predefined_functions -> INPUT .)
    LESS_THAN_EQUALS reduce using rule 2 (predefined_functions -> INPUT .)
    GREATER_THAN_EQUALS reduce using rule 2 (predefined_functions -> INPUT .)
    EQUALS_EQUALS   reduce using rule 2 (predefined_functions -> INPUT .)
    NOT_EQUALS      reduce using rule 2 (predefined_functions -> INPUT .)
    AND             reduce using rule 2 (predefined_functions -> INPUT .)
    XOR             reduce using rule 2 (predefined_functions -> INPUT .)
    OR              reduce using rule 2 (predefined_functions -> INPUT .)
    AND_AND         reduce using rule 2 (predefined_functions -> INPUT .)
    QUESTION_MARK   reduce using rule 2 (predefined_functions -> INPUT .)
    OR_OR           reduce using rule 2 (predefined_functions -> INPUT .)
    SEMICOLON       reduce using rule 2 (predefined_functions -> INPUT .)
    COMMA           reduce using rule 2 (predefined_functions -> INPUT .)
    RIGHT_SQUARE_BRACKET reduce using rule 2 (predefined_functions -> INPUT .)
    RIGHT_PARENTHESIS reduce using rule 2 (predefined_functions -> INPUT .)
    RIGHT_CURLY_BRACKET reduce using rule 2 (predefined_functions -> INPUT .)
    COLON           reduce using rule 2 (predefined_functions -> INPUT .)


state 108

    (3) predefined_functions -> OUTPUT .

    LEFT_SQUARE_BRACKET reduce using rule 3 (predefined_functions -> OUTPUT .)
    LEFT_PARENTHESIS reduce using rule 3 (predefined_functions -> OUTPUT .)
    DOT             reduce using rule 3 (predefined_functions -> OUTPUT .)
    ARROW           reduce using rule 3 (predefined_functions -> OUTPUT .)
    PLUS_PLUS       reduce using rule 3 (predefined_functions -> OUTPUT .)
    MINUS_MINUS     reduce using rule 3 (predefined_functions -> OUTPUT .)
    EQUALS          reduce using rule 3 (predefined_functions -> OUTPUT .)
    DIVIDE_EQUALS   reduce using rule 3 (predefined_functions -> OUTPUT .)
    MULTIPLY_EQUALS reduce using rule 3 (predefined_functions -> OUTPUT .)
    MODULUS_EQUALS  reduce using rule 3 (predefined_functions -> OUTPUT .)
    PLUS_EQUALS     reduce using rule 3 (predefined_functions -> OUTPUT .)
    MINUS_EQUALS    reduce using rule 3 (predefined_functions -> OUTPUT .)
    LEFT_SHIFT_EQUALS reduce using rule 3 (predefined_functions -> OUTPUT .)
    RIGHT_SHIFT_EQUALS reduce using rule 3 (predefined_functions -> OUTPUT .)
    AND_EQUALS      reduce using rule 3 (predefined_functions -> OUTPUT .)
    OR_EQUALS       reduce using rule 3 (predefined_functions -> OUTPUT .)
    XOR_EQUALS      reduce using rule 3 (predefined_functions -> OUTPUT .)
    STAR            reduce using rule 3 (predefined_functions -> OUTPUT .)
    DIVIDE          reduce using rule 3 (predefined_functions -> OUTPUT .)
    MODULUS         reduce using rule 3 (predefined_functions -> OUTPUT .)
    PLUS            reduce using rule 3 (predefined_functions -> OUTPUT .)
    MINUS           reduce using rule 3 (predefined_functions -> OUTPUT .)
    LEFT_SHIFT      reduce using rule 3 (predefined_functions -> OUTPUT .)
    RIGHT_SHIFT     reduce using rule 3 (predefined_functions -> OUTPUT .)
    LESS_THAN       reduce using rule 3 (predefined_functions -> OUTPUT .)
    GREATER_THAN    reduce using rule 3 (predefined_functions -> OUTPUT .)
    LESS_THAN_EQUALS reduce using rule 3 (predefined_functions -> OUTPUT .)
    GREATER_THAN_EQUALS reduce using rule 3 (predefined_functions -> OUTPUT .)
    EQUALS_EQUALS   reduce using rule 3 (predefined_functions -> OUTPUT .)
    NOT_EQUALS      reduce using rule 3 (predefined_functions -> OUTPUT .)
    AND             reduce using rule 3 (predefined_functions -> OUTPUT .)
    XOR             reduce using rule 3 (predefined_functions -> OUTPUT .)
    OR              reduce using rule 3 (predefined_functions -> OUTPUT .)
    AND_AND         reduce using rule 3 (predefined_functions -> OUTPUT .)
    QUESTION_MARK   reduce using rule 3 (predefined_functions -> OUTPUT .)
    OR_OR           reduce using rule 3 (predefined_functions -> OUTPUT .)
    SEMICOLON       reduce using rule 3 (predefined_functions -> OUTPUT .)
    COMMA           reduce using rule 3 (predefined_functions -> OUTPUT .)
    RIGHT_SQUARE_BRACKET reduce using rule 3 (predefined_functions -> OUTPUT .)
    RIGHT_PARENTHESIS reduce using rule 3 (predefined_functions -> OUTPUT .)
    RIGHT_CURLY_BRACKET reduce using rule 3 (predefined_functions -> OUTPUT .)
    COLON           reduce using rule 3 (predefined_functions -> OUTPUT .)


state 109

    (4) predefined_functions -> SQUARE_ROOT .

    LEFT_SQUARE_BRACKET reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    LEFT_PARENTHESIS reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    DOT             reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    ARROW           reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    PLUS_PLUS       reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    MINUS_MINUS     reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    EQUALS          reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    DIVIDE_EQUALS   reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    MULTIPLY_EQUALS reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    MODULUS_EQUALS  reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    PLUS_EQUALS     reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    MINUS_EQUALS    reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    LEFT_SHIFT_EQUALS reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    RIGHT_SHIFT_EQUALS reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    AND_EQUALS      reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    OR_EQUALS       reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    XOR_EQUALS      reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    STAR            reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    DIVIDE          reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    MODULUS         reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    PLUS            reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    MINUS           reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    LEFT_SHIFT      reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    RIGHT_SHIFT     reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    LESS_THAN       reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    GREATER_THAN    reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    LESS_THAN_EQUALS reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    GREATER_THAN_EQUALS reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    EQUALS_EQUALS   reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    NOT_EQUALS      reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    AND             reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    XOR             reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    OR              reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    AND_AND         reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    QUESTION_MARK   reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    OR_OR           reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    SEMICOLON       reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    COMMA           reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    RIGHT_SQUARE_BRACKET reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    RIGHT_PARENTHESIS reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    RIGHT_CURLY_BRACKET reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)
    COLON           reduce using rule 4 (predefined_functions -> SQUARE_ROOT .)


state 110

    (5) predefined_functions -> SIN .

    LEFT_SQUARE_BRACKET reduce using rule 5 (predefined_functions -> SIN .)
    LEFT_PARENTHESIS reduce using rule 5 (predefined_functions -> SIN .)
    DOT             reduce using rule 5 (predefined_functions -> SIN .)
    ARROW           reduce using rule 5 (predefined_functions -> SIN .)
    PLUS_PLUS       reduce using rule 5 (predefined_functions -> SIN .)
    MINUS_MINUS     reduce using rule 5 (predefined_functions -> SIN .)
    EQUALS          reduce using rule 5 (predefined_functions -> SIN .)
    DIVIDE_EQUALS   reduce using rule 5 (predefined_functions -> SIN .)
    MULTIPLY_EQUALS reduce using rule 5 (predefined_functions -> SIN .)
    MODULUS_EQUALS  reduce using rule 5 (predefined_functions -> SIN .)
    PLUS_EQUALS     reduce using rule 5 (predefined_functions -> SIN .)
    MINUS_EQUALS    reduce using rule 5 (predefined_functions -> SIN .)
    LEFT_SHIFT_EQUALS reduce using rule 5 (predefined_functions -> SIN .)
    RIGHT_SHIFT_EQUALS reduce using rule 5 (predefined_functions -> SIN .)
    AND_EQUALS      reduce using rule 5 (predefined_functions -> SIN .)
    OR_EQUALS       reduce using rule 5 (predefined_functions -> SIN .)
    XOR_EQUALS      reduce using rule 5 (predefined_functions -> SIN .)
    STAR            reduce using rule 5 (predefined_functions -> SIN .)
    DIVIDE          reduce using rule 5 (predefined_functions -> SIN .)
    MODULUS         reduce using rule 5 (predefined_functions -> SIN .)
    PLUS            reduce using rule 5 (predefined_functions -> SIN .)
    MINUS           reduce using rule 5 (predefined_functions -> SIN .)
    LEFT_SHIFT      reduce using rule 5 (predefined_functions -> SIN .)
    RIGHT_SHIFT     reduce using rule 5 (predefined_functions -> SIN .)
    LESS_THAN       reduce using rule 5 (predefined_functions -> SIN .)
    GREATER_THAN    reduce using rule 5 (predefined_functions -> SIN .)
    LESS_THAN_EQUALS reduce using rule 5 (predefined_functions -> SIN .)
    GREATER_THAN_EQUALS reduce using rule 5 (predefined_functions -> SIN .)
    EQUALS_EQUALS   reduce using rule 5 (predefined_functions -> SIN .)
    NOT_EQUALS      reduce using rule 5 (predefined_functions -> SIN .)
    AND             reduce using rule 5 (predefined_functions -> SIN .)
    XOR             reduce using rule 5 (predefined_functions -> SIN .)
    OR              reduce using rule 5 (predefined_functions -> SIN .)
    AND_AND         reduce using rule 5 (predefined_functions -> SIN .)
    QUESTION_MARK   reduce using rule 5 (predefined_functions -> SIN .)
    OR_OR           reduce using rule 5 (predefined_functions -> SIN .)
    SEMICOLON       reduce using rule 5 (predefined_functions -> SIN .)
    COMMA           reduce using rule 5 (predefined_functions -> SIN .)
    RIGHT_SQUARE_BRACKET reduce using rule 5 (predefined_functions -> SIN .)
    RIGHT_PARENTHESIS reduce using rule 5 (predefined_functions -> SIN .)
    RIGHT_CURLY_BRACKET reduce using rule 5 (predefined_functions -> SIN .)
    COLON           reduce using rule 5 (predefined_functions -> SIN .)


state 111

    (6) predefined_functions -> COS .

    LEFT_SQUARE_BRACKET reduce using rule 6 (predefined_functions -> COS .)
    LEFT_PARENTHESIS reduce using rule 6 (predefined_functions -> COS .)
    DOT             reduce using rule 6 (predefined_functions -> COS .)
    ARROW           reduce using rule 6 (predefined_functions -> COS .)
    PLUS_PLUS       reduce using rule 6 (predefined_functions -> COS .)
    MINUS_MINUS     reduce using rule 6 (predefined_functions -> COS .)
    EQUALS          reduce using rule 6 (predefined_functions -> COS .)
    DIVIDE_EQUALS   reduce using rule 6 (predefined_functions -> COS .)
    MULTIPLY_EQUALS reduce using rule 6 (predefined_functions -> COS .)
    MODULUS_EQUALS  reduce using rule 6 (predefined_functions -> COS .)
    PLUS_EQUALS     reduce using rule 6 (predefined_functions -> COS .)
    MINUS_EQUALS    reduce using rule 6 (predefined_functions -> COS .)
    LEFT_SHIFT_EQUALS reduce using rule 6 (predefined_functions -> COS .)
    RIGHT_SHIFT_EQUALS reduce using rule 6 (predefined_functions -> COS .)
    AND_EQUALS      reduce using rule 6 (predefined_functions -> COS .)
    OR_EQUALS       reduce using rule 6 (predefined_functions -> COS .)
    XOR_EQUALS      reduce using rule 6 (predefined_functions -> COS .)
    STAR            reduce using rule 6 (predefined_functions -> COS .)
    DIVIDE          reduce using rule 6 (predefined_functions -> COS .)
    MODULUS         reduce using rule 6 (predefined_functions -> COS .)
    PLUS            reduce using rule 6 (predefined_functions -> COS .)
    MINUS           reduce using rule 6 (predefined_functions -> COS .)
    LEFT_SHIFT      reduce using rule 6 (predefined_functions -> COS .)
    RIGHT_SHIFT     reduce using rule 6 (predefined_functions -> COS .)
    LESS_THAN       reduce using rule 6 (predefined_functions -> COS .)
    GREATER_THAN    reduce using rule 6 (predefined_functions -> COS .)
    LESS_THAN_EQUALS reduce using rule 6 (predefined_functions -> COS .)
    GREATER_THAN_EQUALS reduce using rule 6 (predefined_functions -> COS .)
    EQUALS_EQUALS   reduce using rule 6 (predefined_functions -> COS .)
    NOT_EQUALS      reduce using rule 6 (predefined_functions -> COS .)
    AND             reduce using rule 6 (predefined_functions -> COS .)
    XOR             reduce using rule 6 (predefined_functions -> COS .)
    OR              reduce using rule 6 (predefined_functions -> COS .)
    AND_AND         reduce using rule 6 (predefined_functions -> COS .)
    QUESTION_MARK   reduce using rule 6 (predefined_functions -> COS .)
    OR_OR           reduce using rule 6 (predefined_functions -> COS .)
    SEMICOLON       reduce using rule 6 (predefined_functions -> COS .)
    COMMA           reduce using rule 6 (predefined_functions -> COS .)
    RIGHT_SQUARE_BRACKET reduce using rule 6 (predefined_functions -> COS .)
    RIGHT_PARENTHESIS reduce using rule 6 (predefined_functions -> COS .)
    RIGHT_CURLY_BRACKET reduce using rule 6 (predefined_functions -> COS .)
    COLON           reduce using rule 6 (predefined_functions -> COS .)


state 112

    (7) predefined_functions -> TAN .

    LEFT_SQUARE_BRACKET reduce using rule 7 (predefined_functions -> TAN .)
    LEFT_PARENTHESIS reduce using rule 7 (predefined_functions -> TAN .)
    DOT             reduce using rule 7 (predefined_functions -> TAN .)
    ARROW           reduce using rule 7 (predefined_functions -> TAN .)
    PLUS_PLUS       reduce using rule 7 (predefined_functions -> TAN .)
    MINUS_MINUS     reduce using rule 7 (predefined_functions -> TAN .)
    EQUALS          reduce using rule 7 (predefined_functions -> TAN .)
    DIVIDE_EQUALS   reduce using rule 7 (predefined_functions -> TAN .)
    MULTIPLY_EQUALS reduce using rule 7 (predefined_functions -> TAN .)
    MODULUS_EQUALS  reduce using rule 7 (predefined_functions -> TAN .)
    PLUS_EQUALS     reduce using rule 7 (predefined_functions -> TAN .)
    MINUS_EQUALS    reduce using rule 7 (predefined_functions -> TAN .)
    LEFT_SHIFT_EQUALS reduce using rule 7 (predefined_functions -> TAN .)
    RIGHT_SHIFT_EQUALS reduce using rule 7 (predefined_functions -> TAN .)
    AND_EQUALS      reduce using rule 7 (predefined_functions -> TAN .)
    OR_EQUALS       reduce using rule 7 (predefined_functions -> TAN .)
    XOR_EQUALS      reduce using rule 7 (predefined_functions -> TAN .)
    STAR            reduce using rule 7 (predefined_functions -> TAN .)
    DIVIDE          reduce using rule 7 (predefined_functions -> TAN .)
    MODULUS         reduce using rule 7 (predefined_functions -> TAN .)
    PLUS            reduce using rule 7 (predefined_functions -> TAN .)
    MINUS           reduce using rule 7 (predefined_functions -> TAN .)
    LEFT_SHIFT      reduce using rule 7 (predefined_functions -> TAN .)
    RIGHT_SHIFT     reduce using rule 7 (predefined_functions -> TAN .)
    LESS_THAN       reduce using rule 7 (predefined_functions -> TAN .)
    GREATER_THAN    reduce using rule 7 (predefined_functions -> TAN .)
    LESS_THAN_EQUALS reduce using rule 7 (predefined_functions -> TAN .)
    GREATER_THAN_EQUALS reduce using rule 7 (predefined_functions -> TAN .)
    EQUALS_EQUALS   reduce using rule 7 (predefined_functions -> TAN .)
    NOT_EQUALS      reduce using rule 7 (predefined_functions -> TAN .)
    AND             reduce using rule 7 (predefined_functions -> TAN .)
    XOR             reduce using rule 7 (predefined_functions -> TAN .)
    OR              reduce using rule 7 (predefined_functions -> TAN .)
    AND_AND         reduce using rule 7 (predefined_functions -> TAN .)
    QUESTION_MARK   reduce using rule 7 (predefined_functions -> TAN .)
    OR_OR           reduce using rule 7 (predefined_functions -> TAN .)
    SEMICOLON       reduce using rule 7 (predefined_functions -> TAN .)
    COMMA           reduce using rule 7 (predefined_functions -> TAN .)
    RIGHT_SQUARE_BRACKET reduce using rule 7 (predefined_functions -> TAN .)
    RIGHT_PARENTHESIS reduce using rule 7 (predefined_functions -> TAN .)
    RIGHT_CURLY_BRACKET reduce using rule 7 (predefined_functions -> TAN .)
    COLON           reduce using rule 7 (predefined_functions -> TAN .)


state 113

    (8) predefined_functions -> STRING_COPY .

    LEFT_SQUARE_BRACKET reduce using rule 8 (predefined_functions -> STRING_COPY .)
    LEFT_PARENTHESIS reduce using rule 8 (predefined_functions -> STRING_COPY .)
    DOT             reduce using rule 8 (predefined_functions -> STRING_COPY .)
    ARROW           reduce using rule 8 (predefined_functions -> STRING_COPY .)
    PLUS_PLUS       reduce using rule 8 (predefined_functions -> STRING_COPY .)
    MINUS_MINUS     reduce using rule 8 (predefined_functions -> STRING_COPY .)
    EQUALS          reduce using rule 8 (predefined_functions -> STRING_COPY .)
    DIVIDE_EQUALS   reduce using rule 8 (predefined_functions -> STRING_COPY .)
    MULTIPLY_EQUALS reduce using rule 8 (predefined_functions -> STRING_COPY .)
    MODULUS_EQUALS  reduce using rule 8 (predefined_functions -> STRING_COPY .)
    PLUS_EQUALS     reduce using rule 8 (predefined_functions -> STRING_COPY .)
    MINUS_EQUALS    reduce using rule 8 (predefined_functions -> STRING_COPY .)
    LEFT_SHIFT_EQUALS reduce using rule 8 (predefined_functions -> STRING_COPY .)
    RIGHT_SHIFT_EQUALS reduce using rule 8 (predefined_functions -> STRING_COPY .)
    AND_EQUALS      reduce using rule 8 (predefined_functions -> STRING_COPY .)
    OR_EQUALS       reduce using rule 8 (predefined_functions -> STRING_COPY .)
    XOR_EQUALS      reduce using rule 8 (predefined_functions -> STRING_COPY .)
    STAR            reduce using rule 8 (predefined_functions -> STRING_COPY .)
    DIVIDE          reduce using rule 8 (predefined_functions -> STRING_COPY .)
    MODULUS         reduce using rule 8 (predefined_functions -> STRING_COPY .)
    PLUS            reduce using rule 8 (predefined_functions -> STRING_COPY .)
    MINUS           reduce using rule 8 (predefined_functions -> STRING_COPY .)
    LEFT_SHIFT      reduce using rule 8 (predefined_functions -> STRING_COPY .)
    RIGHT_SHIFT     reduce using rule 8 (predefined_functions -> STRING_COPY .)
    LESS_THAN       reduce using rule 8 (predefined_functions -> STRING_COPY .)
    GREATER_THAN    reduce using rule 8 (predefined_functions -> STRING_COPY .)
    LESS_THAN_EQUALS reduce using rule 8 (predefined_functions -> STRING_COPY .)
    GREATER_THAN_EQUALS reduce using rule 8 (predefined_functions -> STRING_COPY .)
    EQUALS_EQUALS   reduce using rule 8 (predefined_functions -> STRING_COPY .)
    NOT_EQUALS      reduce using rule 8 (predefined_functions -> STRING_COPY .)
    AND             reduce using rule 8 (predefined_functions -> STRING_COPY .)
    XOR             reduce using rule 8 (predefined_functions -> STRING_COPY .)
    OR              reduce using rule 8 (predefined_functions -> STRING_COPY .)
    AND_AND         reduce using rule 8 (predefined_functions -> STRING_COPY .)
    QUESTION_MARK   reduce using rule 8 (predefined_functions -> STRING_COPY .)
    OR_OR           reduce using rule 8 (predefined_functions -> STRING_COPY .)
    SEMICOLON       reduce using rule 8 (predefined_functions -> STRING_COPY .)
    COMMA           reduce using rule 8 (predefined_functions -> STRING_COPY .)
    RIGHT_SQUARE_BRACKET reduce using rule 8 (predefined_functions -> STRING_COPY .)
    RIGHT_PARENTHESIS reduce using rule 8 (predefined_functions -> STRING_COPY .)
    RIGHT_CURLY_BRACKET reduce using rule 8 (predefined_functions -> STRING_COPY .)
    COLON           reduce using rule 8 (predefined_functions -> STRING_COPY .)


state 114

    (9) predefined_functions -> STRING_REVERSE .

    LEFT_SQUARE_BRACKET reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    LEFT_PARENTHESIS reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    DOT             reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    ARROW           reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    PLUS_PLUS       reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    MINUS_MINUS     reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    EQUALS          reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    DIVIDE_EQUALS   reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    MULTIPLY_EQUALS reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    MODULUS_EQUALS  reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    PLUS_EQUALS     reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    MINUS_EQUALS    reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    LEFT_SHIFT_EQUALS reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    RIGHT_SHIFT_EQUALS reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    AND_EQUALS      reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    OR_EQUALS       reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    XOR_EQUALS      reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    STAR            reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    DIVIDE          reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    MODULUS         reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    PLUS            reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    MINUS           reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    LEFT_SHIFT      reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    RIGHT_SHIFT     reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    LESS_THAN       reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    GREATER_THAN    reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    LESS_THAN_EQUALS reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    GREATER_THAN_EQUALS reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    EQUALS_EQUALS   reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    NOT_EQUALS      reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    AND             reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    XOR             reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    OR              reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    AND_AND         reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    QUESTION_MARK   reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    OR_OR           reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    SEMICOLON       reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    COMMA           reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    RIGHT_SQUARE_BRACKET reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    RIGHT_PARENTHESIS reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    RIGHT_CURLY_BRACKET reduce using rule 9 (predefined_functions -> STRING_REVERSE .)
    COLON           reduce using rule 9 (predefined_functions -> STRING_REVERSE .)


state 115

    (10) predefined_functions -> STRING_LENGTH .

    LEFT_SQUARE_BRACKET reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    LEFT_PARENTHESIS reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    DOT             reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    ARROW           reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    PLUS_PLUS       reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    MINUS_MINUS     reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    EQUALS          reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    DIVIDE_EQUALS   reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    MULTIPLY_EQUALS reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    MODULUS_EQUALS  reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    PLUS_EQUALS     reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    MINUS_EQUALS    reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    LEFT_SHIFT_EQUALS reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    RIGHT_SHIFT_EQUALS reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    AND_EQUALS      reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    OR_EQUALS       reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    XOR_EQUALS      reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    STAR            reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    DIVIDE          reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    MODULUS         reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    PLUS            reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    MINUS           reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    LEFT_SHIFT      reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    RIGHT_SHIFT     reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    LESS_THAN       reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    GREATER_THAN    reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    LESS_THAN_EQUALS reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    GREATER_THAN_EQUALS reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    EQUALS_EQUALS   reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    NOT_EQUALS      reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    AND             reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    XOR             reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    OR              reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    AND_AND         reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    QUESTION_MARK   reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    OR_OR           reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    SEMICOLON       reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    COMMA           reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    RIGHT_SQUARE_BRACKET reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    RIGHT_PARENTHESIS reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    RIGHT_CURLY_BRACKET reduce using rule 10 (predefined_functions -> STRING_LENGTH .)
    COLON           reduce using rule 10 (predefined_functions -> STRING_LENGTH .)


state 116

    (11) predefined_functions -> STRING_COMPARE .

    LEFT_SQUARE_BRACKET reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    LEFT_PARENTHESIS reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    DOT             reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    ARROW           reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    PLUS_PLUS       reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    MINUS_MINUS     reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    EQUALS          reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    DIVIDE_EQUALS   reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    MULTIPLY_EQUALS reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    MODULUS_EQUALS  reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    PLUS_EQUALS     reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    MINUS_EQUALS    reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    LEFT_SHIFT_EQUALS reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    RIGHT_SHIFT_EQUALS reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    AND_EQUALS      reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    OR_EQUALS       reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    XOR_EQUALS      reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    STAR            reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    DIVIDE          reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    MODULUS         reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    PLUS            reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    MINUS           reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    LEFT_SHIFT      reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    RIGHT_SHIFT     reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    LESS_THAN       reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    GREATER_THAN    reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    LESS_THAN_EQUALS reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    GREATER_THAN_EQUALS reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    EQUALS_EQUALS   reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    NOT_EQUALS      reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    AND             reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    XOR             reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    OR              reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    AND_AND         reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    QUESTION_MARK   reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    OR_OR           reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    SEMICOLON       reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    COMMA           reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    RIGHT_SQUARE_BRACKET reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    RIGHT_PARENTHESIS reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    RIGHT_CURLY_BRACKET reduce using rule 11 (predefined_functions -> STRING_COMPARE .)
    COLON           reduce using rule 11 (predefined_functions -> STRING_COMPARE .)


state 117

    (12) predefined_functions -> WRITE .

    LEFT_SQUARE_BRACKET reduce using rule 12 (predefined_functions -> WRITE .)
    LEFT_PARENTHESIS reduce using rule 12 (predefined_functions -> WRITE .)
    DOT             reduce using rule 12 (predefined_functions -> WRITE .)
    ARROW           reduce using rule 12 (predefined_functions -> WRITE .)
    PLUS_PLUS       reduce using rule 12 (predefined_functions -> WRITE .)
    MINUS_MINUS     reduce using rule 12 (predefined_functions -> WRITE .)
    EQUALS          reduce using rule 12 (predefined_functions -> WRITE .)
    DIVIDE_EQUALS   reduce using rule 12 (predefined_functions -> WRITE .)
    MULTIPLY_EQUALS reduce using rule 12 (predefined_functions -> WRITE .)
    MODULUS_EQUALS  reduce using rule 12 (predefined_functions -> WRITE .)
    PLUS_EQUALS     reduce using rule 12 (predefined_functions -> WRITE .)
    MINUS_EQUALS    reduce using rule 12 (predefined_functions -> WRITE .)
    LEFT_SHIFT_EQUALS reduce using rule 12 (predefined_functions -> WRITE .)
    RIGHT_SHIFT_EQUALS reduce using rule 12 (predefined_functions -> WRITE .)
    AND_EQUALS      reduce using rule 12 (predefined_functions -> WRITE .)
    OR_EQUALS       reduce using rule 12 (predefined_functions -> WRITE .)
    XOR_EQUALS      reduce using rule 12 (predefined_functions -> WRITE .)
    STAR            reduce using rule 12 (predefined_functions -> WRITE .)
    DIVIDE          reduce using rule 12 (predefined_functions -> WRITE .)
    MODULUS         reduce using rule 12 (predefined_functions -> WRITE .)
    PLUS            reduce using rule 12 (predefined_functions -> WRITE .)
    MINUS           reduce using rule 12 (predefined_functions -> WRITE .)
    LEFT_SHIFT      reduce using rule 12 (predefined_functions -> WRITE .)
    RIGHT_SHIFT     reduce using rule 12 (predefined_functions -> WRITE .)
    LESS_THAN       reduce using rule 12 (predefined_functions -> WRITE .)
    GREATER_THAN    reduce using rule 12 (predefined_functions -> WRITE .)
    LESS_THAN_EQUALS reduce using rule 12 (predefined_functions -> WRITE .)
    GREATER_THAN_EQUALS reduce using rule 12 (predefined_functions -> WRITE .)
    EQUALS_EQUALS   reduce using rule 12 (predefined_functions -> WRITE .)
    NOT_EQUALS      reduce using rule 12 (predefined_functions -> WRITE .)
    AND             reduce using rule 12 (predefined_functions -> WRITE .)
    XOR             reduce using rule 12 (predefined_functions -> WRITE .)
    OR              reduce using rule 12 (predefined_functions -> WRITE .)
    AND_AND         reduce using rule 12 (predefined_functions -> WRITE .)
    QUESTION_MARK   reduce using rule 12 (predefined_functions -> WRITE .)
    OR_OR           reduce using rule 12 (predefined_functions -> WRITE .)
    SEMICOLON       reduce using rule 12 (predefined_functions -> WRITE .)
    COMMA           reduce using rule 12 (predefined_functions -> WRITE .)
    RIGHT_SQUARE_BRACKET reduce using rule 12 (predefined_functions -> WRITE .)
    RIGHT_PARENTHESIS reduce using rule 12 (predefined_functions -> WRITE .)
    RIGHT_CURLY_BRACKET reduce using rule 12 (predefined_functions -> WRITE .)
    COLON           reduce using rule 12 (predefined_functions -> WRITE .)


state 118

    (13) predefined_functions -> READ .

    LEFT_SQUARE_BRACKET reduce using rule 13 (predefined_functions -> READ .)
    LEFT_PARENTHESIS reduce using rule 13 (predefined_functions -> READ .)
    DOT             reduce using rule 13 (predefined_functions -> READ .)
    ARROW           reduce using rule 13 (predefined_functions -> READ .)
    PLUS_PLUS       reduce using rule 13 (predefined_functions -> READ .)
    MINUS_MINUS     reduce using rule 13 (predefined_functions -> READ .)
    EQUALS          reduce using rule 13 (predefined_functions -> READ .)
    DIVIDE_EQUALS   reduce using rule 13 (predefined_functions -> READ .)
    MULTIPLY_EQUALS reduce using rule 13 (predefined_functions -> READ .)
    MODULUS_EQUALS  reduce using rule 13 (predefined_functions -> READ .)
    PLUS_EQUALS     reduce using rule 13 (predefined_functions -> READ .)
    MINUS_EQUALS    reduce using rule 13 (predefined_functions -> READ .)
    LEFT_SHIFT_EQUALS reduce using rule 13 (predefined_functions -> READ .)
    RIGHT_SHIFT_EQUALS reduce using rule 13 (predefined_functions -> READ .)
    AND_EQUALS      reduce using rule 13 (predefined_functions -> READ .)
    OR_EQUALS       reduce using rule 13 (predefined_functions -> READ .)
    XOR_EQUALS      reduce using rule 13 (predefined_functions -> READ .)
    STAR            reduce using rule 13 (predefined_functions -> READ .)
    DIVIDE          reduce using rule 13 (predefined_functions -> READ .)
    MODULUS         reduce using rule 13 (predefined_functions -> READ .)
    PLUS            reduce using rule 13 (predefined_functions -> READ .)
    MINUS           reduce using rule 13 (predefined_functions -> READ .)
    LEFT_SHIFT      reduce using rule 13 (predefined_functions -> READ .)
    RIGHT_SHIFT     reduce using rule 13 (predefined_functions -> READ .)
    LESS_THAN       reduce using rule 13 (predefined_functions -> READ .)
    GREATER_THAN    reduce using rule 13 (predefined_functions -> READ .)
    LESS_THAN_EQUALS reduce using rule 13 (predefined_functions -> READ .)
    GREATER_THAN_EQUALS reduce using rule 13 (predefined_functions -> READ .)
    EQUALS_EQUALS   reduce using rule 13 (predefined_functions -> READ .)
    NOT_EQUALS      reduce using rule 13 (predefined_functions -> READ .)
    AND             reduce using rule 13 (predefined_functions -> READ .)
    XOR             reduce using rule 13 (predefined_functions -> READ .)
    OR              reduce using rule 13 (predefined_functions -> READ .)
    AND_AND         reduce using rule 13 (predefined_functions -> READ .)
    QUESTION_MARK   reduce using rule 13 (predefined_functions -> READ .)
    OR_OR           reduce using rule 13 (predefined_functions -> READ .)
    SEMICOLON       reduce using rule 13 (predefined_functions -> READ .)
    COMMA           reduce using rule 13 (predefined_functions -> READ .)
    RIGHT_SQUARE_BRACKET reduce using rule 13 (predefined_functions -> READ .)
    RIGHT_PARENTHESIS reduce using rule 13 (predefined_functions -> READ .)
    RIGHT_CURLY_BRACKET reduce using rule 13 (predefined_functions -> READ .)
    COLON           reduce using rule 13 (predefined_functions -> READ .)


state 119

    (14) predefined_functions -> OPEN .

    LEFT_SQUARE_BRACKET reduce using rule 14 (predefined_functions -> OPEN .)
    LEFT_PARENTHESIS reduce using rule 14 (predefined_functions -> OPEN .)
    DOT             reduce using rule 14 (predefined_functions -> OPEN .)
    ARROW           reduce using rule 14 (predefined_functions -> OPEN .)
    PLUS_PLUS       reduce using rule 14 (predefined_functions -> OPEN .)
    MINUS_MINUS     reduce using rule 14 (predefined_functions -> OPEN .)
    EQUALS          reduce using rule 14 (predefined_functions -> OPEN .)
    DIVIDE_EQUALS   reduce using rule 14 (predefined_functions -> OPEN .)
    MULTIPLY_EQUALS reduce using rule 14 (predefined_functions -> OPEN .)
    MODULUS_EQUALS  reduce using rule 14 (predefined_functions -> OPEN .)
    PLUS_EQUALS     reduce using rule 14 (predefined_functions -> OPEN .)
    MINUS_EQUALS    reduce using rule 14 (predefined_functions -> OPEN .)
    LEFT_SHIFT_EQUALS reduce using rule 14 (predefined_functions -> OPEN .)
    RIGHT_SHIFT_EQUALS reduce using rule 14 (predefined_functions -> OPEN .)
    AND_EQUALS      reduce using rule 14 (predefined_functions -> OPEN .)
    OR_EQUALS       reduce using rule 14 (predefined_functions -> OPEN .)
    XOR_EQUALS      reduce using rule 14 (predefined_functions -> OPEN .)
    STAR            reduce using rule 14 (predefined_functions -> OPEN .)
    DIVIDE          reduce using rule 14 (predefined_functions -> OPEN .)
    MODULUS         reduce using rule 14 (predefined_functions -> OPEN .)
    PLUS            reduce using rule 14 (predefined_functions -> OPEN .)
    MINUS           reduce using rule 14 (predefined_functions -> OPEN .)
    LEFT_SHIFT      reduce using rule 14 (predefined_functions -> OPEN .)
    RIGHT_SHIFT     reduce using rule 14 (predefined_functions -> OPEN .)
    LESS_THAN       reduce using rule 14 (predefined_functions -> OPEN .)
    GREATER_THAN    reduce using rule 14 (predefined_functions -> OPEN .)
    LESS_THAN_EQUALS reduce using rule 14 (predefined_functions -> OPEN .)
    GREATER_THAN_EQUALS reduce using rule 14 (predefined_functions -> OPEN .)
    EQUALS_EQUALS   reduce using rule 14 (predefined_functions -> OPEN .)
    NOT_EQUALS      reduce using rule 14 (predefined_functions -> OPEN .)
    AND             reduce using rule 14 (predefined_functions -> OPEN .)
    XOR             reduce using rule 14 (predefined_functions -> OPEN .)
    OR              reduce using rule 14 (predefined_functions -> OPEN .)
    AND_AND         reduce using rule 14 (predefined_functions -> OPEN .)
    QUESTION_MARK   reduce using rule 14 (predefined_functions -> OPEN .)
    OR_OR           reduce using rule 14 (predefined_functions -> OPEN .)
    SEMICOLON       reduce using rule 14 (predefined_functions -> OPEN .)
    COMMA           reduce using rule 14 (predefined_functions -> OPEN .)
    RIGHT_SQUARE_BRACKET reduce using rule 14 (predefined_functions -> OPEN .)
    RIGHT_PARENTHESIS reduce using rule 14 (predefined_functions -> OPEN .)
    RIGHT_CURLY_BRACKET reduce using rule 14 (predefined_functions -> OPEN .)
    COLON           reduce using rule 14 (predefined_functions -> OPEN .)


state 120

    (71) xor_expression -> and_expression .
    (70) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 71 (xor_expression -> and_expression .)
    OR              reduce using rule 71 (xor_expression -> and_expression .)
    AND_AND         reduce using rule 71 (xor_expression -> and_expression .)
    QUESTION_MARK   reduce using rule 71 (xor_expression -> and_expression .)
    OR_OR           reduce using rule 71 (xor_expression -> and_expression .)
    SEMICOLON       reduce using rule 71 (xor_expression -> and_expression .)
    COMMA           reduce using rule 71 (xor_expression -> and_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 71 (xor_expression -> and_expression .)
    RIGHT_PARENTHESIS reduce using rule 71 (xor_expression -> and_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 71 (xor_expression -> and_expression .)
    COLON           reduce using rule 71 (xor_expression -> and_expression .)
    AND             shift and go to state 219


state 121

    (69) and_expression -> equality_expression .
    (67) equality_expression -> equality_expression . EQUALS_EQUALS relational_expression
    (68) equality_expression -> equality_expression . NOT_EQUALS relational_expression

    AND             reduce using rule 69 (and_expression -> equality_expression .)
    XOR             reduce using rule 69 (and_expression -> equality_expression .)
    OR              reduce using rule 69 (and_expression -> equality_expression .)
    AND_AND         reduce using rule 69 (and_expression -> equality_expression .)
    QUESTION_MARK   reduce using rule 69 (and_expression -> equality_expression .)
    OR_OR           reduce using rule 69 (and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 69 (and_expression -> equality_expression .)
    COMMA           reduce using rule 69 (and_expression -> equality_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 69 (and_expression -> equality_expression .)
    RIGHT_PARENTHESIS reduce using rule 69 (and_expression -> equality_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 69 (and_expression -> equality_expression .)
    COLON           reduce using rule 69 (and_expression -> equality_expression .)
    EQUALS_EQUALS   shift and go to state 220
    NOT_EQUALS      shift and go to state 221


state 122

    (66) equality_expression -> relational_expression .
    (62) relational_expression -> relational_expression . LESS_THAN shift_expression
    (63) relational_expression -> relational_expression . GREATER_THAN shift_expression
    (64) relational_expression -> relational_expression . LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> relational_expression . GREATER_THAN_EQUALS shift_expression

    EQUALS_EQUALS   reduce using rule 66 (equality_expression -> relational_expression .)
    NOT_EQUALS      reduce using rule 66 (equality_expression -> relational_expression .)
    AND             reduce using rule 66 (equality_expression -> relational_expression .)
    XOR             reduce using rule 66 (equality_expression -> relational_expression .)
    OR              reduce using rule 66 (equality_expression -> relational_expression .)
    AND_AND         reduce using rule 66 (equality_expression -> relational_expression .)
    QUESTION_MARK   reduce using rule 66 (equality_expression -> relational_expression .)
    OR_OR           reduce using rule 66 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 66 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 66 (equality_expression -> relational_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 66 (equality_expression -> relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 66 (equality_expression -> relational_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 66 (equality_expression -> relational_expression .)
    COLON           reduce using rule 66 (equality_expression -> relational_expression .)
    LESS_THAN       shift and go to state 222
    GREATER_THAN    shift and go to state 223
    LESS_THAN_EQUALS shift and go to state 224
    GREATER_THAN_EQUALS shift and go to state 225


state 123

    (61) relational_expression -> shift_expression .
    (59) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (60) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS_THAN       reduce using rule 61 (relational_expression -> shift_expression .)
    GREATER_THAN    reduce using rule 61 (relational_expression -> shift_expression .)
    LESS_THAN_EQUALS reduce using rule 61 (relational_expression -> shift_expression .)
    GREATER_THAN_EQUALS reduce using rule 61 (relational_expression -> shift_expression .)
    EQUALS_EQUALS   reduce using rule 61 (relational_expression -> shift_expression .)
    NOT_EQUALS      reduce using rule 61 (relational_expression -> shift_expression .)
    AND             reduce using rule 61 (relational_expression -> shift_expression .)
    XOR             reduce using rule 61 (relational_expression -> shift_expression .)
    OR              reduce using rule 61 (relational_expression -> shift_expression .)
    AND_AND         reduce using rule 61 (relational_expression -> shift_expression .)
    QUESTION_MARK   reduce using rule 61 (relational_expression -> shift_expression .)
    OR_OR           reduce using rule 61 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 61 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 61 (relational_expression -> shift_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 61 (relational_expression -> shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 61 (relational_expression -> shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 61 (relational_expression -> shift_expression .)
    COLON           reduce using rule 61 (relational_expression -> shift_expression .)
    LEFT_SHIFT      shift and go to state 226
    RIGHT_SHIFT     shift and go to state 227


state 124

    (58) shift_expression -> additive_expression .
    (56) additive_expression -> additive_expression . PLUS multiplicative_expression
    (57) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_SHIFT      reduce using rule 58 (shift_expression -> additive_expression .)
    RIGHT_SHIFT     reduce using rule 58 (shift_expression -> additive_expression .)
    LESS_THAN       reduce using rule 58 (shift_expression -> additive_expression .)
    GREATER_THAN    reduce using rule 58 (shift_expression -> additive_expression .)
    LESS_THAN_EQUALS reduce using rule 58 (shift_expression -> additive_expression .)
    GREATER_THAN_EQUALS reduce using rule 58 (shift_expression -> additive_expression .)
    EQUALS_EQUALS   reduce using rule 58 (shift_expression -> additive_expression .)
    NOT_EQUALS      reduce using rule 58 (shift_expression -> additive_expression .)
    AND             reduce using rule 58 (shift_expression -> additive_expression .)
    XOR             reduce using rule 58 (shift_expression -> additive_expression .)
    OR              reduce using rule 58 (shift_expression -> additive_expression .)
    AND_AND         reduce using rule 58 (shift_expression -> additive_expression .)
    QUESTION_MARK   reduce using rule 58 (shift_expression -> additive_expression .)
    OR_OR           reduce using rule 58 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 58 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 58 (shift_expression -> additive_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 58 (shift_expression -> additive_expression .)
    RIGHT_PARENTHESIS reduce using rule 58 (shift_expression -> additive_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 58 (shift_expression -> additive_expression .)
    COLON           reduce using rule 58 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 228
    MINUS           shift and go to state 229


state 125

    (55) additive_expression -> multiplicative_expression .
    (52) multiplicative_expression -> multiplicative_expression . STAR cast_expression
    (53) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (54) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    PLUS            reduce using rule 55 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 55 (additive_expression -> multiplicative_expression .)
    LEFT_SHIFT      reduce using rule 55 (additive_expression -> multiplicative_expression .)
    RIGHT_SHIFT     reduce using rule 55 (additive_expression -> multiplicative_expression .)
    LESS_THAN       reduce using rule 55 (additive_expression -> multiplicative_expression .)
    GREATER_THAN    reduce using rule 55 (additive_expression -> multiplicative_expression .)
    LESS_THAN_EQUALS reduce using rule 55 (additive_expression -> multiplicative_expression .)
    GREATER_THAN_EQUALS reduce using rule 55 (additive_expression -> multiplicative_expression .)
    EQUALS_EQUALS   reduce using rule 55 (additive_expression -> multiplicative_expression .)
    NOT_EQUALS      reduce using rule 55 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 55 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 55 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 55 (additive_expression -> multiplicative_expression .)
    AND_AND         reduce using rule 55 (additive_expression -> multiplicative_expression .)
    QUESTION_MARK   reduce using rule 55 (additive_expression -> multiplicative_expression .)
    OR_OR           reduce using rule 55 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 55 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 55 (additive_expression -> multiplicative_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 55 (additive_expression -> multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 55 (additive_expression -> multiplicative_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 55 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 55 (additive_expression -> multiplicative_expression .)
    STAR            shift and go to state 230
    DIVIDE          shift and go to state 231
    MODULUS         shift and go to state 232


state 126

    (101) init_declarator -> declarator . EQUALS initializer
    (102) init_declarator -> declarator .

    EQUALS          shift and go to state 51
    SEMICOLON       reduce using rule 102 (init_declarator -> declarator .)
    COMMA           reduce using rule 102 (init_declarator -> declarator .)


state 127

    (150) class_head -> CLASS IDENTIFIER base_clause .

    LEFT_CURLY_BRACKET reduce using rule 150 (class_head -> CLASS IDENTIFIER base_clause .)


state 128

    (170) base_clause -> COLON base_specifier_list .
    (172) base_specifier_list -> base_specifier_list . COMMA base_specifier

    LEFT_CURLY_BRACKET reduce using rule 170 (base_clause -> COLON base_specifier_list .)
    COMMA           shift and go to state 233


state 129

    (171) base_specifier_list -> base_specifier .

    COMMA           reduce using rule 171 (base_specifier_list -> base_specifier .)
    LEFT_CURLY_BRACKET reduce using rule 171 (base_specifier_list -> base_specifier .)


state 130

    (173) base_specifier -> CLASS . IDENTIFIER

    IDENTIFIER      shift and go to state 234


state 131

    (175) base_specifier -> IDENTIFIER .

    COMMA           reduce using rule 175 (base_specifier -> IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 175 (base_specifier -> IDENTIFIER .)


state 132

    (174) base_specifier -> access_specifier . CLASS IDENTIFIER
    (176) base_specifier -> access_specifier . IDENTIFIER

    CLASS           shift and go to state 235
    IDENTIFIER      shift and go to state 236


state 133

    (177) access_specifier -> PRIVATE .

    CLASS           reduce using rule 177 (access_specifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 177 (access_specifier -> PRIVATE .)
    COLON           reduce using rule 177 (access_specifier -> PRIVATE .)


state 134

    (178) access_specifier -> PUBLIC .

    CLASS           reduce using rule 178 (access_specifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 178 (access_specifier -> PUBLIC .)
    COLON           reduce using rule 178 (access_specifier -> PUBLIC .)


state 135

    (123) direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET shift and go to state 237


state 136

    (124) direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    VOID            reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    CHAR            reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    INT             reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    FLOAT           reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    DOUBLE          reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    STRING          reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    BOOL            reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    LONG_LONG_INT   reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    UNSIGNED_INT    reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    CLASS           reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    STRUCT          reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    EQUALS          reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    COLON           reduce using rule 124 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)


state 137

    (49) cast_expression -> unary_expression .

    STAR            reduce using rule 49 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 49 (cast_expression -> unary_expression .)
    MODULUS         reduce using rule 49 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 49 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 49 (cast_expression -> unary_expression .)
    LEFT_SHIFT      reduce using rule 49 (cast_expression -> unary_expression .)
    RIGHT_SHIFT     reduce using rule 49 (cast_expression -> unary_expression .)
    LESS_THAN       reduce using rule 49 (cast_expression -> unary_expression .)
    GREATER_THAN    reduce using rule 49 (cast_expression -> unary_expression .)
    LESS_THAN_EQUALS reduce using rule 49 (cast_expression -> unary_expression .)
    GREATER_THAN_EQUALS reduce using rule 49 (cast_expression -> unary_expression .)
    EQUALS_EQUALS   reduce using rule 49 (cast_expression -> unary_expression .)
    NOT_EQUALS      reduce using rule 49 (cast_expression -> unary_expression .)
    AND             reduce using rule 49 (cast_expression -> unary_expression .)
    XOR             reduce using rule 49 (cast_expression -> unary_expression .)
    OR              reduce using rule 49 (cast_expression -> unary_expression .)
    AND_AND         reduce using rule 49 (cast_expression -> unary_expression .)
    QUESTION_MARK   reduce using rule 49 (cast_expression -> unary_expression .)
    OR_OR           reduce using rule 49 (cast_expression -> unary_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 49 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 49 (cast_expression -> unary_expression .)
    DIVIDE_EQUALS   reduce using rule 49 (cast_expression -> unary_expression .)
    MULTIPLY_EQUALS reduce using rule 49 (cast_expression -> unary_expression .)
    MODULUS_EQUALS  reduce using rule 49 (cast_expression -> unary_expression .)
    PLUS_EQUALS     reduce using rule 49 (cast_expression -> unary_expression .)
    MINUS_EQUALS    reduce using rule 49 (cast_expression -> unary_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 49 (cast_expression -> unary_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 49 (cast_expression -> unary_expression .)
    AND_EQUALS      reduce using rule 49 (cast_expression -> unary_expression .)
    OR_EQUALS       reduce using rule 49 (cast_expression -> unary_expression .)
    XOR_EQUALS      reduce using rule 49 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 49 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 49 (cast_expression -> unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 49 (cast_expression -> unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 49 (cast_expression -> unary_expression .)
    COLON           reduce using rule 49 (cast_expression -> unary_expression .)


state 138

    (50) cast_expression -> LEFT_PARENTHESIS . type_specifier RIGHT_PARENTHESIS cast_expression
    (18) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 146
    STRUCT          shift and go to state 24
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    type_specifier                 shift and go to state 182
    cast_expression                shift and go to state 85
    expression                     shift and go to state 181
    struct_specifier               shift and go to state 18
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 139

    (15) primary_expression -> IDENTIFIER .

    LEFT_SQUARE_BRACKET reduce using rule 15 (primary_expression -> IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 15 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 15 (primary_expression -> IDENTIFIER .)
    ARROW           reduce using rule 15 (primary_expression -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 15 (primary_expression -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 15 (primary_expression -> IDENTIFIER .)
    STAR            reduce using rule 15 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 15 (primary_expression -> IDENTIFIER .)
    MODULUS         reduce using rule 15 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 15 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 15 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 15 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 15 (primary_expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 15 (primary_expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 15 (primary_expression -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 15 (primary_expression -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 15 (primary_expression -> IDENTIFIER .)
    EQUALS_EQUALS   reduce using rule 15 (primary_expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 15 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 15 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 15 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 15 (primary_expression -> IDENTIFIER .)
    AND_AND         reduce using rule 15 (primary_expression -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 15 (primary_expression -> IDENTIFIER .)
    OR_OR           reduce using rule 15 (primary_expression -> IDENTIFIER .)
    RIGHT_SQUARE_BRACKET reduce using rule 15 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 15 (primary_expression -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 15 (primary_expression -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 15 (primary_expression -> IDENTIFIER .)
    MODULUS_EQUALS  reduce using rule 15 (primary_expression -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 15 (primary_expression -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 15 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 15 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 15 (primary_expression -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 15 (primary_expression -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 15 (primary_expression -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 15 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 15 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 15 (primary_expression -> IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 15 (primary_expression -> IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 15 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 15 (primary_expression -> IDENTIFIER .)


state 140

    (125) direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list . RIGHT_PARENTHESIS
    (131) parameter_list -> parameter_list . COMMA parameter_declaration

    RIGHT_PARENTHESIS shift and go to state 238
    COMMA           shift and go to state 239


state 141

    (127) direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_CURLY_BRACKET reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    VOID            reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    CHAR            reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    INT             reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DOUBLE          reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    STRING          reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LONG_LONG_INT   reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    UNSIGNED_INT    reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    CLASS           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    STRUCT          reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COLON           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 142

    (126) direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list . RIGHT_PARENTHESIS
    (117) identifier_list -> identifier_list . COMMA IDENTIFIER

    RIGHT_PARENTHESIS shift and go to state 240
    COMMA           shift and go to state 241


state 143

    (130) parameter_list -> parameter_declaration .

    RIGHT_PARENTHESIS reduce using rule 130 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 130 (parameter_list -> parameter_declaration .)


state 144

    (116) identifier_list -> IDENTIFIER .

    RIGHT_PARENTHESIS reduce using rule 116 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 116 (identifier_list -> IDENTIFIER .)


state 145

    (132) parameter_declaration -> type_specifier . declarator
    (133) parameter_declaration -> type_specifier . abstract_declarator
    (134) parameter_declaration -> type_specifier .
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (179) abstract_declarator -> . pointer
    (180) abstract_declarator -> . direct_abstract_declarator
    (181) abstract_declarator -> . pointer direct_abstract_declarator
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (182) direct_abstract_declarator -> . LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS
    (183) direct_abstract_declarator -> . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (184) direct_abstract_declarator -> . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (185) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (186) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (187) direct_abstract_declarator -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (188) direct_abstract_declarator -> . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (189) direct_abstract_declarator -> . direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (190) direct_abstract_declarator -> . direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS reduce using rule 134 (parameter_declaration -> type_specifier .)
    COMMA           reduce using rule 134 (parameter_declaration -> type_specifier .)
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 246
    LEFT_SQUARE_BRACKET shift and go to state 247

    declarator                     shift and go to state 242
    abstract_declarator            shift and go to state 243
    pointer                        shift and go to state 244
    direct_declarator              shift and go to state 22
    direct_abstract_declarator     shift and go to state 245

state 146

    (113) type_specifier -> CLASS . IDENTIFIER

    IDENTIFIER      shift and go to state 248


state 147

    (152) class_specifier -> class_head LEFT_CURLY_BRACKET member_list . RIGHT_CURLY_BRACKET SEMICOLON
    (156) member_list -> member_list . access_list
    (166) access_list -> . access_specifier COLON member_access_list
    (167) access_list -> . access_specifier COLON
    (177) access_specifier -> . PRIVATE
    (178) access_specifier -> . PUBLIC

    RIGHT_CURLY_BRACKET shift and go to state 249
    PRIVATE         shift and go to state 133
    PUBLIC          shift and go to state 134

    access_list                    shift and go to state 250
    access_specifier               shift and go to state 153

state 148

    (153) class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 251


state 149

    (163) member_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 163 (member_declaration -> SEMICOLON .)
    VOID            reduce using rule 163 (member_declaration -> SEMICOLON .)
    CHAR            reduce using rule 163 (member_declaration -> SEMICOLON .)
    INT             reduce using rule 163 (member_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 163 (member_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 163 (member_declaration -> SEMICOLON .)
    STRING          reduce using rule 163 (member_declaration -> SEMICOLON .)
    BOOL            reduce using rule 163 (member_declaration -> SEMICOLON .)
    LONG_LONG_INT   reduce using rule 163 (member_declaration -> SEMICOLON .)
    UNSIGNED_INT    reduce using rule 163 (member_declaration -> SEMICOLON .)
    CLASS           reduce using rule 163 (member_declaration -> SEMICOLON .)
    STRUCT          reduce using rule 163 (member_declaration -> SEMICOLON .)
    STAR            reduce using rule 163 (member_declaration -> SEMICOLON .)
    IDENTIFIER      reduce using rule 163 (member_declaration -> SEMICOLON .)
    MAIN            reduce using rule 163 (member_declaration -> SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 163 (member_declaration -> SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 163 (member_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 163 (member_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 163 (member_declaration -> SEMICOLON .)


state 150

    (154) member_list -> member_access_list .

    RIGHT_CURLY_BRACKET reduce using rule 154 (member_list -> member_access_list .)
    PRIVATE         reduce using rule 154 (member_list -> member_access_list .)
    PUBLIC          reduce using rule 154 (member_list -> member_access_list .)


state 151

    (155) member_list -> access_list .

    RIGHT_CURLY_BRACKET reduce using rule 155 (member_list -> access_list .)
    PRIVATE         reduce using rule 155 (member_list -> access_list .)
    PUBLIC          reduce using rule 155 (member_list -> access_list .)


state 152

    (168) member_access_list -> member_declaration . member_access_list
    (169) member_access_list -> member_declaration .
    (168) member_access_list -> . member_declaration member_access_list
    (169) member_access_list -> . member_declaration
    (160) member_declaration -> . type_specifier member_declarator_list SEMICOLON
    (161) member_declaration -> . member_declarator_list SEMICOLON
    (162) member_declaration -> . type_specifier SEMICOLON
    (163) member_declaration -> . SEMICOLON
    (164) member_declaration -> . function_definition
    (165) member_declaration -> . class_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (158) member_declarator_list -> . member_declarator
    (159) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (228) function_definition -> . type_specifier declarator declaration_list compound_statement
    (229) function_definition -> . type_specifier declarator compound_statement
    (230) function_definition -> . declarator declaration_list compound_statement
    (231) function_definition -> . declarator compound_statement
    (152) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (157) member_declarator -> . init_declarator
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (148) class_head -> . CLASS base_clause
    (149) class_head -> . CLASS
    (150) class_head -> . CLASS IDENTIFIER base_clause
    (151) class_head -> . CLASS IDENTIFIER
    (101) init_declarator -> . declarator EQUALS initializer
    (102) init_declarator -> . declarator
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    RIGHT_CURLY_BRACKET reduce using rule 169 (member_access_list -> member_declaration .)
    PRIVATE         reduce using rule 169 (member_access_list -> member_declaration .)
    PUBLIC          reduce using rule 169 (member_access_list -> member_declaration .)
    SEMICOLON       shift and go to state 149
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    member_declaration             shift and go to state 152
    member_access_list             shift and go to state 252
    type_specifier                 shift and go to state 154
    member_declarator_list         shift and go to state 155
    function_definition            shift and go to state 156
    class_specifier                shift and go to state 157
    struct_specifier               shift and go to state 18
    member_declarator              shift and go to state 158
    declarator                     shift and go to state 159
    class_head                     shift and go to state 23
    init_declarator                shift and go to state 160
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 153

    (166) access_list -> access_specifier . COLON member_access_list
    (167) access_list -> access_specifier . COLON

    COLON           shift and go to state 253


state 154

    (160) member_declaration -> type_specifier . member_declarator_list SEMICOLON
    (162) member_declaration -> type_specifier . SEMICOLON
    (228) function_definition -> type_specifier . declarator declaration_list compound_statement
    (229) function_definition -> type_specifier . declarator compound_statement
    (158) member_declarator_list -> . member_declarator
    (159) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (157) member_declarator -> . init_declarator
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (101) init_declarator -> . declarator EQUALS initializer
    (102) init_declarator -> . declarator

    SEMICOLON       shift and go to state 255
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    member_declarator_list         shift and go to state 254
    declarator                     shift and go to state 29
    member_declarator              shift and go to state 158
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22
    init_declarator                shift and go to state 160

state 155

    (161) member_declaration -> member_declarator_list . SEMICOLON
    (159) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 256
    COMMA           shift and go to state 257


state 156

    (164) member_declaration -> function_definition .

    SEMICOLON       reduce using rule 164 (member_declaration -> function_definition .)
    VOID            reduce using rule 164 (member_declaration -> function_definition .)
    CHAR            reduce using rule 164 (member_declaration -> function_definition .)
    INT             reduce using rule 164 (member_declaration -> function_definition .)
    FLOAT           reduce using rule 164 (member_declaration -> function_definition .)
    DOUBLE          reduce using rule 164 (member_declaration -> function_definition .)
    STRING          reduce using rule 164 (member_declaration -> function_definition .)
    BOOL            reduce using rule 164 (member_declaration -> function_definition .)
    LONG_LONG_INT   reduce using rule 164 (member_declaration -> function_definition .)
    UNSIGNED_INT    reduce using rule 164 (member_declaration -> function_definition .)
    CLASS           reduce using rule 164 (member_declaration -> function_definition .)
    STRUCT          reduce using rule 164 (member_declaration -> function_definition .)
    STAR            reduce using rule 164 (member_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 164 (member_declaration -> function_definition .)
    MAIN            reduce using rule 164 (member_declaration -> function_definition .)
    LEFT_PARENTHESIS reduce using rule 164 (member_declaration -> function_definition .)
    RIGHT_CURLY_BRACKET reduce using rule 164 (member_declaration -> function_definition .)
    PRIVATE         reduce using rule 164 (member_declaration -> function_definition .)
    PUBLIC          reduce using rule 164 (member_declaration -> function_definition .)


state 157

    (165) member_declaration -> class_specifier .

    SEMICOLON       reduce using rule 165 (member_declaration -> class_specifier .)
    VOID            reduce using rule 165 (member_declaration -> class_specifier .)
    CHAR            reduce using rule 165 (member_declaration -> class_specifier .)
    INT             reduce using rule 165 (member_declaration -> class_specifier .)
    FLOAT           reduce using rule 165 (member_declaration -> class_specifier .)
    DOUBLE          reduce using rule 165 (member_declaration -> class_specifier .)
    STRING          reduce using rule 165 (member_declaration -> class_specifier .)
    BOOL            reduce using rule 165 (member_declaration -> class_specifier .)
    LONG_LONG_INT   reduce using rule 165 (member_declaration -> class_specifier .)
    UNSIGNED_INT    reduce using rule 165 (member_declaration -> class_specifier .)
    CLASS           reduce using rule 165 (member_declaration -> class_specifier .)
    STRUCT          reduce using rule 165 (member_declaration -> class_specifier .)
    STAR            reduce using rule 165 (member_declaration -> class_specifier .)
    IDENTIFIER      reduce using rule 165 (member_declaration -> class_specifier .)
    MAIN            reduce using rule 165 (member_declaration -> class_specifier .)
    LEFT_PARENTHESIS reduce using rule 165 (member_declaration -> class_specifier .)
    RIGHT_CURLY_BRACKET reduce using rule 165 (member_declaration -> class_specifier .)
    PRIVATE         reduce using rule 165 (member_declaration -> class_specifier .)
    PUBLIC          reduce using rule 165 (member_declaration -> class_specifier .)


state 158

    (158) member_declarator_list -> member_declarator .

    SEMICOLON       reduce using rule 158 (member_declarator_list -> member_declarator .)
    COMMA           reduce using rule 158 (member_declarator_list -> member_declarator .)


state 159

    (230) function_definition -> declarator . declaration_list compound_statement
    (231) function_definition -> declarator . compound_statement
    (101) init_declarator -> declarator . EQUALS initializer
    (102) init_declarator -> declarator .
    (206) declaration_list -> . declaration_list declaration
    (207) declaration_list -> . declaration
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (96) declaration -> . type_specifier SEMICOLON
    (97) declaration -> . type_specifier init_declarators_list SEMICOLON
    (98) declaration -> . class_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (152) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (148) class_head -> . CLASS base_clause
    (149) class_head -> . CLASS
    (150) class_head -> . CLASS IDENTIFIER base_clause
    (151) class_head -> . CLASS IDENTIFIER

    EQUALS          shift and go to state 51
    SEMICOLON       reduce using rule 102 (init_declarator -> declarator .)
    COMMA           reduce using rule 102 (init_declarator -> declarator .)
    LEFT_CURLY_BRACKET shift and go to state 36
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24

    declaration_list               shift and go to state 33
    compound_statement             shift and go to state 34
    declaration                    shift and go to state 35
    type_specifier                 shift and go to state 37
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23

state 160

    (157) member_declarator -> init_declarator .

    SEMICOLON       reduce using rule 157 (member_declarator -> init_declarator .)
    COMMA           reduce using rule 157 (member_declarator -> init_declarator .)


state 161

    (135) struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET . struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET . RIGHT_CURLY_BRACKET
    (146) struct_declaration_list -> . struct_declaration
    (147) struct_declaration_list -> . struct_declaration_list struct_declaration
    (145) struct_declaration -> . specifier_list struct_declarator_list SEMICOLON
    (118) specifier_list -> . type_specifier specifier_list
    (119) specifier_list -> . type_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_CURLY_BRACKET shift and go to state 259
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 146
    STRUCT          shift and go to state 24

    struct_declaration_list        shift and go to state 258
    struct_declaration             shift and go to state 164
    specifier_list                 shift and go to state 165
    type_specifier                 shift and go to state 166
    struct_specifier               shift and go to state 18

state 162

    (136) struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list . RIGHT_CURLY_BRACKET
    (147) struct_declaration_list -> struct_declaration_list . struct_declaration
    (145) struct_declaration -> . specifier_list struct_declarator_list SEMICOLON
    (118) specifier_list -> . type_specifier specifier_list
    (119) specifier_list -> . type_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_CURLY_BRACKET shift and go to state 260
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 146
    STRUCT          shift and go to state 24

    struct_declaration             shift and go to state 261
    specifier_list                 shift and go to state 165
    type_specifier                 shift and go to state 166
    struct_specifier               shift and go to state 18

state 163

    (138) struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .

    SEMICOLON       reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_SQUARE_BRACKET reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    VOID            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)


state 164

    (146) struct_declaration_list -> struct_declaration .

    RIGHT_CURLY_BRACKET reduce using rule 146 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 146 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 146 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 146 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 146 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 146 (struct_declaration_list -> struct_declaration .)
    STRING          reduce using rule 146 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 146 (struct_declaration_list -> struct_declaration .)
    LONG_LONG_INT   reduce using rule 146 (struct_declaration_list -> struct_declaration .)
    UNSIGNED_INT    reduce using rule 146 (struct_declaration_list -> struct_declaration .)
    CLASS           reduce using rule 146 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 146 (struct_declaration_list -> struct_declaration .)


state 165

    (145) struct_declaration -> specifier_list . struct_declarator_list SEMICOLON
    (143) struct_declarator_list -> . struct_declarator
    (144) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (140) struct_declarator -> . declarator
    (141) struct_declarator -> . COLON conditional_expression
    (142) struct_declarator -> . declarator COLON conditional_expression
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    COLON           shift and go to state 265
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    struct_declarator_list         shift and go to state 262
    struct_declarator              shift and go to state 263
    declarator                     shift and go to state 264
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 166

    (118) specifier_list -> type_specifier . specifier_list
    (119) specifier_list -> type_specifier .
    (118) specifier_list -> . type_specifier specifier_list
    (119) specifier_list -> . type_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER

    COLON           reduce using rule 119 (specifier_list -> type_specifier .)
    STAR            reduce using rule 119 (specifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 119 (specifier_list -> type_specifier .)
    MAIN            reduce using rule 119 (specifier_list -> type_specifier .)
    LEFT_PARENTHESIS reduce using rule 119 (specifier_list -> type_specifier .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 146
    STRUCT          shift and go to state 24

    type_specifier                 shift and go to state 166
    specifier_list                 shift and go to state 266
    struct_specifier               shift and go to state 18

state 167

    (122) direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    LEFT_CURLY_BRACKET reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    VOID            reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    CHAR            reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    INT             reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    DOUBLE          reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    STRING          reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    LONG_LONG_INT   reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    UNSIGNED_INT    reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    CLASS           reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    STRUCT          reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    COLON           reduce using rule 122 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)


state 168

    (228) function_definition -> type_specifier declarator declaration_list compound_statement .

    VOID            reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    CHAR            reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    INT             reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    STRING          reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    BOOL            reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    LONG_LONG_INT   reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    UNSIGNED_INT    reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    CLASS           reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    STAR            reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    MAIN            reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    LEFT_PARENTHESIS reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    $end            reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    SEMICOLON       reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    RIGHT_CURLY_BRACKET reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    PRIVATE         reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    PUBLIC          reduce using rule 228 (function_definition -> type_specifier declarator declaration_list compound_statement .)


state 169

    (101) init_declarator -> declarator EQUALS initializer .

    SEMICOLON       reduce using rule 101 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 101 (init_declarator -> declarator EQUALS initializer .)


state 170

    (191) initializer -> LEFT_CURLY_BRACKET . initializer_list RIGHT_CURLY_BRACKET
    (193) initializer_list -> . initializer_list COMMA initializer
    (194) initializer_list -> . initializer
    (191) initializer -> . LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET
    (192) initializer -> . assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    LEFT_CURLY_BRACKET shift and go to state 170
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    initializer_list               shift and go to state 267
    initializer                    shift and go to state 268
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 171

    (192) initializer -> assignment_expression .

    SEMICOLON       reduce using rule 192 (initializer -> assignment_expression .)
    COMMA           reduce using rule 192 (initializer -> assignment_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 192 (initializer -> assignment_expression .)


state 172

    (100) init_declarators_list -> init_declarators_list COMMA init_declarator .

    SEMICOLON       reduce using rule 100 (init_declarators_list -> init_declarators_list COMMA init_declarator .)
    COMMA           reduce using rule 100 (init_declarators_list -> init_declarators_list COMMA init_declarator .)


state 173

    (202) compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list . RIGHT_CURLY_BRACKET
    (209) statement_list -> statement_list . statement
    (195) statement -> . compound_statement
    (196) statement -> . expression_statement
    (197) statement -> . selection_statement
    (198) statement -> . iteration_statement
    (199) statement -> . jump_statement
    (200) statement -> . labeled_statement
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (210) expression_statement -> . expression SEMICOLON
    (211) expression_statement -> . SEMICOLON
    (212) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (213) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (214) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (215) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (216) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (217) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (219) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) jump_statement -> . BREAK SEMICOLON
    (221) jump_statement -> . CONTINUE SEMICOLON
    (222) jump_statement -> . RETURN SEMICOLON
    (223) jump_statement -> . RETURN expression SEMICOLON
    (201) labeled_statement -> . IDENTIFIER COLON statement
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_CURLY_BRACKET shift and go to state 269
    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    WHILE           shift and go to state 71
    FOR             shift and go to state 72
    GOTO            shift and go to state 73
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 75
    RETURN          shift and go to state 76
    IDENTIFIER      shift and go to state 67
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    statement                      shift and go to state 176
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 174

    (203) compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .

    VOID            reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    PRIVATE         reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    PUBLIC          reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    GOTO            reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 203 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)


state 175

    (204) compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .

    VOID            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    PRIVATE         reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    PUBLIC          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    GOTO            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)


state 176

    (209) statement_list -> statement_list statement .

    RIGHT_CURLY_BRACKET reduce using rule 209 (statement_list -> statement_list statement .)
    LEFT_CURLY_BRACKET reduce using rule 209 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 209 (statement_list -> statement_list statement .)
    IF              reduce using rule 209 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 209 (statement_list -> statement_list statement .)
    FOR             reduce using rule 209 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 209 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 209 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 209 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 209 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 209 (statement_list -> statement_list statement .)
    PLUS_PLUS       reduce using rule 209 (statement_list -> statement_list statement .)
    MINUS_MINUS     reduce using rule 209 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 209 (statement_list -> statement_list statement .)
    AND             reduce using rule 209 (statement_list -> statement_list statement .)
    STAR            reduce using rule 209 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 209 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 209 (statement_list -> statement_list statement .)
    NOT             reduce using rule 209 (statement_list -> statement_list statement .)
    TILDE           reduce using rule 209 (statement_list -> statement_list statement .)
    LEFT_PARENTHESIS reduce using rule 209 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 209 (statement_list -> statement_list statement .)
    DECIMAL_NUMBER  reduce using rule 209 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 209 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 209 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 209 (statement_list -> statement_list statement .)
    NULL            reduce using rule 209 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 209 (statement_list -> statement_list statement .)
    INPUT           reduce using rule 209 (statement_list -> statement_list statement .)
    OUTPUT          reduce using rule 209 (statement_list -> statement_list statement .)
    SQUARE_ROOT     reduce using rule 209 (statement_list -> statement_list statement .)
    SIN             reduce using rule 209 (statement_list -> statement_list statement .)
    COS             reduce using rule 209 (statement_list -> statement_list statement .)
    TAN             reduce using rule 209 (statement_list -> statement_list statement .)
    STRING_COPY     reduce using rule 209 (statement_list -> statement_list statement .)
    STRING_REVERSE  reduce using rule 209 (statement_list -> statement_list statement .)
    STRING_LENGTH   reduce using rule 209 (statement_list -> statement_list statement .)
    STRING_COMPARE  reduce using rule 209 (statement_list -> statement_list statement .)
    WRITE           reduce using rule 209 (statement_list -> statement_list statement .)
    READ            reduce using rule 209 (statement_list -> statement_list statement .)
    OPEN            reduce using rule 209 (statement_list -> statement_list statement .)


state 177

    (201) labeled_statement -> IDENTIFIER COLON . statement
    (195) statement -> . compound_statement
    (196) statement -> . expression_statement
    (197) statement -> . selection_statement
    (198) statement -> . iteration_statement
    (199) statement -> . jump_statement
    (200) statement -> . labeled_statement
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (210) expression_statement -> . expression SEMICOLON
    (211) expression_statement -> . SEMICOLON
    (212) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (213) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (214) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (215) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (216) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (217) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (219) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) jump_statement -> . BREAK SEMICOLON
    (221) jump_statement -> . CONTINUE SEMICOLON
    (222) jump_statement -> . RETURN SEMICOLON
    (223) jump_statement -> . RETURN expression SEMICOLON
    (201) labeled_statement -> . IDENTIFIER COLON statement
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    WHILE           shift and go to state 71
    FOR             shift and go to state 72
    GOTO            shift and go to state 73
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 75
    RETURN          shift and go to state 76
    IDENTIFIER      shift and go to state 67
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    statement                      shift and go to state 270
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 178

    (210) expression_statement -> expression SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    AND             reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    STAR            reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    NOT             reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    TILDE           reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    TRUE            reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    FALSE           reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    NULL            reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    INPUT           reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    OUTPUT          reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    SQUARE_ROOT     reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    SIN             reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    COS             reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    TAN             reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    STRING_COPY     reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    STRING_REVERSE  reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    STRING_LENGTH   reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    STRING_COMPARE  reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    WRITE           reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    READ            reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    OPEN            reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 210 (expression_statement -> expression SEMICOLON .)
    RIGHT_PARENTHESIS reduce using rule 210 (expression_statement -> expression SEMICOLON .)


state 179

    (95) expression -> expression COMMA . assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    assignment_expression          shift and go to state 271
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 180

    (212) selection_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement
    (213) selection_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement ELSE statement
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    expression                     shift and go to state 272
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 181

    (18) primary_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (95) expression -> expression . COMMA assignment_expression

    RIGHT_PARENTHESIS shift and go to state 273
    COMMA           shift and go to state 179


state 182

    (50) cast_expression -> LEFT_PARENTHESIS type_specifier . RIGHT_PARENTHESIS cast_expression

    RIGHT_PARENTHESIS shift and go to state 274


state 183

    (214) iteration_statement -> WHILE LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS compound_statement
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    expression                     shift and go to state 275
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 184

    (215) iteration_statement -> FOR LEFT_PARENTHESIS . expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (216) iteration_statement -> FOR LEFT_PARENTHESIS . type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (217) iteration_statement -> FOR LEFT_PARENTHESIS . expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> FOR LEFT_PARENTHESIS . type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (210) expression_statement -> . expression SEMICOLON
    (211) expression_statement -> . SEMICOLON
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    SEMICOLON       shift and go to state 60
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 146
    STRUCT          shift and go to state 24
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    expression_statement           shift and go to state 276
    expression                     shift and go to state 68
    type_specifier                 shift and go to state 277
    struct_specifier               shift and go to state 18
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 185

    (219) jump_statement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 278


state 186

    (220) jump_statement -> BREAK SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    PLUS_PLUS       reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    MINUS_MINUS     reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    AND             reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    STAR            reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    TILDE           reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    NULL            reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    STRING_LITERAL  reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    INPUT           reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    OUTPUT          reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    SQUARE_ROOT     reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    SIN             reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    COS             reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    TAN             reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    STRING_COPY     reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    STRING_REVERSE  reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    STRING_LENGTH   reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    STRING_COMPARE  reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    WRITE           reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    READ            reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    OPEN            reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 220 (jump_statement -> BREAK SEMICOLON .)


state 187

    (221) jump_statement -> CONTINUE SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS_PLUS       reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS_MINUS     reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    AND             reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    STAR            reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    TILDE           reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    NULL            reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_LITERAL  reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    INPUT           reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    OUTPUT          reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    SQUARE_ROOT     reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    SIN             reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    COS             reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    TAN             reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_COPY     reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_REVERSE  reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_LENGTH   reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_COMPARE  reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    WRITE           reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    READ            reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    OPEN            reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 221 (jump_statement -> CONTINUE SEMICOLON .)


state 188

    (222) jump_statement -> RETURN SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    PLUS_PLUS       reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    MINUS_MINUS     reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    AND             reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    STAR            reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    NOT             reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    TILDE           reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    NULL            reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    STRING_LITERAL  reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    INPUT           reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    OUTPUT          reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    SQUARE_ROOT     reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    SIN             reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    COS             reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    TAN             reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    STRING_COPY     reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    STRING_REVERSE  reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    STRING_LENGTH   reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    STRING_COMPARE  reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    WRITE           reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    READ            reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    OPEN            reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 222 (jump_statement -> RETURN SEMICOLON .)


state 189

    (223) jump_statement -> RETURN expression . SEMICOLON
    (95) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 279
    COMMA           shift and go to state 179


state 190

    (82) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    unary_expression               shift and go to state 79
    assignment_expression          shift and go to state 280
    conditional_expression         shift and go to state 78
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 191

    (83) assignment_operator -> EQUALS .

    PLUS_PLUS       reduce using rule 83 (assignment_operator -> EQUALS .)
    MINUS_MINUS     reduce using rule 83 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 83 (assignment_operator -> EQUALS .)
    AND             reduce using rule 83 (assignment_operator -> EQUALS .)
    STAR            reduce using rule 83 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 83 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 83 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 83 (assignment_operator -> EQUALS .)
    TILDE           reduce using rule 83 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 83 (assignment_operator -> EQUALS .)
    LEFT_PARENTHESIS reduce using rule 83 (assignment_operator -> EQUALS .)
    NUMBER          reduce using rule 83 (assignment_operator -> EQUALS .)
    DECIMAL_NUMBER  reduce using rule 83 (assignment_operator -> EQUALS .)
    CHARACTER       reduce using rule 83 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 83 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 83 (assignment_operator -> EQUALS .)
    NULL            reduce using rule 83 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 83 (assignment_operator -> EQUALS .)
    INPUT           reduce using rule 83 (assignment_operator -> EQUALS .)
    OUTPUT          reduce using rule 83 (assignment_operator -> EQUALS .)
    SQUARE_ROOT     reduce using rule 83 (assignment_operator -> EQUALS .)
    SIN             reduce using rule 83 (assignment_operator -> EQUALS .)
    COS             reduce using rule 83 (assignment_operator -> EQUALS .)
    TAN             reduce using rule 83 (assignment_operator -> EQUALS .)
    STRING_COPY     reduce using rule 83 (assignment_operator -> EQUALS .)
    STRING_REVERSE  reduce using rule 83 (assignment_operator -> EQUALS .)
    STRING_LENGTH   reduce using rule 83 (assignment_operator -> EQUALS .)
    STRING_COMPARE  reduce using rule 83 (assignment_operator -> EQUALS .)
    WRITE           reduce using rule 83 (assignment_operator -> EQUALS .)
    READ            reduce using rule 83 (assignment_operator -> EQUALS .)
    OPEN            reduce using rule 83 (assignment_operator -> EQUALS .)


state 192

    (84) assignment_operator -> DIVIDE_EQUALS .

    PLUS_PLUS       reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    MINUS_MINUS     reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    SIZEOF          reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    AND             reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    STAR            reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    PLUS            reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    MINUS           reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    NOT             reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    TILDE           reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    IDENTIFIER      reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    NUMBER          reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    CHARACTER       reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    TRUE            reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    FALSE           reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    NULL            reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    STRING_LITERAL  reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    INPUT           reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    OUTPUT          reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    SQUARE_ROOT     reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    SIN             reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    COS             reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    TAN             reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    STRING_COPY     reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    STRING_REVERSE  reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    STRING_LENGTH   reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    STRING_COMPARE  reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    WRITE           reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    READ            reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)
    OPEN            reduce using rule 84 (assignment_operator -> DIVIDE_EQUALS .)


state 193

    (85) assignment_operator -> MULTIPLY_EQUALS .

    PLUS_PLUS       reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    MINUS_MINUS     reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    SIZEOF          reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    AND             reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    STAR            reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    PLUS            reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    MINUS           reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    NOT             reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    TILDE           reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    IDENTIFIER      reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    NUMBER          reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    CHARACTER       reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    TRUE            reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    FALSE           reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    NULL            reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    STRING_LITERAL  reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    INPUT           reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    OUTPUT          reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    SQUARE_ROOT     reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    SIN             reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    COS             reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    TAN             reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    STRING_COPY     reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    STRING_REVERSE  reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    STRING_LENGTH   reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    STRING_COMPARE  reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    WRITE           reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    READ            reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)
    OPEN            reduce using rule 85 (assignment_operator -> MULTIPLY_EQUALS .)


state 194

    (86) assignment_operator -> MODULUS_EQUALS .

    PLUS_PLUS       reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    MINUS_MINUS     reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    SIZEOF          reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    AND             reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    STAR            reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    PLUS            reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    MINUS           reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    NOT             reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    TILDE           reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    IDENTIFIER      reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    NUMBER          reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    CHARACTER       reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    TRUE            reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    FALSE           reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    NULL            reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    STRING_LITERAL  reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    INPUT           reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    OUTPUT          reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    SQUARE_ROOT     reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    SIN             reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    COS             reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    TAN             reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    STRING_COPY     reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    STRING_REVERSE  reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    STRING_LENGTH   reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    STRING_COMPARE  reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    WRITE           reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    READ            reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)
    OPEN            reduce using rule 86 (assignment_operator -> MODULUS_EQUALS .)


state 195

    (87) assignment_operator -> PLUS_EQUALS .

    PLUS_PLUS       reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    MINUS_MINUS     reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    SIZEOF          reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    AND             reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    STAR            reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    PLUS            reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    MINUS           reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    NOT             reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    TILDE           reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    NUMBER          reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    CHARACTER       reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    NULL            reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    STRING_LITERAL  reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    INPUT           reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    OUTPUT          reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    SQUARE_ROOT     reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    SIN             reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    COS             reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    TAN             reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    STRING_COPY     reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    STRING_REVERSE  reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    STRING_LENGTH   reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    STRING_COMPARE  reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    WRITE           reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    READ            reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    OPEN            reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)


state 196

    (88) assignment_operator -> MINUS_EQUALS .

    PLUS_PLUS       reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    MINUS_MINUS     reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    SIZEOF          reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    AND             reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    STAR            reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    PLUS            reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    MINUS           reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    NOT             reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    TILDE           reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    IDENTIFIER      reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    NUMBER          reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    CHARACTER       reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    TRUE            reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    FALSE           reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    NULL            reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    STRING_LITERAL  reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    INPUT           reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    OUTPUT          reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    SQUARE_ROOT     reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    SIN             reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    COS             reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    TAN             reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    STRING_COPY     reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    STRING_REVERSE  reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    STRING_LENGTH   reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    STRING_COMPARE  reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    WRITE           reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    READ            reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)
    OPEN            reduce using rule 88 (assignment_operator -> MINUS_EQUALS .)


state 197

    (89) assignment_operator -> LEFT_SHIFT_EQUALS .

    PLUS_PLUS       reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    MINUS_MINUS     reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    SIZEOF          reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    AND             reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STAR            reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    PLUS            reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    MINUS           reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    NOT             reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    TILDE           reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    IDENTIFIER      reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    CHARACTER       reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    TRUE            reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    FALSE           reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    NULL            reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STRING_LITERAL  reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    INPUT           reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    OUTPUT          reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    SQUARE_ROOT     reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    SIN             reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    COS             reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    TAN             reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STRING_COPY     reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STRING_REVERSE  reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STRING_LENGTH   reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STRING_COMPARE  reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    WRITE           reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    READ            reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    OPEN            reduce using rule 89 (assignment_operator -> LEFT_SHIFT_EQUALS .)


state 198

    (90) assignment_operator -> RIGHT_SHIFT_EQUALS .

    PLUS_PLUS       reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    MINUS_MINUS     reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    SIZEOF          reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    AND             reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STAR            reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    PLUS            reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    MINUS           reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    NOT             reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    TILDE           reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    IDENTIFIER      reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    CHARACTER       reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    TRUE            reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    FALSE           reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    NULL            reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STRING_LITERAL  reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    INPUT           reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    OUTPUT          reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    SQUARE_ROOT     reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    SIN             reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    COS             reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    TAN             reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STRING_COPY     reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STRING_REVERSE  reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STRING_LENGTH   reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STRING_COMPARE  reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    WRITE           reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    READ            reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    OPEN            reduce using rule 90 (assignment_operator -> RIGHT_SHIFT_EQUALS .)


state 199

    (91) assignment_operator -> AND_EQUALS .

    PLUS_PLUS       reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    MINUS_MINUS     reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    SIZEOF          reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    AND             reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    STAR            reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    PLUS            reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    MINUS           reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    NOT             reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    TILDE           reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    IDENTIFIER      reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    NUMBER          reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    CHARACTER       reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    TRUE            reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    FALSE           reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    NULL            reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    STRING_LITERAL  reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    INPUT           reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    OUTPUT          reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    SQUARE_ROOT     reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    SIN             reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    COS             reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    TAN             reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    STRING_COPY     reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    STRING_REVERSE  reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    STRING_LENGTH   reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    STRING_COMPARE  reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    WRITE           reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    READ            reduce using rule 91 (assignment_operator -> AND_EQUALS .)
    OPEN            reduce using rule 91 (assignment_operator -> AND_EQUALS .)


state 200

    (92) assignment_operator -> OR_EQUALS .

    PLUS_PLUS       reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    MINUS_MINUS     reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    SIZEOF          reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    AND             reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    STAR            reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    PLUS            reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    MINUS           reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    NOT             reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    TILDE           reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    IDENTIFIER      reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    NUMBER          reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    CHARACTER       reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    TRUE            reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    FALSE           reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    NULL            reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    STRING_LITERAL  reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    INPUT           reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    OUTPUT          reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    SQUARE_ROOT     reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    SIN             reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    COS             reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    TAN             reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    STRING_COPY     reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    STRING_REVERSE  reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    STRING_LENGTH   reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    STRING_COMPARE  reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    WRITE           reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    READ            reduce using rule 92 (assignment_operator -> OR_EQUALS .)
    OPEN            reduce using rule 92 (assignment_operator -> OR_EQUALS .)


state 201

    (93) assignment_operator -> XOR_EQUALS .

    PLUS_PLUS       reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    MINUS_MINUS     reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    SIZEOF          reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    AND             reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    STAR            reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    PLUS            reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    MINUS           reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    NOT             reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    TILDE           reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    IDENTIFIER      reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    NUMBER          reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    CHARACTER       reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    TRUE            reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    FALSE           reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    NULL            reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    STRING_LITERAL  reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    INPUT           reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    OUTPUT          reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    SQUARE_ROOT     reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    SIN             reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    COS             reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    TAN             reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    STRING_COPY     reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    STRING_REVERSE  reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    STRING_LENGTH   reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    STRING_COMPARE  reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    WRITE           reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    READ            reduce using rule 93 (assignment_operator -> XOR_EQUALS .)
    OPEN            reduce using rule 93 (assignment_operator -> XOR_EQUALS .)


state 202

    (80) conditional_expression -> logical_or_expression QUESTION_MARK . expression COLON conditional_expression
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    logical_or_expression          shift and go to state 80
    expression                     shift and go to state 281
    conditional_expression         shift and go to state 78
    assignment_expression          shift and go to state 77
    unary_expression               shift and go to state 79
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 203

    (78) logical_or_expression -> logical_or_expression OR_OR . logical_and_expression
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    logical_and_expression         shift and go to state 282
    or_expression                  shift and go to state 95
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 204

    (28) postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET . expression RIGHT_SQUARE_BRACKET
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    postfix_expression             shift and go to state 81
    expression                     shift and go to state 283
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 205

    (29) postfix_expression -> postfix_expression LEFT_PARENTHESIS . RIGHT_PARENTHESIS
    (30) postfix_expression -> postfix_expression LEFT_PARENTHESIS . argument_expression_list RIGHT_PARENTHESIS
    (35) argument_expression_list -> . assignment_expression
    (36) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_PARENTHESIS shift and go to state 284
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    postfix_expression             shift and go to state 81
    argument_expression_list       shift and go to state 285
    assignment_expression          shift and go to state 286
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 206

    (31) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 287


state 207

    (32) postfix_expression -> postfix_expression ARROW . IDENTIFIER

    IDENTIFIER      shift and go to state 288


state 208

    (33) postfix_expression -> postfix_expression PLUS_PLUS .

    LEFT_SQUARE_BRACKET reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LEFT_PARENTHESIS reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DOT             reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ARROW           reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS_PLUS       reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQUALS          reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DIVIDE_EQUALS   reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MULTIPLY_EQUALS reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MODULUS_EQUALS  reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS_EQUALS     reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS_EQUALS    reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LEFT_SHIFT_EQUALS reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RIGHT_SHIFT_EQUALS reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    AND_EQUALS      reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    OR_EQUALS       reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    XOR_EQUALS      reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    STAR            reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DIVIDE          reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MODULUS         reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS            reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS           reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LEFT_SHIFT      reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RIGHT_SHIFT     reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LESS_THAN       reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    GREATER_THAN    reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LESS_THAN_EQUALS reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    GREATER_THAN_EQUALS reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQUALS_EQUALS   reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    NOT_EQUALS      reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    AND             reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    XOR             reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    OR              reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    AND_AND         reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    QUESTION_MARK   reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    OR_OR           reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    SEMICOLON       reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    COMMA           reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RIGHT_SQUARE_BRACKET reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RIGHT_PARENTHESIS reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RIGHT_CURLY_BRACKET reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)
    COLON           reduce using rule 33 (postfix_expression -> postfix_expression PLUS_PLUS .)


state 209

    (34) postfix_expression -> postfix_expression MINUS_MINUS .

    LEFT_SQUARE_BRACKET reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LEFT_PARENTHESIS reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DOT             reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ARROW           reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS_PLUS       reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQUALS          reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DIVIDE_EQUALS   reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MULTIPLY_EQUALS reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MODULUS_EQUALS  reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS_EQUALS     reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS_EQUALS    reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LEFT_SHIFT_EQUALS reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RIGHT_SHIFT_EQUALS reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    AND_EQUALS      reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    OR_EQUALS       reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    XOR_EQUALS      reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    STAR            reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DIVIDE          reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MODULUS         reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS            reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS           reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LEFT_SHIFT      reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RIGHT_SHIFT     reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LESS_THAN       reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    GREATER_THAN    reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LESS_THAN_EQUALS reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    GREATER_THAN_EQUALS reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQUALS_EQUALS   reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    NOT_EQUALS      reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    AND             reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    XOR             reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    OR              reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    AND_AND         reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    QUESTION_MARK   reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    OR_OR           reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    SEMICOLON       reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    COMMA           reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RIGHT_SQUARE_BRACKET reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RIGHT_PARENTHESIS reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RIGHT_CURLY_BRACKET reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)
    COLON           reduce using rule 34 (postfix_expression -> postfix_expression MINUS_MINUS .)


state 210

    (38) unary_expression -> PLUS_PLUS unary_expression .

    EQUALS          reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    DIVIDE_EQUALS   reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    MULTIPLY_EQUALS reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    MODULUS_EQUALS  reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    PLUS_EQUALS     reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    MINUS_EQUALS    reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    AND_EQUALS      reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    OR_EQUALS       reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    XOR_EQUALS      reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    STAR            reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    DIVIDE          reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    MODULUS         reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    PLUS            reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    MINUS           reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    LEFT_SHIFT      reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    RIGHT_SHIFT     reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    LESS_THAN       reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    GREATER_THAN    reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    LESS_THAN_EQUALS reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    GREATER_THAN_EQUALS reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    EQUALS_EQUALS   reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    NOT_EQUALS      reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    AND             reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    XOR             reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    OR              reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    AND_AND         reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    QUESTION_MARK   reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    OR_OR           reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    SEMICOLON       reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    COMMA           reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)
    COLON           reduce using rule 38 (unary_expression -> PLUS_PLUS unary_expression .)


state 211

    (18) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    expression                     shift and go to state 181
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 212

    (39) unary_expression -> MINUS_MINUS unary_expression .

    EQUALS          reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    DIVIDE_EQUALS   reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    MULTIPLY_EQUALS reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    MODULUS_EQUALS  reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    PLUS_EQUALS     reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    MINUS_EQUALS    reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    AND_EQUALS      reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    OR_EQUALS       reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    XOR_EQUALS      reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    STAR            reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    DIVIDE          reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    MODULUS         reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    PLUS            reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    MINUS           reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    LEFT_SHIFT      reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    RIGHT_SHIFT     reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    LESS_THAN       reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    GREATER_THAN    reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    LESS_THAN_EQUALS reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    GREATER_THAN_EQUALS reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    EQUALS_EQUALS   reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    NOT_EQUALS      reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    AND             reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    XOR             reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    OR              reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    AND_AND         reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    QUESTION_MARK   reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    OR_OR           reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    SEMICOLON       reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    COMMA           reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)
    COLON           reduce using rule 39 (unary_expression -> MINUS_MINUS unary_expression .)


state 213

    (40) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    DIVIDE_EQUALS   reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    MULTIPLY_EQUALS reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    MODULUS_EQUALS  reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    PLUS_EQUALS     reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    MINUS_EQUALS    reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    AND_EQUALS      reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    OR_EQUALS       reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    XOR_EQUALS      reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    STAR            reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    MODULUS         reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    LEFT_SHIFT      reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    RIGHT_SHIFT     reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    LESS_THAN       reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    GREATER_THAN    reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    LESS_THAN_EQUALS reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    GREATER_THAN_EQUALS reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    EQUALS_EQUALS   reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    NOT_EQUALS      reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    AND_AND         reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    QUESTION_MARK   reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    OR_OR           reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 40 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 40 (unary_expression -> unary_operator cast_expression .)


state 214

    (41) unary_expression -> SIZEOF unary_expression .

    EQUALS          reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE_EQUALS   reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    MULTIPLY_EQUALS reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    MODULUS_EQUALS  reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    PLUS_EQUALS     reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    MINUS_EQUALS    reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    AND_EQUALS      reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    OR_EQUALS       reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    XOR_EQUALS      reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    STAR            reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    MODULUS         reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    PLUS            reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    MINUS           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    LEFT_SHIFT      reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_SHIFT     reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    LESS_THAN       reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    GREATER_THAN    reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    LESS_THAN_EQUALS reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    GREATER_THAN_EQUALS reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    EQUALS_EQUALS   reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    NOT_EQUALS      reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    XOR             reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    AND_AND         reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    QUESTION_MARK   reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    OR_OR           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    SEMICOLON       reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 41 (unary_expression -> SIZEOF unary_expression .)


state 215

    (42) unary_expression -> SIZEOF LEFT_PARENTHESIS . type_specifier RIGHT_PARENTHESIS
    (18) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 146
    STRUCT          shift and go to state 24
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    type_specifier                 shift and go to state 289
    expression                     shift and go to state 181
    struct_specifier               shift and go to state 18
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 216

    (76) logical_and_expression -> logical_and_expression AND_AND . or_expression
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    or_expression                  shift and go to state 290
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 217

    (74) or_expression -> or_expression OR . xor_expression
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    xor_expression                 shift and go to state 291
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 218

    (72) xor_expression -> xor_expression XOR . and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    and_expression                 shift and go to state 292
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 219

    (70) and_expression -> and_expression AND . equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    equality_expression            shift and go to state 293
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 220

    (67) equality_expression -> equality_expression EQUALS_EQUALS . relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    relational_expression          shift and go to state 294
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 221

    (68) equality_expression -> equality_expression NOT_EQUALS . relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    relational_expression          shift and go to state 295
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 222

    (62) relational_expression -> relational_expression LESS_THAN . shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    shift_expression               shift and go to state 296
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 223

    (63) relational_expression -> relational_expression GREATER_THAN . shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    shift_expression               shift and go to state 297
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 224

    (64) relational_expression -> relational_expression LESS_THAN_EQUALS . shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    shift_expression               shift and go to state 298
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 225

    (65) relational_expression -> relational_expression GREATER_THAN_EQUALS . shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    shift_expression               shift and go to state 299
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 226

    (59) shift_expression -> shift_expression LEFT_SHIFT . additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    additive_expression            shift and go to state 300
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 227

    (60) shift_expression -> shift_expression RIGHT_SHIFT . additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    additive_expression            shift and go to state 301
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 228

    (56) additive_expression -> additive_expression PLUS . multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    multiplicative_expression      shift and go to state 302
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 229

    (57) additive_expression -> additive_expression MINUS . multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    multiplicative_expression      shift and go to state 303
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 230

    (52) multiplicative_expression -> multiplicative_expression STAR . cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    cast_expression                shift and go to state 304
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 231

    (53) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    cast_expression                shift and go to state 305
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 232

    (54) multiplicative_expression -> multiplicative_expression MODULUS . cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    cast_expression                shift and go to state 306
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 233

    (172) base_specifier_list -> base_specifier_list COMMA . base_specifier
    (173) base_specifier -> . CLASS IDENTIFIER
    (174) base_specifier -> . access_specifier CLASS IDENTIFIER
    (175) base_specifier -> . IDENTIFIER
    (176) base_specifier -> . access_specifier IDENTIFIER
    (177) access_specifier -> . PRIVATE
    (178) access_specifier -> . PUBLIC

    CLASS           shift and go to state 130
    IDENTIFIER      shift and go to state 131
    PRIVATE         shift and go to state 133
    PUBLIC          shift and go to state 134

    base_specifier                 shift and go to state 307
    access_specifier               shift and go to state 132

state 234

    (173) base_specifier -> CLASS IDENTIFIER .

    COMMA           reduce using rule 173 (base_specifier -> CLASS IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 173 (base_specifier -> CLASS IDENTIFIER .)


state 235

    (174) base_specifier -> access_specifier CLASS . IDENTIFIER

    IDENTIFIER      shift and go to state 308


state 236

    (176) base_specifier -> access_specifier IDENTIFIER .

    COMMA           reduce using rule 176 (base_specifier -> access_specifier IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 176 (base_specifier -> access_specifier IDENTIFIER .)


state 237

    (123) direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    VOID            reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    CHAR            reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    INT             reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    FLOAT           reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    DOUBLE          reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    STRING          reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    BOOL            reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    LONG_LONG_INT   reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    UNSIGNED_INT    reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    CLASS           reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    STRUCT          reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    EQUALS          reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    COLON           reduce using rule 123 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)


state 238

    (125) direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    LEFT_CURLY_BRACKET reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    VOID            reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    CHAR            reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    INT             reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    DOUBLE          reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    STRING          reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    LONG_LONG_INT   reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    UNSIGNED_INT    reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    CLASS           reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    STRUCT          reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 125 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)


state 239

    (131) parameter_list -> parameter_list COMMA . parameter_declaration
    (132) parameter_declaration -> . type_specifier declarator
    (133) parameter_declaration -> . type_specifier abstract_declarator
    (134) parameter_declaration -> . type_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 146
    STRUCT          shift and go to state 24

    parameter_declaration          shift and go to state 309
    type_specifier                 shift and go to state 145
    struct_specifier               shift and go to state 18

state 240

    (126) direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    LEFT_CURLY_BRACKET reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    VOID            reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    CHAR            reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    INT             reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    DOUBLE          reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    STRING          reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    LONG_LONG_INT   reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    UNSIGNED_INT    reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    CLASS           reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    STRUCT          reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 126 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)


state 241

    (117) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 310


state 242

    (132) parameter_declaration -> type_specifier declarator .

    RIGHT_PARENTHESIS reduce using rule 132 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 132 (parameter_declaration -> type_specifier declarator .)


state 243

    (133) parameter_declaration -> type_specifier abstract_declarator .

    RIGHT_PARENTHESIS reduce using rule 133 (parameter_declaration -> type_specifier abstract_declarator .)
    COMMA           reduce using rule 133 (parameter_declaration -> type_specifier abstract_declarator .)


state 244

    (128) declarator -> pointer . direct_declarator
    (179) abstract_declarator -> pointer .
    (181) abstract_declarator -> pointer . direct_abstract_declarator
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (182) direct_abstract_declarator -> . LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS
    (183) direct_abstract_declarator -> . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (184) direct_abstract_declarator -> . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (185) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (186) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (187) direct_abstract_declarator -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (188) direct_abstract_declarator -> . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (189) direct_abstract_declarator -> . direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (190) direct_abstract_declarator -> . direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS reduce using rule 179 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 179 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 246
    LEFT_SQUARE_BRACKET shift and go to state 247

    direct_declarator              shift and go to state 41
    direct_abstract_declarator     shift and go to state 311

state 245

    (180) abstract_declarator -> direct_abstract_declarator .
    (185) direct_abstract_declarator -> direct_abstract_declarator . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (186) direct_abstract_declarator -> direct_abstract_declarator . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (189) direct_abstract_declarator -> direct_abstract_declarator . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (190) direct_abstract_declarator -> direct_abstract_declarator . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS reduce using rule 180 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 180 (abstract_declarator -> direct_abstract_declarator .)
    LEFT_SQUARE_BRACKET shift and go to state 312
    LEFT_PARENTHESIS shift and go to state 313


state 246

    (122) direct_declarator -> LEFT_PARENTHESIS . declarator RIGHT_PARENTHESIS
    (182) direct_abstract_declarator -> LEFT_PARENTHESIS . abstract_declarator RIGHT_PARENTHESIS
    (187) direct_abstract_declarator -> LEFT_PARENTHESIS . RIGHT_PARENTHESIS
    (188) direct_abstract_declarator -> LEFT_PARENTHESIS . parameter_list RIGHT_PARENTHESIS
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (179) abstract_declarator -> . pointer
    (180) abstract_declarator -> . direct_abstract_declarator
    (181) abstract_declarator -> . pointer direct_abstract_declarator
    (130) parameter_list -> . parameter_declaration
    (131) parameter_list -> . parameter_list COMMA parameter_declaration
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (182) direct_abstract_declarator -> . LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS
    (183) direct_abstract_declarator -> . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (184) direct_abstract_declarator -> . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (185) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (186) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (187) direct_abstract_declarator -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (188) direct_abstract_declarator -> . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (189) direct_abstract_declarator -> . direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (190) direct_abstract_declarator -> . direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (132) parameter_declaration -> . type_specifier declarator
    (133) parameter_declaration -> . type_specifier abstract_declarator
    (134) parameter_declaration -> . type_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_PARENTHESIS shift and go to state 314
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 246
    LEFT_SQUARE_BRACKET shift and go to state 247
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 146
    STRUCT          shift and go to state 24

    declarator                     shift and go to state 48
    abstract_declarator            shift and go to state 315
    parameter_list                 shift and go to state 316
    pointer                        shift and go to state 244
    direct_declarator              shift and go to state 22
    direct_abstract_declarator     shift and go to state 245
    parameter_declaration          shift and go to state 143
    type_specifier                 shift and go to state 145
    struct_specifier               shift and go to state 18

state 247

    (183) direct_abstract_declarator -> LEFT_SQUARE_BRACKET . RIGHT_SQUARE_BRACKET
    (184) direct_abstract_declarator -> LEFT_SQUARE_BRACKET . conditional_expression RIGHT_SQUARE_BRACKET
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    RIGHT_SQUARE_BRACKET shift and go to state 317
    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    conditional_expression         shift and go to state 318
    logical_or_expression          shift and go to state 80
    logical_and_expression         shift and go to state 87
    or_expression                  shift and go to state 95
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 248

    (113) type_specifier -> CLASS IDENTIFIER .

    STAR            reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    IDENTIFIER      reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    MAIN            reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    LEFT_SQUARE_BRACKET reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    COMMA           reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    VOID            reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    CHAR            reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    INT             reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    FLOAT           reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    DOUBLE          reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    STRING          reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    BOOL            reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    LONG_LONG_INT   reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    UNSIGNED_INT    reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    CLASS           reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    STRUCT          reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    COLON           reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    SEMICOLON       reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    PLUS_PLUS       reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    MINUS_MINUS     reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    SIZEOF          reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    AND             reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    PLUS            reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    MINUS           reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    NOT             reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    TILDE           reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    NUMBER          reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    DECIMAL_NUMBER  reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    CHARACTER       reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    TRUE            reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    FALSE           reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    NULL            reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    STRING_LITERAL  reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    INPUT           reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    OUTPUT          reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    SQUARE_ROOT     reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    SIN             reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    COS             reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    TAN             reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    STRING_COPY     reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    STRING_REVERSE  reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    STRING_LENGTH   reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    STRING_COMPARE  reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    WRITE           reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    READ            reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)
    OPEN            reduce using rule 113 (type_specifier -> CLASS IDENTIFIER .)


state 249

    (152) class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 319


state 250

    (156) member_list -> member_list access_list .

    RIGHT_CURLY_BRACKET reduce using rule 156 (member_list -> member_list access_list .)
    PRIVATE         reduce using rule 156 (member_list -> member_list access_list .)
    PUBLIC          reduce using rule 156 (member_list -> member_list access_list .)


state 251

    (153) class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .

    VOID            reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    CHAR            reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    INT             reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    FLOAT           reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    DOUBLE          reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING          reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    BOOL            reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    LONG_LONG_INT   reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    UNSIGNED_INT    reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    CLASS           reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRUCT          reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STAR            reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    MAIN            reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    $end            reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    IF              reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    WHILE           reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    FOR             reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    GOTO            reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    BREAK           reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    CONTINUE        reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    RETURN          reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    PLUS_PLUS       reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    MINUS_MINUS     reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    SIZEOF          reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    AND             reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    PLUS            reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    MINUS           reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    NOT             reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    TILDE           reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    NUMBER          reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    CHARACTER       reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    TRUE            reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    FALSE           reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    NULL            reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    INPUT           reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    OUTPUT          reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    SQUARE_ROOT     reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    SIN             reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    COS             reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    TAN             reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_COPY     reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_REVERSE  reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_LENGTH   reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_COMPARE  reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    WRITE           reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    READ            reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    OPEN            reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    PRIVATE         reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    PUBLIC          reduce using rule 153 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)


state 252

    (168) member_access_list -> member_declaration member_access_list .

    RIGHT_CURLY_BRACKET reduce using rule 168 (member_access_list -> member_declaration member_access_list .)
    PRIVATE         reduce using rule 168 (member_access_list -> member_declaration member_access_list .)
    PUBLIC          reduce using rule 168 (member_access_list -> member_declaration member_access_list .)


state 253

    (166) access_list -> access_specifier COLON . member_access_list
    (167) access_list -> access_specifier COLON .
    (168) member_access_list -> . member_declaration member_access_list
    (169) member_access_list -> . member_declaration
    (160) member_declaration -> . type_specifier member_declarator_list SEMICOLON
    (161) member_declaration -> . member_declarator_list SEMICOLON
    (162) member_declaration -> . type_specifier SEMICOLON
    (163) member_declaration -> . SEMICOLON
    (164) member_declaration -> . function_definition
    (165) member_declaration -> . class_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (158) member_declarator_list -> . member_declarator
    (159) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (228) function_definition -> . type_specifier declarator declaration_list compound_statement
    (229) function_definition -> . type_specifier declarator compound_statement
    (230) function_definition -> . declarator declaration_list compound_statement
    (231) function_definition -> . declarator compound_statement
    (152) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (153) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER
    (157) member_declarator -> . init_declarator
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (148) class_head -> . CLASS base_clause
    (149) class_head -> . CLASS
    (150) class_head -> . CLASS IDENTIFIER base_clause
    (151) class_head -> . CLASS IDENTIFIER
    (101) init_declarator -> . declarator EQUALS initializer
    (102) init_declarator -> . declarator
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    RIGHT_CURLY_BRACKET reduce using rule 167 (access_list -> access_specifier COLON .)
    PRIVATE         reduce using rule 167 (access_list -> access_specifier COLON .)
    PUBLIC          reduce using rule 167 (access_list -> access_specifier COLON .)
    SEMICOLON       shift and go to state 149
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    member_access_list             shift and go to state 320
    member_declaration             shift and go to state 152
    type_specifier                 shift and go to state 154
    member_declarator_list         shift and go to state 155
    function_definition            shift and go to state 156
    class_specifier                shift and go to state 157
    struct_specifier               shift and go to state 18
    member_declarator              shift and go to state 158
    declarator                     shift and go to state 159
    class_head                     shift and go to state 23
    init_declarator                shift and go to state 160
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 254

    (160) member_declaration -> type_specifier member_declarator_list . SEMICOLON
    (159) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 321
    COMMA           shift and go to state 257


state 255

    (162) member_declaration -> type_specifier SEMICOLON .

    SEMICOLON       reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    VOID            reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    CHAR            reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    INT             reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    FLOAT           reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    DOUBLE          reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    STRING          reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    BOOL            reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    LONG_LONG_INT   reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    UNSIGNED_INT    reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    CLASS           reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    STRUCT          reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    STAR            reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    IDENTIFIER      reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    MAIN            reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    PRIVATE         reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)
    PUBLIC          reduce using rule 162 (member_declaration -> type_specifier SEMICOLON .)


state 256

    (161) member_declaration -> member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    VOID            reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    INT             reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    STRING          reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    BOOL            reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    LONG_LONG_INT   reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    UNSIGNED_INT    reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    STAR            reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    MAIN            reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 161 (member_declaration -> member_declarator_list SEMICOLON .)


state 257

    (159) member_declarator_list -> member_declarator_list COMMA . member_declarator
    (157) member_declarator -> . init_declarator
    (101) init_declarator -> . declarator EQUALS initializer
    (102) init_declarator -> . declarator
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    member_declarator              shift and go to state 322
    init_declarator                shift and go to state 160
    declarator                     shift and go to state 126
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 258

    (135) struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list . RIGHT_CURLY_BRACKET
    (147) struct_declaration_list -> struct_declaration_list . struct_declaration
    (145) struct_declaration -> . specifier_list struct_declarator_list SEMICOLON
    (118) specifier_list -> . type_specifier specifier_list
    (119) specifier_list -> . type_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_CURLY_BRACKET shift and go to state 323
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 146
    STRUCT          shift and go to state 24

    struct_declaration             shift and go to state 261
    specifier_list                 shift and go to state 165
    type_specifier                 shift and go to state 166
    struct_specifier               shift and go to state 18

state 259

    (137) struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .

    SEMICOLON       reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_SQUARE_BRACKET reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    VOID            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)


state 260

    (136) struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .

    SEMICOLON       reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_SQUARE_BRACKET reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    VOID            reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 136 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)


state 261

    (147) struct_declaration_list -> struct_declaration_list struct_declaration .

    RIGHT_CURLY_BRACKET reduce using rule 147 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 147 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 147 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 147 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 147 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 147 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRING          reduce using rule 147 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 147 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG_LONG_INT   reduce using rule 147 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED_INT    reduce using rule 147 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CLASS           reduce using rule 147 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 147 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 262

    (145) struct_declaration -> specifier_list struct_declarator_list . SEMICOLON
    (144) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMICOLON       shift and go to state 324
    COMMA           shift and go to state 325


state 263

    (143) struct_declarator_list -> struct_declarator .

    SEMICOLON       reduce using rule 143 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 143 (struct_declarator_list -> struct_declarator .)


state 264

    (140) struct_declarator -> declarator .
    (142) struct_declarator -> declarator . COLON conditional_expression

    SEMICOLON       reduce using rule 140 (struct_declarator -> declarator .)
    COMMA           reduce using rule 140 (struct_declarator -> declarator .)
    COLON           shift and go to state 326


state 265

    (141) struct_declarator -> COLON . conditional_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    conditional_expression         shift and go to state 327
    logical_or_expression          shift and go to state 80
    logical_and_expression         shift and go to state 87
    or_expression                  shift and go to state 95
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 266

    (118) specifier_list -> type_specifier specifier_list .

    COLON           reduce using rule 118 (specifier_list -> type_specifier specifier_list .)
    STAR            reduce using rule 118 (specifier_list -> type_specifier specifier_list .)
    IDENTIFIER      reduce using rule 118 (specifier_list -> type_specifier specifier_list .)
    MAIN            reduce using rule 118 (specifier_list -> type_specifier specifier_list .)
    LEFT_PARENTHESIS reduce using rule 118 (specifier_list -> type_specifier specifier_list .)


state 267

    (191) initializer -> LEFT_CURLY_BRACKET initializer_list . RIGHT_CURLY_BRACKET
    (193) initializer_list -> initializer_list . COMMA initializer

    RIGHT_CURLY_BRACKET shift and go to state 328
    COMMA           shift and go to state 329


state 268

    (194) initializer_list -> initializer .

    RIGHT_CURLY_BRACKET reduce using rule 194 (initializer_list -> initializer .)
    COMMA           reduce using rule 194 (initializer_list -> initializer .)


state 269

    (202) compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .

    VOID            reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    PRIVATE         reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    PUBLIC          reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    GOTO            reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 202 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)


state 270

    (201) labeled_statement -> IDENTIFIER COLON statement .

    RIGHT_CURLY_BRACKET reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    LEFT_CURLY_BRACKET reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMICOLON       reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS_PLUS       reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS_MINUS     reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    AND             reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    STAR            reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS            reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS           reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    NOT             reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    TILDE           reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    LEFT_PARENTHESIS reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    NUMBER          reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    DECIMAL_NUMBER  reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    CHARACTER       reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    TRUE            reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    FALSE           reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    NULL            reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_LITERAL  reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    INPUT           reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    OUTPUT          reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    SQUARE_ROOT     reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    SIN             reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    COS             reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    TAN             reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_COPY     reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_REVERSE  reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_LENGTH   reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_COMPARE  reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    WRITE           reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    READ            reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    OPEN            reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 201 (labeled_statement -> IDENTIFIER COLON statement .)


state 271

    (95) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 95 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 95 (expression -> expression COMMA assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 95 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 95 (expression -> expression COMMA assignment_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 95 (expression -> expression COMMA assignment_expression .)


state 272

    (212) selection_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement
    (213) selection_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement ELSE statement
    (95) expression -> expression . COMMA assignment_expression

    RIGHT_PARENTHESIS shift and go to state 330
    COMMA           shift and go to state 179


state 273

    (18) primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOT             reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS_PLUS       reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MINUS_MINUS     reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE_EQUALS   reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MULTIPLY_EQUALS reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULUS_EQUALS  reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS_EQUALS     reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MINUS_EQUALS    reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_SHIFT_EQUALS reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_SHIFT_EQUALS reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND_EQUALS      reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR_EQUALS       reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    XOR_EQUALS      reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    STAR            reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_SHIFT      reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_SHIFT     reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS_THAN_EQUALS reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER_THAN_EQUALS reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUALS_EQUALS   reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND_AND         reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    QUESTION_MARK   reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR_OR           reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_SQUARE_BRACKET reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_CURLY_BRACKET reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 18 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 274

    (50) cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS . cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    cast_expression                shift and go to state 331
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 275

    (214) iteration_statement -> WHILE LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS compound_statement
    (95) expression -> expression . COMMA assignment_expression

    RIGHT_PARENTHESIS shift and go to state 332
    COMMA           shift and go to state 179


state 276

    (215) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement . expression_statement expression RIGHT_PARENTHESIS compound_statement
    (217) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement . expression_statement RIGHT_PARENTHESIS compound_statement
    (210) expression_statement -> . expression SEMICOLON
    (211) expression_statement -> . SEMICOLON
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    SEMICOLON       shift and go to state 60
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    expression_statement           shift and go to state 333
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 277

    (216) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier . expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier . expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (210) expression_statement -> . expression SEMICOLON
    (211) expression_statement -> . SEMICOLON
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    SEMICOLON       shift and go to state 60
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    expression_statement           shift and go to state 334
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 278

    (219) jump_statement -> GOTO IDENTIFIER SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AND             reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STAR            reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NOT             reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CHARACTER       reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_LITERAL  reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INPUT           reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    OUTPUT          reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SQUARE_ROOT     reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIN             reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    COS             reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TAN             reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_COPY     reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_REVERSE  reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_LENGTH   reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_COMPARE  reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WRITE           reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    READ            reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    OPEN            reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 219 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)


state 279

    (223) jump_statement -> RETURN expression SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    AND             reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    STAR            reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    TILDE           reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    NULL            reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    INPUT           reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    OUTPUT          reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    SQUARE_ROOT     reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    SIN             reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    COS             reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    TAN             reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_COPY     reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_REVERSE  reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_LENGTH   reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_COMPARE  reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    WRITE           reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    READ            reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    OPEN            reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 223 (jump_statement -> RETURN expression SEMICOLON .)


state 280

    (82) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMICOLON       reduce using rule 82 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 82 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 82 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 82 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 82 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 82 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 281

    (80) conditional_expression -> logical_or_expression QUESTION_MARK expression . COLON conditional_expression
    (95) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 335
    COMMA           shift and go to state 179


state 282

    (78) logical_or_expression -> logical_or_expression OR_OR logical_and_expression .
    (76) logical_and_expression -> logical_and_expression . AND_AND or_expression

    QUESTION_MARK   reduce using rule 78 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    OR_OR           reduce using rule 78 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    SEMICOLON       reduce using rule 78 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    COMMA           reduce using rule 78 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 78 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    RIGHT_PARENTHESIS reduce using rule 78 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 78 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    COLON           reduce using rule 78 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    AND_AND         shift and go to state 216


state 283

    (28) postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression . RIGHT_SQUARE_BRACKET
    (95) expression -> expression . COMMA assignment_expression

    RIGHT_SQUARE_BRACKET shift and go to state 336
    COMMA           shift and go to state 179


state 284

    (29) postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DOT             reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PLUS_PLUS       reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MINUS_MINUS     reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DIVIDE_EQUALS   reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MULTIPLY_EQUALS reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MODULUS_EQUALS  reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PLUS_EQUALS     reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MINUS_EQUALS    reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_SHIFT_EQUALS reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_SHIFT_EQUALS reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    AND_EQUALS      reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    OR_EQUALS       reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    XOR_EQUALS      reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    STAR            reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_SHIFT      reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_SHIFT     reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LESS_THAN_EQUALS reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    GREATER_THAN_EQUALS reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    EQUALS_EQUALS   reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    AND             reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    XOR             reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    OR              reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    AND_AND         reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    QUESTION_MARK   reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    OR_OR           reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_SQUARE_BRACKET reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_CURLY_BRACKET reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COLON           reduce using rule 29 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 285

    (30) postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list . RIGHT_PARENTHESIS
    (36) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RIGHT_PARENTHESIS shift and go to state 337
    COMMA           shift and go to state 338


state 286

    (35) argument_expression_list -> assignment_expression .

    RIGHT_PARENTHESIS reduce using rule 35 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 35 (argument_expression_list -> assignment_expression .)


state 287

    (31) postfix_expression -> postfix_expression DOT IDENTIFIER .

    LEFT_SQUARE_BRACKET reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ARROW           reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQUALS          reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULUS_EQUALS  reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_EQUALS      reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_EQUALS       reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    XOR_EQUALS      reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    STAR            reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULUS         reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS            reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS           reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LESS_THAN       reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GREATER_THAN    reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQUALS_EQUALS   reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NOT_EQUALS      reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND             reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    XOR             reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR              reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_AND         reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    QUESTION_MARK   reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_OR           reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_SQUARE_BRACKET reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COLON           reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 288

    (32) postfix_expression -> postfix_expression ARROW IDENTIFIER .

    LEFT_SQUARE_BRACKET reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DOT             reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ARROW           reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    PLUS_PLUS       reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MINUS_MINUS     reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    EQUALS          reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MODULUS_EQUALS  reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    AND_EQUALS      reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    OR_EQUALS       reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    XOR_EQUALS      reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    STAR            reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DIVIDE          reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MODULUS         reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    PLUS            reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MINUS           reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LESS_THAN       reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GREATER_THAN    reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    EQUALS_EQUALS   reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    NOT_EQUALS      reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    AND             reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    XOR             reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    OR              reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    AND_AND         reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    QUESTION_MARK   reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    OR_OR           reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    SEMICOLON       reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COMMA           reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_SQUARE_BRACKET reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COLON           reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)


state 289

    (42) unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 339


state 290

    (76) logical_and_expression -> logical_and_expression AND_AND or_expression .
    (74) or_expression -> or_expression . OR xor_expression

    AND_AND         reduce using rule 76 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    QUESTION_MARK   reduce using rule 76 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    OR_OR           reduce using rule 76 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    SEMICOLON       reduce using rule 76 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    COMMA           reduce using rule 76 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 76 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    RIGHT_PARENTHESIS reduce using rule 76 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 76 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    COLON           reduce using rule 76 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    OR              shift and go to state 217


state 291

    (74) or_expression -> or_expression OR xor_expression .
    (72) xor_expression -> xor_expression . XOR and_expression

    OR              reduce using rule 74 (or_expression -> or_expression OR xor_expression .)
    AND_AND         reduce using rule 74 (or_expression -> or_expression OR xor_expression .)
    QUESTION_MARK   reduce using rule 74 (or_expression -> or_expression OR xor_expression .)
    OR_OR           reduce using rule 74 (or_expression -> or_expression OR xor_expression .)
    SEMICOLON       reduce using rule 74 (or_expression -> or_expression OR xor_expression .)
    COMMA           reduce using rule 74 (or_expression -> or_expression OR xor_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 74 (or_expression -> or_expression OR xor_expression .)
    RIGHT_PARENTHESIS reduce using rule 74 (or_expression -> or_expression OR xor_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 74 (or_expression -> or_expression OR xor_expression .)
    COLON           reduce using rule 74 (or_expression -> or_expression OR xor_expression .)
    XOR             shift and go to state 218


state 292

    (72) xor_expression -> xor_expression XOR and_expression .
    (70) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 72 (xor_expression -> xor_expression XOR and_expression .)
    OR              reduce using rule 72 (xor_expression -> xor_expression XOR and_expression .)
    AND_AND         reduce using rule 72 (xor_expression -> xor_expression XOR and_expression .)
    QUESTION_MARK   reduce using rule 72 (xor_expression -> xor_expression XOR and_expression .)
    OR_OR           reduce using rule 72 (xor_expression -> xor_expression XOR and_expression .)
    SEMICOLON       reduce using rule 72 (xor_expression -> xor_expression XOR and_expression .)
    COMMA           reduce using rule 72 (xor_expression -> xor_expression XOR and_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 72 (xor_expression -> xor_expression XOR and_expression .)
    RIGHT_PARENTHESIS reduce using rule 72 (xor_expression -> xor_expression XOR and_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 72 (xor_expression -> xor_expression XOR and_expression .)
    COLON           reduce using rule 72 (xor_expression -> xor_expression XOR and_expression .)
    AND             shift and go to state 219


state 293

    (70) and_expression -> and_expression AND equality_expression .
    (67) equality_expression -> equality_expression . EQUALS_EQUALS relational_expression
    (68) equality_expression -> equality_expression . NOT_EQUALS relational_expression

    AND             reduce using rule 70 (and_expression -> and_expression AND equality_expression .)
    XOR             reduce using rule 70 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 70 (and_expression -> and_expression AND equality_expression .)
    AND_AND         reduce using rule 70 (and_expression -> and_expression AND equality_expression .)
    QUESTION_MARK   reduce using rule 70 (and_expression -> and_expression AND equality_expression .)
    OR_OR           reduce using rule 70 (and_expression -> and_expression AND equality_expression .)
    SEMICOLON       reduce using rule 70 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 70 (and_expression -> and_expression AND equality_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 70 (and_expression -> and_expression AND equality_expression .)
    RIGHT_PARENTHESIS reduce using rule 70 (and_expression -> and_expression AND equality_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 70 (and_expression -> and_expression AND equality_expression .)
    COLON           reduce using rule 70 (and_expression -> and_expression AND equality_expression .)
    EQUALS_EQUALS   shift and go to state 220
    NOT_EQUALS      shift and go to state 221


state 294

    (67) equality_expression -> equality_expression EQUALS_EQUALS relational_expression .
    (62) relational_expression -> relational_expression . LESS_THAN shift_expression
    (63) relational_expression -> relational_expression . GREATER_THAN shift_expression
    (64) relational_expression -> relational_expression . LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> relational_expression . GREATER_THAN_EQUALS shift_expression

    EQUALS_EQUALS   reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    NOT_EQUALS      reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    AND             reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    XOR             reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    OR              reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    AND_AND         reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    QUESTION_MARK   reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    OR_OR           reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    SEMICOLON       reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    COMMA           reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    COLON           reduce using rule 67 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    LESS_THAN       shift and go to state 222
    GREATER_THAN    shift and go to state 223
    LESS_THAN_EQUALS shift and go to state 224
    GREATER_THAN_EQUALS shift and go to state 225


state 295

    (68) equality_expression -> equality_expression NOT_EQUALS relational_expression .
    (62) relational_expression -> relational_expression . LESS_THAN shift_expression
    (63) relational_expression -> relational_expression . GREATER_THAN shift_expression
    (64) relational_expression -> relational_expression . LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> relational_expression . GREATER_THAN_EQUALS shift_expression

    EQUALS_EQUALS   reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    NOT_EQUALS      reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    AND             reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    XOR             reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    OR              reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    AND_AND         reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    QUESTION_MARK   reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    OR_OR           reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    SEMICOLON       reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    COMMA           reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    COLON           reduce using rule 68 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    LESS_THAN       shift and go to state 222
    GREATER_THAN    shift and go to state 223
    LESS_THAN_EQUALS shift and go to state 224
    GREATER_THAN_EQUALS shift and go to state 225


state 296

    (62) relational_expression -> relational_expression LESS_THAN shift_expression .
    (59) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (60) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS_THAN       reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    GREATER_THAN    reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    LESS_THAN_EQUALS reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    GREATER_THAN_EQUALS reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    EQUALS_EQUALS   reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    NOT_EQUALS      reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    AND             reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    XOR             reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    OR              reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    AND_AND         reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    QUESTION_MARK   reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    OR_OR           reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    SEMICOLON       reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    COMMA           reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    COLON           reduce using rule 62 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    LEFT_SHIFT      shift and go to state 226
    RIGHT_SHIFT     shift and go to state 227


state 297

    (63) relational_expression -> relational_expression GREATER_THAN shift_expression .
    (59) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (60) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS_THAN       reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    GREATER_THAN    reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    LESS_THAN_EQUALS reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    GREATER_THAN_EQUALS reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    EQUALS_EQUALS   reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    NOT_EQUALS      reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    AND             reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    XOR             reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    OR              reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    AND_AND         reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    QUESTION_MARK   reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    OR_OR           reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    SEMICOLON       reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    COMMA           reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    COLON           reduce using rule 63 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    LEFT_SHIFT      shift and go to state 226
    RIGHT_SHIFT     shift and go to state 227


state 298

    (64) relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .
    (59) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (60) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS_THAN       reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    GREATER_THAN    reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    LESS_THAN_EQUALS reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    GREATER_THAN_EQUALS reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    EQUALS_EQUALS   reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    NOT_EQUALS      reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    AND             reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    XOR             reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    OR              reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    AND_AND         reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    QUESTION_MARK   reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    OR_OR           reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    SEMICOLON       reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    COMMA           reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    COLON           reduce using rule 64 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    LEFT_SHIFT      shift and go to state 226
    RIGHT_SHIFT     shift and go to state 227


state 299

    (65) relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .
    (59) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (60) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS_THAN       reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    GREATER_THAN    reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    LESS_THAN_EQUALS reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    GREATER_THAN_EQUALS reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    EQUALS_EQUALS   reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    NOT_EQUALS      reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    AND             reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    XOR             reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    OR              reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    AND_AND         reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    QUESTION_MARK   reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    OR_OR           reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    SEMICOLON       reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    COMMA           reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    COLON           reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    LEFT_SHIFT      shift and go to state 226
    RIGHT_SHIFT     shift and go to state 227


state 300

    (59) shift_expression -> shift_expression LEFT_SHIFT additive_expression .
    (56) additive_expression -> additive_expression . PLUS multiplicative_expression
    (57) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_SHIFT      reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    RIGHT_SHIFT     reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    LESS_THAN       reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    GREATER_THAN    reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    LESS_THAN_EQUALS reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    GREATER_THAN_EQUALS reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    EQUALS_EQUALS   reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    NOT_EQUALS      reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    AND             reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    XOR             reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    OR              reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    AND_AND         reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    QUESTION_MARK   reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    OR_OR           reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    SEMICOLON       reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    COMMA           reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    RIGHT_PARENTHESIS reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    COLON           reduce using rule 59 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    PLUS            shift and go to state 228
    MINUS           shift and go to state 229


state 301

    (60) shift_expression -> shift_expression RIGHT_SHIFT additive_expression .
    (56) additive_expression -> additive_expression . PLUS multiplicative_expression
    (57) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_SHIFT      reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    RIGHT_SHIFT     reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    LESS_THAN       reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    GREATER_THAN    reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    LESS_THAN_EQUALS reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    GREATER_THAN_EQUALS reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    EQUALS_EQUALS   reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    NOT_EQUALS      reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    AND             reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    XOR             reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    OR              reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    AND_AND         reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    QUESTION_MARK   reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    OR_OR           reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    SEMICOLON       reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    COMMA           reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    RIGHT_PARENTHESIS reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    COLON           reduce using rule 60 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    PLUS            shift and go to state 228
    MINUS           shift and go to state 229


state 302

    (56) additive_expression -> additive_expression PLUS multiplicative_expression .
    (52) multiplicative_expression -> multiplicative_expression . STAR cast_expression
    (53) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (54) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    PLUS            reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEFT_SHIFT      reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_SHIFT     reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_THAN       reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_THAN_EQUALS reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_THAN_EQUALS reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUALS_EQUALS   reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOT_EQUALS      reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_AND         reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QUESTION_MARK   reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_OR           reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 56 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STAR            shift and go to state 230
    DIVIDE          shift and go to state 231
    MODULUS         shift and go to state 232


state 303

    (57) additive_expression -> additive_expression MINUS multiplicative_expression .
    (52) multiplicative_expression -> multiplicative_expression . STAR cast_expression
    (53) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (54) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    PLUS            reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEFT_SHIFT      reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_SHIFT     reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_THAN       reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_THAN_EQUALS reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_THAN_EQUALS reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUALS_EQUALS   reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOT_EQUALS      reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_AND         reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QUESTION_MARK   reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_OR           reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 57 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STAR            shift and go to state 230
    DIVIDE          shift and go to state 231
    MODULUS         shift and go to state 232


state 304

    (52) multiplicative_expression -> multiplicative_expression STAR cast_expression .

    STAR            reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    DIVIDE          reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    MODULUS         reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    PLUS            reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    MINUS           reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    LEFT_SHIFT      reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    RIGHT_SHIFT     reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    LESS_THAN       reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    GREATER_THAN    reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    LESS_THAN_EQUALS reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    GREATER_THAN_EQUALS reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    EQUALS_EQUALS   reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    NOT_EQUALS      reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    AND             reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    XOR             reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    OR              reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    AND_AND         reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    QUESTION_MARK   reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    OR_OR           reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    SEMICOLON       reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    COMMA           reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    COLON           reduce using rule 52 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)


state 305

    (53) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    STAR            reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MODULUS         reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LEFT_SHIFT      reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_SHIFT     reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LESS_THAN       reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GREATER_THAN    reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LESS_THAN_EQUALS reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GREATER_THAN_EQUALS reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQUALS_EQUALS   reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NOT_EQUALS      reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND_AND         reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    QUESTION_MARK   reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR_OR           reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMICOLON       reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 53 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 306

    (54) multiplicative_expression -> multiplicative_expression MODULUS cast_expression .

    STAR            reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    DIVIDE          reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    MODULUS         reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    PLUS            reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    MINUS           reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LEFT_SHIFT      reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    RIGHT_SHIFT     reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LESS_THAN       reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    GREATER_THAN    reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LESS_THAN_EQUALS reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    GREATER_THAN_EQUALS reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    EQUALS_EQUALS   reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    NOT_EQUALS      reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    AND             reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    XOR             reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    OR              reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    AND_AND         reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    QUESTION_MARK   reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    OR_OR           reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    SEMICOLON       reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    COMMA           reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    COLON           reduce using rule 54 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)


state 307

    (172) base_specifier_list -> base_specifier_list COMMA base_specifier .

    COMMA           reduce using rule 172 (base_specifier_list -> base_specifier_list COMMA base_specifier .)
    LEFT_CURLY_BRACKET reduce using rule 172 (base_specifier_list -> base_specifier_list COMMA base_specifier .)


state 308

    (174) base_specifier -> access_specifier CLASS IDENTIFIER .

    COMMA           reduce using rule 174 (base_specifier -> access_specifier CLASS IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 174 (base_specifier -> access_specifier CLASS IDENTIFIER .)


state 309

    (131) parameter_list -> parameter_list COMMA parameter_declaration .

    RIGHT_PARENTHESIS reduce using rule 131 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 131 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 310

    (117) identifier_list -> identifier_list COMMA IDENTIFIER .

    RIGHT_PARENTHESIS reduce using rule 117 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 117 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 311

    (181) abstract_declarator -> pointer direct_abstract_declarator .
    (185) direct_abstract_declarator -> direct_abstract_declarator . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (186) direct_abstract_declarator -> direct_abstract_declarator . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (189) direct_abstract_declarator -> direct_abstract_declarator . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (190) direct_abstract_declarator -> direct_abstract_declarator . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS reduce using rule 181 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 181 (abstract_declarator -> pointer direct_abstract_declarator .)
    LEFT_SQUARE_BRACKET shift and go to state 312
    LEFT_PARENTHESIS shift and go to state 313


state 312

    (185) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET . RIGHT_SQUARE_BRACKET
    (186) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET . conditional_expression RIGHT_SQUARE_BRACKET
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    RIGHT_SQUARE_BRACKET shift and go to state 340
    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    conditional_expression         shift and go to state 341
    logical_or_expression          shift and go to state 80
    logical_and_expression         shift and go to state 87
    or_expression                  shift and go to state 95
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 313

    (189) direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS . RIGHT_PARENTHESIS
    (190) direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS . parameter_list RIGHT_PARENTHESIS
    (130) parameter_list -> . parameter_declaration
    (131) parameter_list -> . parameter_list COMMA parameter_declaration
    (132) parameter_declaration -> . type_specifier declarator
    (133) parameter_declaration -> . type_specifier abstract_declarator
    (134) parameter_declaration -> . type_specifier
    (103) type_specifier -> . VOID
    (104) type_specifier -> . CHAR
    (105) type_specifier -> . INT
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRING
    (109) type_specifier -> . BOOL
    (110) type_specifier -> . LONG_LONG_INT
    (111) type_specifier -> . UNSIGNED_INT
    (112) type_specifier -> . struct_specifier
    (113) type_specifier -> . CLASS IDENTIFIER
    (135) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (136) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_PARENTHESIS shift and go to state 342
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 146
    STRUCT          shift and go to state 24

    parameter_list                 shift and go to state 343
    parameter_declaration          shift and go to state 143
    type_specifier                 shift and go to state 145
    struct_specifier               shift and go to state 18

state 314

    (187) direct_abstract_declarator -> LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 187 (direct_abstract_declarator -> LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 187 (direct_abstract_declarator -> LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 187 (direct_abstract_declarator -> LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 187 (direct_abstract_declarator -> LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 315

    (182) direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 344


state 316

    (188) direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list . RIGHT_PARENTHESIS
    (131) parameter_list -> parameter_list . COMMA parameter_declaration

    RIGHT_PARENTHESIS shift and go to state 345
    COMMA           shift and go to state 239


state 317

    (183) direct_abstract_declarator -> LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 183 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 183 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 183 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 183 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)


state 318

    (184) direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET shift and go to state 346


state 319

    (152) class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .

    VOID            reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    CHAR            reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    INT             reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    FLOAT           reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    DOUBLE          reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING          reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    BOOL            reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    LONG_LONG_INT   reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    UNSIGNED_INT    reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    CLASS           reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRUCT          reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STAR            reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    MAIN            reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    $end            reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    IF              reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    WHILE           reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    FOR             reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    GOTO            reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    BREAK           reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    CONTINUE        reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    RETURN          reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    PLUS_PLUS       reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    MINUS_MINUS     reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    SIZEOF          reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    AND             reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    PLUS            reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    MINUS           reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    NOT             reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    TILDE           reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    NUMBER          reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    CHARACTER       reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    TRUE            reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    FALSE           reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    NULL            reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    INPUT           reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    OUTPUT          reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    SQUARE_ROOT     reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    SIN             reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    COS             reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    TAN             reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_COPY     reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_REVERSE  reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_LENGTH   reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_COMPARE  reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    WRITE           reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    READ            reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    OPEN            reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    PRIVATE         reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    PUBLIC          reduce using rule 152 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)


state 320

    (166) access_list -> access_specifier COLON member_access_list .

    RIGHT_CURLY_BRACKET reduce using rule 166 (access_list -> access_specifier COLON member_access_list .)
    PRIVATE         reduce using rule 166 (access_list -> access_specifier COLON member_access_list .)
    PUBLIC          reduce using rule 166 (access_list -> access_specifier COLON member_access_list .)


state 321

    (160) member_declaration -> type_specifier member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    VOID            reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    INT             reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    STRING          reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    BOOL            reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    LONG_LONG_INT   reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    UNSIGNED_INT    reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    STAR            reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    MAIN            reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 160 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)


state 322

    (159) member_declarator_list -> member_declarator_list COMMA member_declarator .

    SEMICOLON       reduce using rule 159 (member_declarator_list -> member_declarator_list COMMA member_declarator .)
    COMMA           reduce using rule 159 (member_declarator_list -> member_declarator_list COMMA member_declarator .)


state 323

    (135) struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .

    SEMICOLON       reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_SQUARE_BRACKET reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    VOID            reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 135 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)


state 324

    (145) struct_declaration -> specifier_list struct_declarator_list SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 145 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    VOID            reduce using rule 145 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    CHAR            reduce using rule 145 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    INT             reduce using rule 145 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 145 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 145 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    STRING          reduce using rule 145 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    BOOL            reduce using rule 145 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    LONG_LONG_INT   reduce using rule 145 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    UNSIGNED_INT    reduce using rule 145 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    CLASS           reduce using rule 145 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 145 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)


state 325

    (144) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (140) struct_declarator -> . declarator
    (141) struct_declarator -> . COLON conditional_expression
    (142) struct_declarator -> . declarator COLON conditional_expression
    (128) declarator -> . pointer direct_declarator
    (129) declarator -> . direct_declarator
    (114) pointer -> . STAR
    (115) pointer -> . STAR pointer
    (120) direct_declarator -> . IDENTIFIER
    (121) direct_declarator -> . MAIN
    (122) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (123) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (124) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (125) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (126) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    COLON           shift and go to state 265
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    struct_declarator              shift and go to state 347
    declarator                     shift and go to state 264
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 326

    (142) struct_declarator -> declarator COLON . conditional_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    conditional_expression         shift and go to state 348
    logical_or_expression          shift and go to state 80
    logical_and_expression         shift and go to state 87
    or_expression                  shift and go to state 95
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 327

    (141) struct_declarator -> COLON conditional_expression .

    SEMICOLON       reduce using rule 141 (struct_declarator -> COLON conditional_expression .)
    COMMA           reduce using rule 141 (struct_declarator -> COLON conditional_expression .)


state 328

    (191) initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET .

    SEMICOLON       reduce using rule 191 (initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 191 (initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 191 (initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET .)


state 329

    (193) initializer_list -> initializer_list COMMA . initializer
    (191) initializer -> . LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET
    (192) initializer -> . assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    LEFT_CURLY_BRACKET shift and go to state 170
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    initializer                    shift and go to state 349
    assignment_expression          shift and go to state 171
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 330

    (212) selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement
    (213) selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement ELSE statement
    (195) statement -> . compound_statement
    (196) statement -> . expression_statement
    (197) statement -> . selection_statement
    (198) statement -> . iteration_statement
    (199) statement -> . jump_statement
    (200) statement -> . labeled_statement
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (210) expression_statement -> . expression SEMICOLON
    (211) expression_statement -> . SEMICOLON
    (212) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (213) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (214) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (215) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (216) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (217) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (219) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) jump_statement -> . BREAK SEMICOLON
    (221) jump_statement -> . CONTINUE SEMICOLON
    (222) jump_statement -> . RETURN SEMICOLON
    (223) jump_statement -> . RETURN expression SEMICOLON
    (201) labeled_statement -> . IDENTIFIER COLON statement
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    WHILE           shift and go to state 71
    FOR             shift and go to state 72
    GOTO            shift and go to state 73
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 75
    RETURN          shift and go to state 76
    IDENTIFIER      shift and go to state 67
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    expression                     shift and go to state 68
    statement                      shift and go to state 350
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 331

    (50) cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .

    STAR            reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    DIVIDE          reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    MODULUS         reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    PLUS            reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    MINUS           reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    LEFT_SHIFT      reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    RIGHT_SHIFT     reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    LESS_THAN       reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    GREATER_THAN    reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    LESS_THAN_EQUALS reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    GREATER_THAN_EQUALS reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    EQUALS_EQUALS   reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    NOT_EQUALS      reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    AND             reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    XOR             reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    OR              reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    AND_AND         reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    QUESTION_MARK   reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    OR_OR           reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    SEMICOLON       reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    COMMA           reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    EQUALS          reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    DIVIDE_EQUALS   reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    MULTIPLY_EQUALS reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    MODULUS_EQUALS  reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    PLUS_EQUALS     reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    MINUS_EQUALS    reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    AND_EQUALS      reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    OR_EQUALS       reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    XOR_EQUALS      reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    COLON           reduce using rule 50 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)


state 332

    (214) iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . compound_statement
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 36

    compound_statement             shift and go to state 351

state 333

    (215) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement . expression RIGHT_PARENTHESIS compound_statement
    (217) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement . RIGHT_PARENTHESIS compound_statement
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_PARENTHESIS shift and go to state 353
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    expression                     shift and go to state 352
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 334

    (216) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement . expression_statement expression RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement . expression_statement RIGHT_PARENTHESIS compound_statement
    (210) expression_statement -> . expression SEMICOLON
    (211) expression_statement -> . SEMICOLON
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    SEMICOLON       shift and go to state 60
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    expression_statement           shift and go to state 354
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 335

    (80) conditional_expression -> logical_or_expression QUESTION_MARK expression COLON . conditional_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN

    LEFT_PARENTHESIS shift and go to state 138
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    logical_or_expression          shift and go to state 80
    conditional_expression         shift and go to state 355
    logical_and_expression         shift and go to state 87
    or_expression                  shift and go to state 95
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125
    cast_expression                shift and go to state 85
    unary_expression               shift and go to state 137
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    primary_expression             shift and go to state 88
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98

state 336

    (28) postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    DOT             reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    ARROW           reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    PLUS_PLUS       reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    MINUS_MINUS     reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    EQUALS          reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    DIVIDE_EQUALS   reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    MULTIPLY_EQUALS reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    MODULUS_EQUALS  reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    PLUS_EQUALS     reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    MINUS_EQUALS    reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    LEFT_SHIFT_EQUALS reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    RIGHT_SHIFT_EQUALS reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    AND_EQUALS      reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    OR_EQUALS       reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    XOR_EQUALS      reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    STAR            reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    MODULUS         reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    PLUS            reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    MINUS           reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    LEFT_SHIFT      reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    RIGHT_SHIFT     reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    LESS_THAN       reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    GREATER_THAN    reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    LESS_THAN_EQUALS reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    GREATER_THAN_EQUALS reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    EQUALS_EQUALS   reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    NOT_EQUALS      reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    AND             reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    XOR             reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    OR              reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    AND_AND         reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    QUESTION_MARK   reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    OR_OR           reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    RIGHT_SQUARE_BRACKET reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    COLON           reduce using rule 28 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)


state 337

    (30) postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOT             reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS_PLUS       reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS_MINUS     reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIVIDE_EQUALS   reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MULTIPLY_EQUALS reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MODULUS_EQUALS  reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS_EQUALS     reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS_EQUALS    reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_SHIFT_EQUALS reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_SHIFT_EQUALS reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND_EQUALS      reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR_EQUALS       reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR_EQUALS      reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STAR            reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_SHIFT      reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_SHIFT     reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS_THAN_EQUALS reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    GREATER_THAN_EQUALS reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    EQUALS_EQUALS   reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR             reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND_AND         reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    QUESTION_MARK   reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR_OR           reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_SQUARE_BRACKET reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_CURLY_BRACKET reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 30 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)


state 338

    (36) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    assignment_expression          shift and go to state 356
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 339

    (42) unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .

    EQUALS          reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    DIVIDE_EQUALS   reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    MULTIPLY_EQUALS reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    MODULUS_EQUALS  reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    PLUS_EQUALS     reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    MINUS_EQUALS    reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    LEFT_SHIFT_EQUALS reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    RIGHT_SHIFT_EQUALS reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    AND_EQUALS      reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    OR_EQUALS       reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    XOR_EQUALS      reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    STAR            reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    LEFT_SHIFT      reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    RIGHT_SHIFT     reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    LESS_THAN_EQUALS reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    GREATER_THAN_EQUALS reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    EQUALS_EQUALS   reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    AND             reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    XOR             reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    OR              reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    AND_AND         reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    QUESTION_MARK   reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    OR_OR           reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    RIGHT_SQUARE_BRACKET reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    RIGHT_CURLY_BRACKET reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    COLON           reduce using rule 42 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)


state 340

    (185) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 185 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 185 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 185 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 185 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)


state 341

    (186) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET shift and go to state 357


state 342

    (189) direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 189 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 189 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 189 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 189 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 343

    (190) direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list . RIGHT_PARENTHESIS
    (131) parameter_list -> parameter_list . COMMA parameter_declaration

    RIGHT_PARENTHESIS shift and go to state 358
    COMMA           shift and go to state 239


state 344

    (182) direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 182 (direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 182 (direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 182 (direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 182 (direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS .)


state 345

    (188) direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 188 (direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 188 (direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 188 (direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 188 (direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)


state 346

    (184) direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 184 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 184 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 184 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 184 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)


state 347

    (144) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMICOLON       reduce using rule 144 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 144 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 348

    (142) struct_declarator -> declarator COLON conditional_expression .

    SEMICOLON       reduce using rule 142 (struct_declarator -> declarator COLON conditional_expression .)
    COMMA           reduce using rule 142 (struct_declarator -> declarator COLON conditional_expression .)


state 349

    (193) initializer_list -> initializer_list COMMA initializer .

    RIGHT_CURLY_BRACKET reduce using rule 193 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 193 (initializer_list -> initializer_list COMMA initializer .)


state 350

    (212) selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .
    (213) selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement . ELSE statement

    RIGHT_CURLY_BRACKET reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    LEFT_CURLY_BRACKET reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IDENTIFIER      reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    PLUS_PLUS       reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    MINUS_MINUS     reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SIZEOF          reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    AND             reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STAR            reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    PLUS            reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    MINUS           reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NOT             reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TILDE           reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    LEFT_PARENTHESIS reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NUMBER          reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DECIMAL_NUMBER  reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CHARACTER       reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRUE            reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FALSE           reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NULL            reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING_LITERAL  reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INPUT           reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    OUTPUT          reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SQUARE_ROOT     reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SIN             reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    COS             reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TAN             reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING_COPY     reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING_REVERSE  reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING_LENGTH   reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING_COMPARE  reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WRITE           reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    READ            reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    OPEN            reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSE            shift and go to state 359

  ! ELSE            [ reduce using rule 212 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .) ]


state 351

    (214) iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    SEMICOLON       reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    IF              reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    WHILE           reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    FOR             reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    GOTO            reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    BREAK           reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    CONTINUE        reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    RETURN          reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    IDENTIFIER      reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    PLUS_PLUS       reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    MINUS_MINUS     reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    SIZEOF          reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    AND             reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    STAR            reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    PLUS            reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    MINUS           reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    NOT             reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    TILDE           reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    LEFT_PARENTHESIS reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    NUMBER          reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    DECIMAL_NUMBER  reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    CHARACTER       reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    TRUE            reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    FALSE           reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    NULL            reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    STRING_LITERAL  reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    INPUT           reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    OUTPUT          reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    SQUARE_ROOT     reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    SIN             reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    COS             reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    TAN             reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    STRING_COPY     reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    STRING_REVERSE  reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    STRING_LENGTH   reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    STRING_COMPARE  reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    WRITE           reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    READ            reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    OPEN            reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    ELSE            reduce using rule 214 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)


state 352

    (215) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression . RIGHT_PARENTHESIS compound_statement
    (95) expression -> expression . COMMA assignment_expression

    RIGHT_PARENTHESIS shift and go to state 360
    COMMA           shift and go to state 179


state 353

    (217) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS . compound_statement
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 36

    compound_statement             shift and go to state 361

state 354

    (216) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement . expression RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement . RIGHT_PARENTHESIS compound_statement
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_PARENTHESIS shift and go to state 363
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    IDENTIFIER      shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    expression                     shift and go to state 362
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 355

    (80) conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .

    SEMICOLON       reduce using rule 80 (conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .)
    COMMA           reduce using rule 80 (conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 80 (conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .)
    RIGHT_PARENTHESIS reduce using rule 80 (conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 80 (conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .)
    COLON           reduce using rule 80 (conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .)


state 356

    (36) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RIGHT_PARENTHESIS reduce using rule 36 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 36 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 357

    (186) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 186 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 186 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 186 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 186 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)


state 358

    (190) direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 190 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 190 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 190 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 190 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)


state 359

    (213) selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE . statement
    (195) statement -> . compound_statement
    (196) statement -> . expression_statement
    (197) statement -> . selection_statement
    (198) statement -> . iteration_statement
    (199) statement -> . jump_statement
    (200) statement -> . labeled_statement
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (210) expression_statement -> . expression SEMICOLON
    (211) expression_statement -> . SEMICOLON
    (212) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (213) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (214) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (215) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (216) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (217) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (219) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (220) jump_statement -> . BREAK SEMICOLON
    (221) jump_statement -> . CONTINUE SEMICOLON
    (222) jump_statement -> . RETURN SEMICOLON
    (223) jump_statement -> . RETURN expression SEMICOLON
    (201) labeled_statement -> . IDENTIFIER COLON statement
    (94) expression -> . assignment_expression
    (95) expression -> . expression COMMA assignment_expression
    (81) assignment_expression -> . conditional_expression
    (82) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (79) conditional_expression -> . logical_or_expression
    (80) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (37) unary_expression -> . postfix_expression
    (38) unary_expression -> . PLUS_PLUS unary_expression
    (39) unary_expression -> . MINUS_MINUS unary_expression
    (40) unary_expression -> . unary_operator cast_expression
    (41) unary_expression -> . SIZEOF unary_expression
    (42) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (77) logical_or_expression -> . logical_and_expression
    (78) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (27) postfix_expression -> . primary_expression
    (28) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (29) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (30) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (33) postfix_expression -> . postfix_expression PLUS_PLUS
    (34) postfix_expression -> . postfix_expression MINUS_MINUS
    (43) unary_operator -> . AND
    (44) unary_operator -> . STAR
    (45) unary_operator -> . PLUS
    (46) unary_operator -> . MINUS
    (47) unary_operator -> . NOT
    (48) unary_operator -> . TILDE
    (75) logical_and_expression -> . or_expression
    (76) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (15) primary_expression -> . IDENTIFIER
    (16) primary_expression -> . constant
    (17) primary_expression -> . string
    (18) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (19) primary_expression -> . predefined_functions
    (73) or_expression -> . xor_expression
    (74) or_expression -> . or_expression OR xor_expression
    (20) constant -> . NUMBER
    (21) constant -> . DECIMAL_NUMBER
    (22) constant -> . CHARACTER
    (23) constant -> . TRUE
    (24) constant -> . FALSE
    (25) constant -> . NULL
    (26) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . OUTPUT
    (4) predefined_functions -> . SQUARE_ROOT
    (5) predefined_functions -> . SIN
    (6) predefined_functions -> . COS
    (7) predefined_functions -> . TAN
    (8) predefined_functions -> . STRING_COPY
    (9) predefined_functions -> . STRING_REVERSE
    (10) predefined_functions -> . STRING_LENGTH
    (11) predefined_functions -> . STRING_COMPARE
    (12) predefined_functions -> . WRITE
    (13) predefined_functions -> . READ
    (14) predefined_functions -> . OPEN
    (71) xor_expression -> . and_expression
    (72) xor_expression -> . xor_expression XOR and_expression
    (69) and_expression -> . equality_expression
    (70) and_expression -> . and_expression AND equality_expression
    (66) equality_expression -> . relational_expression
    (67) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (68) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (61) relational_expression -> . shift_expression
    (62) relational_expression -> . relational_expression LESS_THAN shift_expression
    (63) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (60) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (55) additive_expression -> . multiplicative_expression
    (56) additive_expression -> . additive_expression PLUS multiplicative_expression
    (57) additive_expression -> . additive_expression MINUS multiplicative_expression
    (51) multiplicative_expression -> . cast_expression
    (52) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (53) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (54) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (49) cast_expression -> . unary_expression
    (50) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    WHILE           shift and go to state 71
    FOR             shift and go to state 72
    GOTO            shift and go to state 73
    BREAK           shift and go to state 74
    CONTINUE        shift and go to state 75
    RETURN          shift and go to state 76
    IDENTIFIER      shift and go to state 67
    PLUS_PLUS       shift and go to state 82
    MINUS_MINUS     shift and go to state 83
    SIZEOF          shift and go to state 86
    AND             shift and go to state 89
    STAR            shift and go to state 90
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92
    NOT             shift and go to state 93
    TILDE           shift and go to state 94
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 100
    DECIMAL_NUMBER  shift and go to state 101
    CHARACTER       shift and go to state 102
    TRUE            shift and go to state 103
    FALSE           shift and go to state 104
    NULL            shift and go to state 105
    STRING_LITERAL  shift and go to state 106
    INPUT           shift and go to state 107
    OUTPUT          shift and go to state 108
    SQUARE_ROOT     shift and go to state 109
    SIN             shift and go to state 110
    COS             shift and go to state 111
    TAN             shift and go to state 112
    STRING_COPY     shift and go to state 113
    STRING_REVERSE  shift and go to state 114
    STRING_LENGTH   shift and go to state 115
    STRING_COMPARE  shift and go to state 116
    WRITE           shift and go to state 117
    READ            shift and go to state 118
    OPEN            shift and go to state 119

    expression                     shift and go to state 68
    statement                      shift and go to state 364
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    assignment_expression          shift and go to state 77
    conditional_expression         shift and go to state 78
    unary_expression               shift and go to state 79
    logical_or_expression          shift and go to state 80
    postfix_expression             shift and go to state 81
    unary_operator                 shift and go to state 84
    cast_expression                shift and go to state 85
    logical_and_expression         shift and go to state 87
    primary_expression             shift and go to state 88
    or_expression                  shift and go to state 95
    constant                       shift and go to state 96
    string                         shift and go to state 97
    predefined_functions           shift and go to state 98
    xor_expression                 shift and go to state 99
    and_expression                 shift and go to state 120
    equality_expression            shift and go to state 121
    relational_expression          shift and go to state 122
    shift_expression               shift and go to state 123
    additive_expression            shift and go to state 124
    multiplicative_expression      shift and go to state 125

state 360

    (215) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS . compound_statement
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 36

    compound_statement             shift and go to state 365

state 361

    (217) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SEMICOLON       reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    IF              reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    WHILE           reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    FOR             reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    GOTO            reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    BREAK           reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    CONTINUE        reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    RETURN          reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    IDENTIFIER      reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    PLUS_PLUS       reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    MINUS_MINUS     reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SIZEOF          reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    AND             reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STAR            reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    PLUS            reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    MINUS           reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    NOT             reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    TILDE           reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    LEFT_PARENTHESIS reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    NUMBER          reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    DECIMAL_NUMBER  reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    CHARACTER       reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    TRUE            reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    FALSE           reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    NULL            reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_LITERAL  reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    INPUT           reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    OUTPUT          reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SQUARE_ROOT     reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SIN             reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    COS             reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    TAN             reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_COPY     reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_REVERSE  reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_LENGTH   reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_COMPARE  reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    WRITE           reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    READ            reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    OPEN            reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    ELSE            reduce using rule 217 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)


state 362

    (216) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression . RIGHT_PARENTHESIS compound_statement
    (95) expression -> expression . COMMA assignment_expression

    RIGHT_PARENTHESIS shift and go to state 366
    COMMA           shift and go to state 179


state 363

    (218) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS . compound_statement
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 36

    compound_statement             shift and go to state 367

state 364

    (213) selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .

    RIGHT_CURLY_BRACKET reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    LEFT_CURLY_BRACKET reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    SEMICOLON       reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    IF              reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    WHILE           reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    FOR             reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    GOTO            reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    BREAK           reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    CONTINUE        reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    RETURN          reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    IDENTIFIER      reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    PLUS_PLUS       reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    MINUS_MINUS     reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    SIZEOF          reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    AND             reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    STAR            reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    PLUS            reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    MINUS           reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    NOT             reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    TILDE           reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    LEFT_PARENTHESIS reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    NUMBER          reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    DECIMAL_NUMBER  reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    CHARACTER       reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    TRUE            reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    FALSE           reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    NULL            reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    STRING_LITERAL  reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    INPUT           reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    OUTPUT          reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    SQUARE_ROOT     reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    SIN             reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    COS             reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    TAN             reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    STRING_COPY     reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    STRING_REVERSE  reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    STRING_LENGTH   reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    STRING_COMPARE  reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    WRITE           reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    READ            reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    OPEN            reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    ELSE            reduce using rule 213 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)


state 365

    (215) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SEMICOLON       reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    IF              reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    WHILE           reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    FOR             reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    GOTO            reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    BREAK           reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    CONTINUE        reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    RETURN          reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    IDENTIFIER      reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    PLUS_PLUS       reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    MINUS_MINUS     reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SIZEOF          reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    AND             reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STAR            reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    PLUS            reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    MINUS           reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    NOT             reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    TILDE           reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    LEFT_PARENTHESIS reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    NUMBER          reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    DECIMAL_NUMBER  reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    CHARACTER       reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    TRUE            reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    FALSE           reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    NULL            reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_LITERAL  reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    INPUT           reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    OUTPUT          reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SQUARE_ROOT     reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SIN             reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    COS             reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    TAN             reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_COPY     reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_REVERSE  reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_LENGTH   reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_COMPARE  reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    WRITE           reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    READ            reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    OPEN            reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    ELSE            reduce using rule 215 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)


state 366

    (216) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS . compound_statement
    (202) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (203) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (204) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 36

    compound_statement             shift and go to state 368

state 367

    (218) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SEMICOLON       reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    IF              reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    WHILE           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    FOR             reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    GOTO            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    BREAK           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    CONTINUE        reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    RETURN          reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    IDENTIFIER      reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    PLUS_PLUS       reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    MINUS_MINUS     reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SIZEOF          reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    AND             reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STAR            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    PLUS            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    MINUS           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    NOT             reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    TILDE           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    LEFT_PARENTHESIS reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    NUMBER          reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    DECIMAL_NUMBER  reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    CHARACTER       reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    TRUE            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    FALSE           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    NULL            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_LITERAL  reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    INPUT           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    OUTPUT          reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SQUARE_ROOT     reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SIN             reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    COS             reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    TAN             reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_COPY     reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_REVERSE  reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_LENGTH   reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_COMPARE  reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    WRITE           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    READ            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    OPEN            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    ELSE            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)


state 368

    (216) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SEMICOLON       reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    IF              reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    WHILE           reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    FOR             reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    GOTO            reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    BREAK           reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    CONTINUE        reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    RETURN          reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    IDENTIFIER      reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    PLUS_PLUS       reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    MINUS_MINUS     reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SIZEOF          reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    AND             reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STAR            reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    PLUS            reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    MINUS           reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    NOT             reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    TILDE           reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    LEFT_PARENTHESIS reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    NUMBER          reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    DECIMAL_NUMBER  reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    CHARACTER       reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    TRUE            reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    FALSE           reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    NULL            reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_LITERAL  reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    INPUT           reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    OUTPUT          reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SQUARE_ROOT     reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SIN             reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    COS             reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    TAN             reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_COPY     reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_REVERSE  reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_LENGTH   reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_COMPARE  reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    WRITE           reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    READ            reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    OPEN            reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    ELSE            reduce using rule 216 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)

