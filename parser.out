Created by PLY (http://www.dabeaz.com/ply)

Unused terminals:

    DEFINE
    HASH
    INCLUDE
    MULTILINE_COMMENT
    SCOPE_RESOLUTION
    THIS

Grammar

Rule 0     S' -> start
Rule 1     start -> translation_unit
Rule 2     predefined_functions -> INPUT
Rule 3     predefined_functions -> output
Rule 4     predefined_functions -> input
Rule 5     predefined_functions -> SQUARE_ROOT
Rule 6     predefined_functions -> SIN
Rule 7     predefined_functions -> COS
Rule 8     predefined_functions -> TAN
Rule 9     predefined_functions -> STRING_COPY
Rule 10    predefined_functions -> STRING_REVERSE
Rule 11    predefined_functions -> STRING_LENGTH
Rule 12    predefined_functions -> STRING_COMPARE
Rule 13    predefined_functions -> WRITE
Rule 14    predefined_functions -> READ
Rule 15    predefined_functions -> OPEN
Rule 16    output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
Rule 17    input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
Rule 18    primary_expression -> IDENTIFIER
Rule 19    primary_expression -> constant
Rule 20    primary_expression -> string
Rule 21    primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 22    primary_expression -> predefined_functions
Rule 23    constant -> NUMBER
Rule 24    constant -> DECIMAL_NUMBER
Rule 25    constant -> CHARACTER
Rule 26    constant -> TRUE
Rule 27    constant -> FALSE
Rule 28    constant -> NULL
Rule 29    string -> STRING_LITERAL
Rule 30    postfix_expression -> primary_expression
Rule 31    postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
Rule 32    postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 33    postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
Rule 34    postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 35    postfix_expression -> postfix_expression ARROW IDENTIFIER
Rule 36    postfix_expression -> postfix_expression PLUS_PLUS
Rule 37    postfix_expression -> postfix_expression MINUS_MINUS
Rule 38    argument_expression_list -> assignment_expression
Rule 39    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 40    unary_expression -> postfix_expression
Rule 41    unary_expression -> PLUS_PLUS unary_expression
Rule 42    unary_expression -> MINUS_MINUS unary_expression
Rule 43    unary_expression -> unary_operator cast_expression
Rule 44    unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
Rule 45    unary_operator -> AND
Rule 46    unary_operator -> STAR
Rule 47    unary_operator -> PLUS
Rule 48    unary_operator -> MINUS
Rule 49    unary_operator -> NOT
Rule 50    unary_operator -> TILDE
Rule 51    cast_expression -> unary_expression
Rule 52    cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
Rule 53    multiplicative_expression -> cast_expression
Rule 54    multiplicative_expression -> multiplicative_expression STAR cast_expression
Rule 55    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 56    multiplicative_expression -> multiplicative_expression MODULUS cast_expression
Rule 57    additive_expression -> multiplicative_expression
Rule 58    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 59    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 60    shift_expression -> additive_expression
Rule 61    shift_expression -> shift_expression LEFT_SHIFT additive_expression
Rule 62    shift_expression -> shift_expression RIGHT_SHIFT additive_expression
Rule 63    relational_expression -> shift_expression
Rule 64    relational_expression -> relational_expression LESS_THAN shift_expression
Rule 65    relational_expression -> relational_expression GREATER_THAN shift_expression
Rule 66    relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression
Rule 67    relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression
Rule 68    equality_expression -> relational_expression
Rule 69    equality_expression -> equality_expression EQUALS_EQUALS relational_expression
Rule 70    equality_expression -> equality_expression NOT_EQUALS relational_expression
Rule 71    and_expression -> equality_expression
Rule 72    and_expression -> and_expression AND equality_expression
Rule 73    xor_expression -> and_expression
Rule 74    xor_expression -> xor_expression XOR and_expression
Rule 75    or_expression -> xor_expression
Rule 76    or_expression -> or_expression OR xor_expression
Rule 77    logical_and_expression -> or_expression
Rule 78    logical_and_expression -> logical_and_expression AND_AND or_expression
Rule 79    logical_or_expression -> logical_and_expression
Rule 80    logical_or_expression -> logical_or_expression OR_OR logical_and_expression
Rule 81    conditional_expression -> logical_or_expression
Rule 82    conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression
Rule 83    assignment_expression -> conditional_expression
Rule 84    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 85    assignment_operator -> EQUALS
Rule 86    assignment_operator -> DIVIDE_EQUALS
Rule 87    assignment_operator -> MULTIPLY_EQUALS
Rule 88    assignment_operator -> MODULUS_EQUALS
Rule 89    assignment_operator -> PLUS_EQUALS
Rule 90    assignment_operator -> MINUS_EQUALS
Rule 91    assignment_operator -> LEFT_SHIFT_EQUALS
Rule 92    assignment_operator -> RIGHT_SHIFT_EQUALS
Rule 93    assignment_operator -> AND_EQUALS
Rule 94    assignment_operator -> OR_EQUALS
Rule 95    assignment_operator -> XOR_EQUALS
Rule 96    expression -> assignment_expression
Rule 97    expression -> expression COMMA assignment_expression
Rule 98    declaration -> type_specifier SEMICOLON
Rule 99    declaration -> type_specifier init_declarators_list SEMICOLON
Rule 100   declaration -> class_specifier
Rule 101   init_declarators_list -> init_declarator
Rule 102   init_declarators_list -> init_declarators_list COMMA init_declarator
Rule 103   init_declarator -> declarator EQUALS initializer
Rule 104   init_declarator -> declarator
Rule 105   type_specifier -> VOID
Rule 106   type_specifier -> CHAR
Rule 107   type_specifier -> INT
Rule 108   type_specifier -> FLOAT
Rule 109   type_specifier -> DOUBLE
Rule 110   type_specifier -> STRING
Rule 111   type_specifier -> BOOL
Rule 112   type_specifier -> LONG_LONG_INT
Rule 113   type_specifier -> UNSIGNED_INT
Rule 114   type_specifier -> struct_specifier
Rule 115   type_specifier -> CLASS IDENTIFIER
Rule 116   pointer -> STAR
Rule 117   pointer -> STAR pointer
Rule 118   identifier_list -> IDENTIFIER
Rule 119   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 120   specifier_list -> type_specifier specifier_list
Rule 121   specifier_list -> type_specifier
Rule 122   direct_declarator -> IDENTIFIER
Rule 123   direct_declarator -> MAIN
Rule 124   direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
Rule 125   direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
Rule 126   direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
Rule 127   direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
Rule 128   direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
Rule 129   direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 130   declarator -> pointer direct_declarator
Rule 131   declarator -> direct_declarator
Rule 132   parameter_list -> parameter_declaration
Rule 133   parameter_list -> parameter_list COMMA parameter_declaration
Rule 134   parameter_declaration -> type_specifier declarator
Rule 135   parameter_declaration -> type_specifier abstract_declarator
Rule 136   parameter_declaration -> type_specifier
Rule 137   struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
Rule 138   struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
Rule 139   struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
Rule 140   struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
Rule 141   struct_specifier -> STRUCT IDENTIFIER
Rule 142   struct_declarator -> declarator
Rule 143   struct_declarator -> COLON conditional_expression
Rule 144   struct_declarator -> declarator COLON conditional_expression
Rule 145   struct_declarator_list -> struct_declarator
Rule 146   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 147   struct_declaration -> specifier_list struct_declarator_list SEMICOLON
Rule 148   struct_declaration_list -> struct_declaration
Rule 149   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 150   class_head -> CLASS base_clause
Rule 151   class_head -> CLASS
Rule 152   class_head -> CLASS IDENTIFIER base_clause
Rule 153   class_head -> CLASS IDENTIFIER
Rule 154   class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
Rule 155   class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
Rule 156   member_list -> member_access_list
Rule 157   member_list -> access_list
Rule 158   member_list -> member_list access_list
Rule 159   member_declarator -> init_declarator
Rule 160   member_declarator_list -> member_declarator
Rule 161   member_declarator_list -> member_declarator_list COMMA member_declarator
Rule 162   member_declaration -> type_specifier member_declarator_list SEMICOLON
Rule 163   member_declaration -> member_declarator_list SEMICOLON
Rule 164   member_declaration -> type_specifier SEMICOLON
Rule 165   member_declaration -> SEMICOLON
Rule 166   member_declaration -> function_definition
Rule 167   member_declaration -> class_specifier
Rule 168   access_list -> access_specifier COLON member_access_list
Rule 169   access_list -> access_specifier COLON
Rule 170   member_access_list -> member_declaration member_access_list
Rule 171   member_access_list -> member_declaration
Rule 172   base_clause -> COLON base_specifier_list
Rule 173   base_specifier_list -> base_specifier
Rule 174   base_specifier_list -> base_specifier_list COMMA base_specifier
Rule 175   base_specifier -> CLASS IDENTIFIER
Rule 176   base_specifier -> access_specifier CLASS IDENTIFIER
Rule 177   base_specifier -> IDENTIFIER
Rule 178   base_specifier -> access_specifier IDENTIFIER
Rule 179   access_specifier -> PRIVATE
Rule 180   access_specifier -> PUBLIC
Rule 181   abstract_declarator -> pointer
Rule 182   abstract_declarator -> direct_abstract_declarator
Rule 183   abstract_declarator -> pointer direct_abstract_declarator
Rule 184   direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS
Rule 185   direct_abstract_declarator -> LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
Rule 186   direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
Rule 187   direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
Rule 188   direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
Rule 189   direct_abstract_declarator -> LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 190   direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
Rule 191   direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
Rule 192   direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
Rule 193   initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET
Rule 194   initializer -> assignment_expression
Rule 195   initializer_list -> initializer_list COMMA initializer
Rule 196   initializer_list -> initializer
Rule 197   statement -> compound_statement
Rule 198   statement -> expression_statement
Rule 199   statement -> selection_statement
Rule 200   statement -> iteration_statement
Rule 201   statement -> jump_statement
Rule 202   statement -> labeled_statement
Rule 203   labeled_statement -> IDENTIFIER COLON statement
Rule 204   compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
Rule 205   compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
Rule 206   compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
Rule 207   compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
Rule 208   declaration_list -> declaration_list declaration
Rule 209   declaration_list -> declaration
Rule 210   statement_list -> statement
Rule 211   statement_list -> statement_list statement
Rule 212   expression_statement -> expression SEMICOLON
Rule 213   expression_statement -> SEMICOLON
Rule 214   selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
Rule 215   selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
Rule 216   selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
Rule 217   iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
Rule 218   iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
Rule 219   iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
Rule 220   iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
Rule 221   iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
Rule 222   jump_statement -> GOTO IDENTIFIER SEMICOLON
Rule 223   jump_statement -> BREAK SEMICOLON
Rule 224   jump_statement -> CONTINUE SEMICOLON
Rule 225   jump_statement -> RETURN SEMICOLON
Rule 226   jump_statement -> RETURN expression SEMICOLON
Rule 227   translation_unit -> translation_unit external_declaration
Rule 228   translation_unit -> external_declaration
Rule 229   external_declaration -> function_definition
Rule 230   external_declaration -> declaration
Rule 231   function_definition -> type_specifier declarator declaration_list compound_statement
Rule 232   function_definition -> type_specifier declarator compound_statement
Rule 233   function_definition -> declarator declaration_list compound_statement
Rule 234   function_definition -> declarator compound_statement

Terminals, with rules where they appear

AND                  : 45 72
AND_AND              : 78
AND_EQUALS           : 93
ARROW                : 35
ASSERT               : 216
BOOL                 : 111
BREAK                : 223
CHAR                 : 106
CHARACTER            : 25
CLASS                : 115 150 151 152 153 175 176
COLON                : 82 143 144 168 169 172 203
COMMA                : 39 97 102 119 133 146 161 174 195
CONTINUE             : 224
COS                  : 7
DECIMAL_NUMBER       : 24
DEFINE               : 
DIVIDE               : 55
DIVIDE_EQUALS        : 86
DOT                  : 34
DOUBLE               : 109
ELSE                 : 215
EQUALS               : 85 103
EQUALS_EQUALS        : 69
FALSE                : 27
FLOAT                : 108
FOR                  : 218 219 220 221
GOTO                 : 222
GREATER_THAN         : 65
GREATER_THAN_EQUALS  : 67
HASH                 : 
IDENTIFIER           : 18 34 35 115 118 119 122 137 139 141 152 153 175 176 177 178 203 222
IF                   : 214 215
INCLUDE              : 
INPUT                : 2 17
INT                  : 107
LEFT_CURLY_BRACKET   : 137 138 139 140 154 155 193 204 205 206 207
LEFT_PARENTHESIS     : 16 17 21 32 33 44 52 124 127 128 129 184 189 190 191 192 214 215 216 217 218 219 220 221
LEFT_SHIFT           : 61
LEFT_SHIFT_EQUALS    : 91
LEFT_SQUARE_BRACKET  : 31 125 126 185 186 187 188
LESS_THAN            : 64
LESS_THAN_EQUALS     : 66
LONG_LONG_INT        : 112
MAIN                 : 123
MINUS                : 48 59
MINUS_EQUALS         : 90
MINUS_MINUS          : 37 42
MODULUS              : 56
MODULUS_EQUALS       : 88
MULTILINE_COMMENT    : 
MULTIPLY_EQUALS      : 87
NOT                  : 49
NOT_EQUALS           : 70
NULL                 : 28
NUMBER               : 23
OPEN                 : 15
OR                   : 76
OR_EQUALS            : 94
OR_OR                : 80
OUTPUT               : 16
PLUS                 : 47 58
PLUS_EQUALS          : 89
PLUS_PLUS            : 36 41
PRIVATE              : 179
PUBLIC               : 180
QUESTION_MARK        : 82
READ                 : 14
RETURN               : 225 226
RIGHT_CURLY_BRACKET  : 137 138 139 140 154 155 193 204 205 206 207
RIGHT_PARENTHESIS    : 16 17 21 32 33 44 52 124 127 128 129 184 189 190 191 192 214 215 216 217 218 219 220 221
RIGHT_SHIFT          : 62
RIGHT_SHIFT_EQUALS   : 92
RIGHT_SQUARE_BRACKET : 31 125 126 185 186 187 188
SCOPE_RESOLUTION     : 
SEMICOLON            : 98 99 147 154 155 162 163 164 165 212 213 216 222 223 224 225 226
SIN                  : 6
SIZEOF               : 44
SQUARE_ROOT          : 5
STAR                 : 46 54 116 117
STRING               : 110
STRING_COMPARE       : 12
STRING_COPY          : 9
STRING_LENGTH        : 11
STRING_LITERAL       : 29
STRING_REVERSE       : 10
STRUCT               : 137 138 139 140 141
TAN                  : 8
THIS                 : 
TILDE                : 50
TRUE                 : 26
UNSIGNED_INT         : 113
VOID                 : 105
WHILE                : 217
WRITE                : 13
XOR                  : 74
XOR_EQUALS           : 95
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 135 184
access_list          : 157 158
access_specifier     : 168 169 176 178
additive_expression  : 58 59 60 61 62
and_expression       : 72 73 74
argument_expression_list : 33 39
assignment_expression : 38 39 84 96 97 194
assignment_operator  : 84
base_clause          : 150 152
base_specifier       : 173 174
base_specifier_list  : 172 174
cast_expression      : 43 52 53 54 55 56
class_head           : 154 155
class_specifier      : 100 167
compound_statement   : 197 217 218 219 220 221 231 232 233 234
conditional_expression : 82 83 125 143 144 186 188
constant             : 19
declaration          : 208 209 230
declaration_list     : 204 205 208 231 233
declarator           : 103 104 124 134 142 144 231 232 233 234
direct_abstract_declarator : 182 183 187 188 191 192
direct_declarator    : 125 126 127 128 129 130 131
equality_expression  : 69 70 71 72
expression           : 21 31 82 97 212 214 215 216 217 218 219 226
expression_statement : 198 218 218 219 219 220 220 221 221
external_declaration : 227 228
function_definition  : 166 229
identifier_list      : 119 128
init_declarator      : 101 102 159
init_declarators_list : 99 102
initializer          : 103 195 196
initializer_list     : 193 195
input                : 4
iteration_statement  : 200
jump_statement       : 201
labeled_statement    : 202
logical_and_expression : 78 79 80
logical_or_expression : 80 81 82
member_access_list   : 156 168 170
member_declaration   : 170 171
member_declarator    : 160 161
member_declarator_list : 161 162 163
member_list          : 154 158
multiplicative_expression : 54 55 56 57 58 59
or_expression        : 76 77 78
output               : 3
parameter_declaration : 132 133
parameter_list       : 127 133 190 192
pointer              : 117 130 181 183
postfix_expression   : 31 32 33 34 35 36 37 40
predefined_functions : 22
primary_expression   : 16 17 30
relational_expression : 64 65 66 67 68 69 70
selection_statement  : 199
shift_expression     : 61 62 63 64 65 66 67
specifier_list       : 120 147
start                : 0
statement            : 203 210 211 214 215 215
statement_list       : 204 206 211
string               : 20
struct_declaration   : 148 149
struct_declaration_list : 137 138 149
struct_declarator    : 145 146
struct_declarator_list : 146 147
struct_specifier     : 114
translation_unit     : 1 227
type_specifier       : 44 52 98 99 120 121 134 135 136 162 164 219 221 231 232
unary_expression     : 41 42 51 84
unary_operator       : 43
xor_expression       : 74 75 76


state 0

    (0) S' -> . start
    (1) start -> . translation_unit
    (227) translation_unit -> . translation_unit external_declaration
    (228) translation_unit -> . external_declaration
    (229) external_declaration -> . function_definition
    (230) external_declaration -> . declaration
    (231) function_definition -> . type_specifier declarator declaration_list compound_statement
    (232) function_definition -> . type_specifier declarator compound_statement
    (233) function_definition -> . declarator declaration_list compound_statement
    (234) function_definition -> . declarator compound_statement
    (98) declaration -> . type_specifier SEMICOLON
    (99) declaration -> . type_specifier init_declarators_list SEMICOLON
    (100) declaration -> . class_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (154) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (150) class_head -> . CLASS base_clause
    (151) class_head -> . CLASS
    (152) class_head -> . CLASS IDENTIFIER base_clause
    (153) class_head -> . CLASS IDENTIFIER

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    start                          shift and go to state 1
    translation_unit               shift and go to state 2
    external_declaration           shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    declarator                     shift and go to state 7
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22
    class_head                     shift and go to state 23

state 1

    (0) S' -> start .



state 2

    (1) start -> translation_unit .
    (227) translation_unit -> translation_unit . external_declaration
    (229) external_declaration -> . function_definition
    (230) external_declaration -> . declaration
    (231) function_definition -> . type_specifier declarator declaration_list compound_statement
    (232) function_definition -> . type_specifier declarator compound_statement
    (233) function_definition -> . declarator declaration_list compound_statement
    (234) function_definition -> . declarator compound_statement
    (98) declaration -> . type_specifier SEMICOLON
    (99) declaration -> . type_specifier init_declarators_list SEMICOLON
    (100) declaration -> . class_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (154) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (150) class_head -> . CLASS base_clause
    (151) class_head -> . CLASS
    (152) class_head -> . CLASS IDENTIFIER base_clause
    (153) class_head -> . CLASS IDENTIFIER

    $end            reduce using rule 1 (start -> translation_unit .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    external_declaration           shift and go to state 28
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    declarator                     shift and go to state 7
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22
    class_head                     shift and go to state 23

state 3

    (228) translation_unit -> external_declaration .

    VOID            reduce using rule 228 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 228 (translation_unit -> external_declaration .)
    INT             reduce using rule 228 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 228 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 228 (translation_unit -> external_declaration .)
    STRING          reduce using rule 228 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 228 (translation_unit -> external_declaration .)
    LONG_LONG_INT   reduce using rule 228 (translation_unit -> external_declaration .)
    UNSIGNED_INT    reduce using rule 228 (translation_unit -> external_declaration .)
    CLASS           reduce using rule 228 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 228 (translation_unit -> external_declaration .)
    STAR            reduce using rule 228 (translation_unit -> external_declaration .)
    IDENTIFIER      reduce using rule 228 (translation_unit -> external_declaration .)
    MAIN            reduce using rule 228 (translation_unit -> external_declaration .)
    LEFT_PARENTHESIS reduce using rule 228 (translation_unit -> external_declaration .)
    $end            reduce using rule 228 (translation_unit -> external_declaration .)


state 4

    (229) external_declaration -> function_definition .

    VOID            reduce using rule 229 (external_declaration -> function_definition .)
    CHAR            reduce using rule 229 (external_declaration -> function_definition .)
    INT             reduce using rule 229 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 229 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 229 (external_declaration -> function_definition .)
    STRING          reduce using rule 229 (external_declaration -> function_definition .)
    BOOL            reduce using rule 229 (external_declaration -> function_definition .)
    LONG_LONG_INT   reduce using rule 229 (external_declaration -> function_definition .)
    UNSIGNED_INT    reduce using rule 229 (external_declaration -> function_definition .)
    CLASS           reduce using rule 229 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 229 (external_declaration -> function_definition .)
    STAR            reduce using rule 229 (external_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 229 (external_declaration -> function_definition .)
    MAIN            reduce using rule 229 (external_declaration -> function_definition .)
    LEFT_PARENTHESIS reduce using rule 229 (external_declaration -> function_definition .)
    $end            reduce using rule 229 (external_declaration -> function_definition .)


state 5

    (230) external_declaration -> declaration .

    VOID            reduce using rule 230 (external_declaration -> declaration .)
    CHAR            reduce using rule 230 (external_declaration -> declaration .)
    INT             reduce using rule 230 (external_declaration -> declaration .)
    FLOAT           reduce using rule 230 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 230 (external_declaration -> declaration .)
    STRING          reduce using rule 230 (external_declaration -> declaration .)
    BOOL            reduce using rule 230 (external_declaration -> declaration .)
    LONG_LONG_INT   reduce using rule 230 (external_declaration -> declaration .)
    UNSIGNED_INT    reduce using rule 230 (external_declaration -> declaration .)
    CLASS           reduce using rule 230 (external_declaration -> declaration .)
    STRUCT          reduce using rule 230 (external_declaration -> declaration .)
    STAR            reduce using rule 230 (external_declaration -> declaration .)
    IDENTIFIER      reduce using rule 230 (external_declaration -> declaration .)
    MAIN            reduce using rule 230 (external_declaration -> declaration .)
    LEFT_PARENTHESIS reduce using rule 230 (external_declaration -> declaration .)
    $end            reduce using rule 230 (external_declaration -> declaration .)


state 6

    (231) function_definition -> type_specifier . declarator declaration_list compound_statement
    (232) function_definition -> type_specifier . declarator compound_statement
    (98) declaration -> type_specifier . SEMICOLON
    (99) declaration -> type_specifier . init_declarators_list SEMICOLON
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (101) init_declarators_list -> . init_declarator
    (102) init_declarators_list -> . init_declarators_list COMMA init_declarator
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (103) init_declarator -> . declarator EQUALS initializer
    (104) init_declarator -> . declarator

    SEMICOLON       shift and go to state 30
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    declarator                     shift and go to state 29
    init_declarators_list          shift and go to state 31
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22
    init_declarator                shift and go to state 32

state 7

    (233) function_definition -> declarator . declaration_list compound_statement
    (234) function_definition -> declarator . compound_statement
    (208) declaration_list -> . declaration_list declaration
    (209) declaration_list -> . declaration
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (98) declaration -> . type_specifier SEMICOLON
    (99) declaration -> . type_specifier init_declarators_list SEMICOLON
    (100) declaration -> . class_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (154) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (150) class_head -> . CLASS base_clause
    (151) class_head -> . CLASS
    (152) class_head -> . CLASS IDENTIFIER base_clause
    (153) class_head -> . CLASS IDENTIFIER

    LEFT_CURLY_BRACKET shift and go to state 36
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24

    declaration_list               shift and go to state 33
    compound_statement             shift and go to state 34
    declaration                    shift and go to state 35
    type_specifier                 shift and go to state 37
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23

state 8

    (100) declaration -> class_specifier .

    VOID            reduce using rule 100 (declaration -> class_specifier .)
    CHAR            reduce using rule 100 (declaration -> class_specifier .)
    INT             reduce using rule 100 (declaration -> class_specifier .)
    FLOAT           reduce using rule 100 (declaration -> class_specifier .)
    DOUBLE          reduce using rule 100 (declaration -> class_specifier .)
    STRING          reduce using rule 100 (declaration -> class_specifier .)
    BOOL            reduce using rule 100 (declaration -> class_specifier .)
    LONG_LONG_INT   reduce using rule 100 (declaration -> class_specifier .)
    UNSIGNED_INT    reduce using rule 100 (declaration -> class_specifier .)
    CLASS           reduce using rule 100 (declaration -> class_specifier .)
    STRUCT          reduce using rule 100 (declaration -> class_specifier .)
    STAR            reduce using rule 100 (declaration -> class_specifier .)
    IDENTIFIER      reduce using rule 100 (declaration -> class_specifier .)
    MAIN            reduce using rule 100 (declaration -> class_specifier .)
    LEFT_PARENTHESIS reduce using rule 100 (declaration -> class_specifier .)
    $end            reduce using rule 100 (declaration -> class_specifier .)
    LEFT_CURLY_BRACKET reduce using rule 100 (declaration -> class_specifier .)
    RIGHT_CURLY_BRACKET reduce using rule 100 (declaration -> class_specifier .)
    SEMICOLON       reduce using rule 100 (declaration -> class_specifier .)
    IF              reduce using rule 100 (declaration -> class_specifier .)
    ASSERT          reduce using rule 100 (declaration -> class_specifier .)
    WHILE           reduce using rule 100 (declaration -> class_specifier .)
    FOR             reduce using rule 100 (declaration -> class_specifier .)
    GOTO            reduce using rule 100 (declaration -> class_specifier .)
    BREAK           reduce using rule 100 (declaration -> class_specifier .)
    CONTINUE        reduce using rule 100 (declaration -> class_specifier .)
    RETURN          reduce using rule 100 (declaration -> class_specifier .)
    PLUS_PLUS       reduce using rule 100 (declaration -> class_specifier .)
    MINUS_MINUS     reduce using rule 100 (declaration -> class_specifier .)
    SIZEOF          reduce using rule 100 (declaration -> class_specifier .)
    AND             reduce using rule 100 (declaration -> class_specifier .)
    PLUS            reduce using rule 100 (declaration -> class_specifier .)
    MINUS           reduce using rule 100 (declaration -> class_specifier .)
    NOT             reduce using rule 100 (declaration -> class_specifier .)
    TILDE           reduce using rule 100 (declaration -> class_specifier .)
    NUMBER          reduce using rule 100 (declaration -> class_specifier .)
    DECIMAL_NUMBER  reduce using rule 100 (declaration -> class_specifier .)
    CHARACTER       reduce using rule 100 (declaration -> class_specifier .)
    TRUE            reduce using rule 100 (declaration -> class_specifier .)
    FALSE           reduce using rule 100 (declaration -> class_specifier .)
    NULL            reduce using rule 100 (declaration -> class_specifier .)
    STRING_LITERAL  reduce using rule 100 (declaration -> class_specifier .)
    INPUT           reduce using rule 100 (declaration -> class_specifier .)
    SQUARE_ROOT     reduce using rule 100 (declaration -> class_specifier .)
    SIN             reduce using rule 100 (declaration -> class_specifier .)
    COS             reduce using rule 100 (declaration -> class_specifier .)
    TAN             reduce using rule 100 (declaration -> class_specifier .)
    STRING_COPY     reduce using rule 100 (declaration -> class_specifier .)
    STRING_REVERSE  reduce using rule 100 (declaration -> class_specifier .)
    STRING_LENGTH   reduce using rule 100 (declaration -> class_specifier .)
    STRING_COMPARE  reduce using rule 100 (declaration -> class_specifier .)
    WRITE           reduce using rule 100 (declaration -> class_specifier .)
    READ            reduce using rule 100 (declaration -> class_specifier .)
    OPEN            reduce using rule 100 (declaration -> class_specifier .)
    OUTPUT          reduce using rule 100 (declaration -> class_specifier .)


state 9

    (105) type_specifier -> VOID .

    SEMICOLON       reduce using rule 105 (type_specifier -> VOID .)
    STAR            reduce using rule 105 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 105 (type_specifier -> VOID .)
    MAIN            reduce using rule 105 (type_specifier -> VOID .)
    LEFT_PARENTHESIS reduce using rule 105 (type_specifier -> VOID .)
    LEFT_SQUARE_BRACKET reduce using rule 105 (type_specifier -> VOID .)
    RIGHT_PARENTHESIS reduce using rule 105 (type_specifier -> VOID .)
    COMMA           reduce using rule 105 (type_specifier -> VOID .)
    VOID            reduce using rule 105 (type_specifier -> VOID .)
    CHAR            reduce using rule 105 (type_specifier -> VOID .)
    INT             reduce using rule 105 (type_specifier -> VOID .)
    FLOAT           reduce using rule 105 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 105 (type_specifier -> VOID .)
    STRING          reduce using rule 105 (type_specifier -> VOID .)
    BOOL            reduce using rule 105 (type_specifier -> VOID .)
    LONG_LONG_INT   reduce using rule 105 (type_specifier -> VOID .)
    UNSIGNED_INT    reduce using rule 105 (type_specifier -> VOID .)
    CLASS           reduce using rule 105 (type_specifier -> VOID .)
    STRUCT          reduce using rule 105 (type_specifier -> VOID .)
    COLON           reduce using rule 105 (type_specifier -> VOID .)
    PLUS_PLUS       reduce using rule 105 (type_specifier -> VOID .)
    MINUS_MINUS     reduce using rule 105 (type_specifier -> VOID .)
    SIZEOF          reduce using rule 105 (type_specifier -> VOID .)
    AND             reduce using rule 105 (type_specifier -> VOID .)
    PLUS            reduce using rule 105 (type_specifier -> VOID .)
    MINUS           reduce using rule 105 (type_specifier -> VOID .)
    NOT             reduce using rule 105 (type_specifier -> VOID .)
    TILDE           reduce using rule 105 (type_specifier -> VOID .)
    NUMBER          reduce using rule 105 (type_specifier -> VOID .)
    DECIMAL_NUMBER  reduce using rule 105 (type_specifier -> VOID .)
    CHARACTER       reduce using rule 105 (type_specifier -> VOID .)
    TRUE            reduce using rule 105 (type_specifier -> VOID .)
    FALSE           reduce using rule 105 (type_specifier -> VOID .)
    NULL            reduce using rule 105 (type_specifier -> VOID .)
    STRING_LITERAL  reduce using rule 105 (type_specifier -> VOID .)
    INPUT           reduce using rule 105 (type_specifier -> VOID .)
    SQUARE_ROOT     reduce using rule 105 (type_specifier -> VOID .)
    SIN             reduce using rule 105 (type_specifier -> VOID .)
    COS             reduce using rule 105 (type_specifier -> VOID .)
    TAN             reduce using rule 105 (type_specifier -> VOID .)
    STRING_COPY     reduce using rule 105 (type_specifier -> VOID .)
    STRING_REVERSE  reduce using rule 105 (type_specifier -> VOID .)
    STRING_LENGTH   reduce using rule 105 (type_specifier -> VOID .)
    STRING_COMPARE  reduce using rule 105 (type_specifier -> VOID .)
    WRITE           reduce using rule 105 (type_specifier -> VOID .)
    READ            reduce using rule 105 (type_specifier -> VOID .)
    OPEN            reduce using rule 105 (type_specifier -> VOID .)
    OUTPUT          reduce using rule 105 (type_specifier -> VOID .)


state 10

    (106) type_specifier -> CHAR .

    SEMICOLON       reduce using rule 106 (type_specifier -> CHAR .)
    STAR            reduce using rule 106 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 106 (type_specifier -> CHAR .)
    MAIN            reduce using rule 106 (type_specifier -> CHAR .)
    LEFT_PARENTHESIS reduce using rule 106 (type_specifier -> CHAR .)
    LEFT_SQUARE_BRACKET reduce using rule 106 (type_specifier -> CHAR .)
    RIGHT_PARENTHESIS reduce using rule 106 (type_specifier -> CHAR .)
    COMMA           reduce using rule 106 (type_specifier -> CHAR .)
    VOID            reduce using rule 106 (type_specifier -> CHAR .)
    CHAR            reduce using rule 106 (type_specifier -> CHAR .)
    INT             reduce using rule 106 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 106 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 106 (type_specifier -> CHAR .)
    STRING          reduce using rule 106 (type_specifier -> CHAR .)
    BOOL            reduce using rule 106 (type_specifier -> CHAR .)
    LONG_LONG_INT   reduce using rule 106 (type_specifier -> CHAR .)
    UNSIGNED_INT    reduce using rule 106 (type_specifier -> CHAR .)
    CLASS           reduce using rule 106 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 106 (type_specifier -> CHAR .)
    COLON           reduce using rule 106 (type_specifier -> CHAR .)
    PLUS_PLUS       reduce using rule 106 (type_specifier -> CHAR .)
    MINUS_MINUS     reduce using rule 106 (type_specifier -> CHAR .)
    SIZEOF          reduce using rule 106 (type_specifier -> CHAR .)
    AND             reduce using rule 106 (type_specifier -> CHAR .)
    PLUS            reduce using rule 106 (type_specifier -> CHAR .)
    MINUS           reduce using rule 106 (type_specifier -> CHAR .)
    NOT             reduce using rule 106 (type_specifier -> CHAR .)
    TILDE           reduce using rule 106 (type_specifier -> CHAR .)
    NUMBER          reduce using rule 106 (type_specifier -> CHAR .)
    DECIMAL_NUMBER  reduce using rule 106 (type_specifier -> CHAR .)
    CHARACTER       reduce using rule 106 (type_specifier -> CHAR .)
    TRUE            reduce using rule 106 (type_specifier -> CHAR .)
    FALSE           reduce using rule 106 (type_specifier -> CHAR .)
    NULL            reduce using rule 106 (type_specifier -> CHAR .)
    STRING_LITERAL  reduce using rule 106 (type_specifier -> CHAR .)
    INPUT           reduce using rule 106 (type_specifier -> CHAR .)
    SQUARE_ROOT     reduce using rule 106 (type_specifier -> CHAR .)
    SIN             reduce using rule 106 (type_specifier -> CHAR .)
    COS             reduce using rule 106 (type_specifier -> CHAR .)
    TAN             reduce using rule 106 (type_specifier -> CHAR .)
    STRING_COPY     reduce using rule 106 (type_specifier -> CHAR .)
    STRING_REVERSE  reduce using rule 106 (type_specifier -> CHAR .)
    STRING_LENGTH   reduce using rule 106 (type_specifier -> CHAR .)
    STRING_COMPARE  reduce using rule 106 (type_specifier -> CHAR .)
    WRITE           reduce using rule 106 (type_specifier -> CHAR .)
    READ            reduce using rule 106 (type_specifier -> CHAR .)
    OPEN            reduce using rule 106 (type_specifier -> CHAR .)
    OUTPUT          reduce using rule 106 (type_specifier -> CHAR .)


state 11

    (107) type_specifier -> INT .

    SEMICOLON       reduce using rule 107 (type_specifier -> INT .)
    STAR            reduce using rule 107 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 107 (type_specifier -> INT .)
    MAIN            reduce using rule 107 (type_specifier -> INT .)
    LEFT_PARENTHESIS reduce using rule 107 (type_specifier -> INT .)
    LEFT_SQUARE_BRACKET reduce using rule 107 (type_specifier -> INT .)
    RIGHT_PARENTHESIS reduce using rule 107 (type_specifier -> INT .)
    COMMA           reduce using rule 107 (type_specifier -> INT .)
    VOID            reduce using rule 107 (type_specifier -> INT .)
    CHAR            reduce using rule 107 (type_specifier -> INT .)
    INT             reduce using rule 107 (type_specifier -> INT .)
    FLOAT           reduce using rule 107 (type_specifier -> INT .)
    DOUBLE          reduce using rule 107 (type_specifier -> INT .)
    STRING          reduce using rule 107 (type_specifier -> INT .)
    BOOL            reduce using rule 107 (type_specifier -> INT .)
    LONG_LONG_INT   reduce using rule 107 (type_specifier -> INT .)
    UNSIGNED_INT    reduce using rule 107 (type_specifier -> INT .)
    CLASS           reduce using rule 107 (type_specifier -> INT .)
    STRUCT          reduce using rule 107 (type_specifier -> INT .)
    COLON           reduce using rule 107 (type_specifier -> INT .)
    PLUS_PLUS       reduce using rule 107 (type_specifier -> INT .)
    MINUS_MINUS     reduce using rule 107 (type_specifier -> INT .)
    SIZEOF          reduce using rule 107 (type_specifier -> INT .)
    AND             reduce using rule 107 (type_specifier -> INT .)
    PLUS            reduce using rule 107 (type_specifier -> INT .)
    MINUS           reduce using rule 107 (type_specifier -> INT .)
    NOT             reduce using rule 107 (type_specifier -> INT .)
    TILDE           reduce using rule 107 (type_specifier -> INT .)
    NUMBER          reduce using rule 107 (type_specifier -> INT .)
    DECIMAL_NUMBER  reduce using rule 107 (type_specifier -> INT .)
    CHARACTER       reduce using rule 107 (type_specifier -> INT .)
    TRUE            reduce using rule 107 (type_specifier -> INT .)
    FALSE           reduce using rule 107 (type_specifier -> INT .)
    NULL            reduce using rule 107 (type_specifier -> INT .)
    STRING_LITERAL  reduce using rule 107 (type_specifier -> INT .)
    INPUT           reduce using rule 107 (type_specifier -> INT .)
    SQUARE_ROOT     reduce using rule 107 (type_specifier -> INT .)
    SIN             reduce using rule 107 (type_specifier -> INT .)
    COS             reduce using rule 107 (type_specifier -> INT .)
    TAN             reduce using rule 107 (type_specifier -> INT .)
    STRING_COPY     reduce using rule 107 (type_specifier -> INT .)
    STRING_REVERSE  reduce using rule 107 (type_specifier -> INT .)
    STRING_LENGTH   reduce using rule 107 (type_specifier -> INT .)
    STRING_COMPARE  reduce using rule 107 (type_specifier -> INT .)
    WRITE           reduce using rule 107 (type_specifier -> INT .)
    READ            reduce using rule 107 (type_specifier -> INT .)
    OPEN            reduce using rule 107 (type_specifier -> INT .)
    OUTPUT          reduce using rule 107 (type_specifier -> INT .)


state 12

    (108) type_specifier -> FLOAT .

    SEMICOLON       reduce using rule 108 (type_specifier -> FLOAT .)
    STAR            reduce using rule 108 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 108 (type_specifier -> FLOAT .)
    MAIN            reduce using rule 108 (type_specifier -> FLOAT .)
    LEFT_PARENTHESIS reduce using rule 108 (type_specifier -> FLOAT .)
    LEFT_SQUARE_BRACKET reduce using rule 108 (type_specifier -> FLOAT .)
    RIGHT_PARENTHESIS reduce using rule 108 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 108 (type_specifier -> FLOAT .)
    VOID            reduce using rule 108 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 108 (type_specifier -> FLOAT .)
    INT             reduce using rule 108 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 108 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 108 (type_specifier -> FLOAT .)
    STRING          reduce using rule 108 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 108 (type_specifier -> FLOAT .)
    LONG_LONG_INT   reduce using rule 108 (type_specifier -> FLOAT .)
    UNSIGNED_INT    reduce using rule 108 (type_specifier -> FLOAT .)
    CLASS           reduce using rule 108 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 108 (type_specifier -> FLOAT .)
    COLON           reduce using rule 108 (type_specifier -> FLOAT .)
    PLUS_PLUS       reduce using rule 108 (type_specifier -> FLOAT .)
    MINUS_MINUS     reduce using rule 108 (type_specifier -> FLOAT .)
    SIZEOF          reduce using rule 108 (type_specifier -> FLOAT .)
    AND             reduce using rule 108 (type_specifier -> FLOAT .)
    PLUS            reduce using rule 108 (type_specifier -> FLOAT .)
    MINUS           reduce using rule 108 (type_specifier -> FLOAT .)
    NOT             reduce using rule 108 (type_specifier -> FLOAT .)
    TILDE           reduce using rule 108 (type_specifier -> FLOAT .)
    NUMBER          reduce using rule 108 (type_specifier -> FLOAT .)
    DECIMAL_NUMBER  reduce using rule 108 (type_specifier -> FLOAT .)
    CHARACTER       reduce using rule 108 (type_specifier -> FLOAT .)
    TRUE            reduce using rule 108 (type_specifier -> FLOAT .)
    FALSE           reduce using rule 108 (type_specifier -> FLOAT .)
    NULL            reduce using rule 108 (type_specifier -> FLOAT .)
    STRING_LITERAL  reduce using rule 108 (type_specifier -> FLOAT .)
    INPUT           reduce using rule 108 (type_specifier -> FLOAT .)
    SQUARE_ROOT     reduce using rule 108 (type_specifier -> FLOAT .)
    SIN             reduce using rule 108 (type_specifier -> FLOAT .)
    COS             reduce using rule 108 (type_specifier -> FLOAT .)
    TAN             reduce using rule 108 (type_specifier -> FLOAT .)
    STRING_COPY     reduce using rule 108 (type_specifier -> FLOAT .)
    STRING_REVERSE  reduce using rule 108 (type_specifier -> FLOAT .)
    STRING_LENGTH   reduce using rule 108 (type_specifier -> FLOAT .)
    STRING_COMPARE  reduce using rule 108 (type_specifier -> FLOAT .)
    WRITE           reduce using rule 108 (type_specifier -> FLOAT .)
    READ            reduce using rule 108 (type_specifier -> FLOAT .)
    OPEN            reduce using rule 108 (type_specifier -> FLOAT .)
    OUTPUT          reduce using rule 108 (type_specifier -> FLOAT .)


state 13

    (109) type_specifier -> DOUBLE .

    SEMICOLON       reduce using rule 109 (type_specifier -> DOUBLE .)
    STAR            reduce using rule 109 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 109 (type_specifier -> DOUBLE .)
    MAIN            reduce using rule 109 (type_specifier -> DOUBLE .)
    LEFT_PARENTHESIS reduce using rule 109 (type_specifier -> DOUBLE .)
    LEFT_SQUARE_BRACKET reduce using rule 109 (type_specifier -> DOUBLE .)
    RIGHT_PARENTHESIS reduce using rule 109 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 109 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 109 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 109 (type_specifier -> DOUBLE .)
    INT             reduce using rule 109 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 109 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 109 (type_specifier -> DOUBLE .)
    STRING          reduce using rule 109 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 109 (type_specifier -> DOUBLE .)
    LONG_LONG_INT   reduce using rule 109 (type_specifier -> DOUBLE .)
    UNSIGNED_INT    reduce using rule 109 (type_specifier -> DOUBLE .)
    CLASS           reduce using rule 109 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 109 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 109 (type_specifier -> DOUBLE .)
    PLUS_PLUS       reduce using rule 109 (type_specifier -> DOUBLE .)
    MINUS_MINUS     reduce using rule 109 (type_specifier -> DOUBLE .)
    SIZEOF          reduce using rule 109 (type_specifier -> DOUBLE .)
    AND             reduce using rule 109 (type_specifier -> DOUBLE .)
    PLUS            reduce using rule 109 (type_specifier -> DOUBLE .)
    MINUS           reduce using rule 109 (type_specifier -> DOUBLE .)
    NOT             reduce using rule 109 (type_specifier -> DOUBLE .)
    TILDE           reduce using rule 109 (type_specifier -> DOUBLE .)
    NUMBER          reduce using rule 109 (type_specifier -> DOUBLE .)
    DECIMAL_NUMBER  reduce using rule 109 (type_specifier -> DOUBLE .)
    CHARACTER       reduce using rule 109 (type_specifier -> DOUBLE .)
    TRUE            reduce using rule 109 (type_specifier -> DOUBLE .)
    FALSE           reduce using rule 109 (type_specifier -> DOUBLE .)
    NULL            reduce using rule 109 (type_specifier -> DOUBLE .)
    STRING_LITERAL  reduce using rule 109 (type_specifier -> DOUBLE .)
    INPUT           reduce using rule 109 (type_specifier -> DOUBLE .)
    SQUARE_ROOT     reduce using rule 109 (type_specifier -> DOUBLE .)
    SIN             reduce using rule 109 (type_specifier -> DOUBLE .)
    COS             reduce using rule 109 (type_specifier -> DOUBLE .)
    TAN             reduce using rule 109 (type_specifier -> DOUBLE .)
    STRING_COPY     reduce using rule 109 (type_specifier -> DOUBLE .)
    STRING_REVERSE  reduce using rule 109 (type_specifier -> DOUBLE .)
    STRING_LENGTH   reduce using rule 109 (type_specifier -> DOUBLE .)
    STRING_COMPARE  reduce using rule 109 (type_specifier -> DOUBLE .)
    WRITE           reduce using rule 109 (type_specifier -> DOUBLE .)
    READ            reduce using rule 109 (type_specifier -> DOUBLE .)
    OPEN            reduce using rule 109 (type_specifier -> DOUBLE .)
    OUTPUT          reduce using rule 109 (type_specifier -> DOUBLE .)


state 14

    (110) type_specifier -> STRING .

    SEMICOLON       reduce using rule 110 (type_specifier -> STRING .)
    STAR            reduce using rule 110 (type_specifier -> STRING .)
    IDENTIFIER      reduce using rule 110 (type_specifier -> STRING .)
    MAIN            reduce using rule 110 (type_specifier -> STRING .)
    LEFT_PARENTHESIS reduce using rule 110 (type_specifier -> STRING .)
    LEFT_SQUARE_BRACKET reduce using rule 110 (type_specifier -> STRING .)
    RIGHT_PARENTHESIS reduce using rule 110 (type_specifier -> STRING .)
    COMMA           reduce using rule 110 (type_specifier -> STRING .)
    VOID            reduce using rule 110 (type_specifier -> STRING .)
    CHAR            reduce using rule 110 (type_specifier -> STRING .)
    INT             reduce using rule 110 (type_specifier -> STRING .)
    FLOAT           reduce using rule 110 (type_specifier -> STRING .)
    DOUBLE          reduce using rule 110 (type_specifier -> STRING .)
    STRING          reduce using rule 110 (type_specifier -> STRING .)
    BOOL            reduce using rule 110 (type_specifier -> STRING .)
    LONG_LONG_INT   reduce using rule 110 (type_specifier -> STRING .)
    UNSIGNED_INT    reduce using rule 110 (type_specifier -> STRING .)
    CLASS           reduce using rule 110 (type_specifier -> STRING .)
    STRUCT          reduce using rule 110 (type_specifier -> STRING .)
    COLON           reduce using rule 110 (type_specifier -> STRING .)
    PLUS_PLUS       reduce using rule 110 (type_specifier -> STRING .)
    MINUS_MINUS     reduce using rule 110 (type_specifier -> STRING .)
    SIZEOF          reduce using rule 110 (type_specifier -> STRING .)
    AND             reduce using rule 110 (type_specifier -> STRING .)
    PLUS            reduce using rule 110 (type_specifier -> STRING .)
    MINUS           reduce using rule 110 (type_specifier -> STRING .)
    NOT             reduce using rule 110 (type_specifier -> STRING .)
    TILDE           reduce using rule 110 (type_specifier -> STRING .)
    NUMBER          reduce using rule 110 (type_specifier -> STRING .)
    DECIMAL_NUMBER  reduce using rule 110 (type_specifier -> STRING .)
    CHARACTER       reduce using rule 110 (type_specifier -> STRING .)
    TRUE            reduce using rule 110 (type_specifier -> STRING .)
    FALSE           reduce using rule 110 (type_specifier -> STRING .)
    NULL            reduce using rule 110 (type_specifier -> STRING .)
    STRING_LITERAL  reduce using rule 110 (type_specifier -> STRING .)
    INPUT           reduce using rule 110 (type_specifier -> STRING .)
    SQUARE_ROOT     reduce using rule 110 (type_specifier -> STRING .)
    SIN             reduce using rule 110 (type_specifier -> STRING .)
    COS             reduce using rule 110 (type_specifier -> STRING .)
    TAN             reduce using rule 110 (type_specifier -> STRING .)
    STRING_COPY     reduce using rule 110 (type_specifier -> STRING .)
    STRING_REVERSE  reduce using rule 110 (type_specifier -> STRING .)
    STRING_LENGTH   reduce using rule 110 (type_specifier -> STRING .)
    STRING_COMPARE  reduce using rule 110 (type_specifier -> STRING .)
    WRITE           reduce using rule 110 (type_specifier -> STRING .)
    READ            reduce using rule 110 (type_specifier -> STRING .)
    OPEN            reduce using rule 110 (type_specifier -> STRING .)
    OUTPUT          reduce using rule 110 (type_specifier -> STRING .)


state 15

    (111) type_specifier -> BOOL .

    SEMICOLON       reduce using rule 111 (type_specifier -> BOOL .)
    STAR            reduce using rule 111 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 111 (type_specifier -> BOOL .)
    MAIN            reduce using rule 111 (type_specifier -> BOOL .)
    LEFT_PARENTHESIS reduce using rule 111 (type_specifier -> BOOL .)
    LEFT_SQUARE_BRACKET reduce using rule 111 (type_specifier -> BOOL .)
    RIGHT_PARENTHESIS reduce using rule 111 (type_specifier -> BOOL .)
    COMMA           reduce using rule 111 (type_specifier -> BOOL .)
    VOID            reduce using rule 111 (type_specifier -> BOOL .)
    CHAR            reduce using rule 111 (type_specifier -> BOOL .)
    INT             reduce using rule 111 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 111 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 111 (type_specifier -> BOOL .)
    STRING          reduce using rule 111 (type_specifier -> BOOL .)
    BOOL            reduce using rule 111 (type_specifier -> BOOL .)
    LONG_LONG_INT   reduce using rule 111 (type_specifier -> BOOL .)
    UNSIGNED_INT    reduce using rule 111 (type_specifier -> BOOL .)
    CLASS           reduce using rule 111 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 111 (type_specifier -> BOOL .)
    COLON           reduce using rule 111 (type_specifier -> BOOL .)
    PLUS_PLUS       reduce using rule 111 (type_specifier -> BOOL .)
    MINUS_MINUS     reduce using rule 111 (type_specifier -> BOOL .)
    SIZEOF          reduce using rule 111 (type_specifier -> BOOL .)
    AND             reduce using rule 111 (type_specifier -> BOOL .)
    PLUS            reduce using rule 111 (type_specifier -> BOOL .)
    MINUS           reduce using rule 111 (type_specifier -> BOOL .)
    NOT             reduce using rule 111 (type_specifier -> BOOL .)
    TILDE           reduce using rule 111 (type_specifier -> BOOL .)
    NUMBER          reduce using rule 111 (type_specifier -> BOOL .)
    DECIMAL_NUMBER  reduce using rule 111 (type_specifier -> BOOL .)
    CHARACTER       reduce using rule 111 (type_specifier -> BOOL .)
    TRUE            reduce using rule 111 (type_specifier -> BOOL .)
    FALSE           reduce using rule 111 (type_specifier -> BOOL .)
    NULL            reduce using rule 111 (type_specifier -> BOOL .)
    STRING_LITERAL  reduce using rule 111 (type_specifier -> BOOL .)
    INPUT           reduce using rule 111 (type_specifier -> BOOL .)
    SQUARE_ROOT     reduce using rule 111 (type_specifier -> BOOL .)
    SIN             reduce using rule 111 (type_specifier -> BOOL .)
    COS             reduce using rule 111 (type_specifier -> BOOL .)
    TAN             reduce using rule 111 (type_specifier -> BOOL .)
    STRING_COPY     reduce using rule 111 (type_specifier -> BOOL .)
    STRING_REVERSE  reduce using rule 111 (type_specifier -> BOOL .)
    STRING_LENGTH   reduce using rule 111 (type_specifier -> BOOL .)
    STRING_COMPARE  reduce using rule 111 (type_specifier -> BOOL .)
    WRITE           reduce using rule 111 (type_specifier -> BOOL .)
    READ            reduce using rule 111 (type_specifier -> BOOL .)
    OPEN            reduce using rule 111 (type_specifier -> BOOL .)
    OUTPUT          reduce using rule 111 (type_specifier -> BOOL .)


state 16

    (112) type_specifier -> LONG_LONG_INT .

    SEMICOLON       reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    STAR            reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    IDENTIFIER      reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    MAIN            reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    LEFT_PARENTHESIS reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    LEFT_SQUARE_BRACKET reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    RIGHT_PARENTHESIS reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    COMMA           reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    VOID            reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    CHAR            reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    INT             reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    FLOAT           reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    DOUBLE          reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    STRING          reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    BOOL            reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    LONG_LONG_INT   reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    UNSIGNED_INT    reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    CLASS           reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    STRUCT          reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    COLON           reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    PLUS_PLUS       reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    MINUS_MINUS     reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    SIZEOF          reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    AND             reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    PLUS            reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    MINUS           reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    NOT             reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    TILDE           reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    NUMBER          reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    DECIMAL_NUMBER  reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    CHARACTER       reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    TRUE            reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    FALSE           reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    NULL            reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    STRING_LITERAL  reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    INPUT           reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    SQUARE_ROOT     reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    SIN             reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    COS             reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    TAN             reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    STRING_COPY     reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    STRING_REVERSE  reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    STRING_LENGTH   reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    STRING_COMPARE  reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    WRITE           reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    READ            reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    OPEN            reduce using rule 112 (type_specifier -> LONG_LONG_INT .)
    OUTPUT          reduce using rule 112 (type_specifier -> LONG_LONG_INT .)


state 17

    (113) type_specifier -> UNSIGNED_INT .

    SEMICOLON       reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    STAR            reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    IDENTIFIER      reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    MAIN            reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    LEFT_PARENTHESIS reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    LEFT_SQUARE_BRACKET reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    RIGHT_PARENTHESIS reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    COMMA           reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    VOID            reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    CHAR            reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    INT             reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    FLOAT           reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    DOUBLE          reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    STRING          reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    BOOL            reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    LONG_LONG_INT   reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    UNSIGNED_INT    reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    CLASS           reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    STRUCT          reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    COLON           reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    PLUS_PLUS       reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    MINUS_MINUS     reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    SIZEOF          reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    AND             reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    PLUS            reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    MINUS           reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    NOT             reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    TILDE           reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    NUMBER          reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    DECIMAL_NUMBER  reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    CHARACTER       reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    TRUE            reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    FALSE           reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    NULL            reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    STRING_LITERAL  reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    INPUT           reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    SQUARE_ROOT     reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    SIN             reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    COS             reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    TAN             reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    STRING_COPY     reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    STRING_REVERSE  reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    STRING_LENGTH   reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    STRING_COMPARE  reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    WRITE           reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    READ            reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    OPEN            reduce using rule 113 (type_specifier -> UNSIGNED_INT .)
    OUTPUT          reduce using rule 113 (type_specifier -> UNSIGNED_INT .)


state 18

    (114) type_specifier -> struct_specifier .

    SEMICOLON       reduce using rule 114 (type_specifier -> struct_specifier .)
    STAR            reduce using rule 114 (type_specifier -> struct_specifier .)
    IDENTIFIER      reduce using rule 114 (type_specifier -> struct_specifier .)
    MAIN            reduce using rule 114 (type_specifier -> struct_specifier .)
    LEFT_PARENTHESIS reduce using rule 114 (type_specifier -> struct_specifier .)
    LEFT_SQUARE_BRACKET reduce using rule 114 (type_specifier -> struct_specifier .)
    RIGHT_PARENTHESIS reduce using rule 114 (type_specifier -> struct_specifier .)
    COMMA           reduce using rule 114 (type_specifier -> struct_specifier .)
    VOID            reduce using rule 114 (type_specifier -> struct_specifier .)
    CHAR            reduce using rule 114 (type_specifier -> struct_specifier .)
    INT             reduce using rule 114 (type_specifier -> struct_specifier .)
    FLOAT           reduce using rule 114 (type_specifier -> struct_specifier .)
    DOUBLE          reduce using rule 114 (type_specifier -> struct_specifier .)
    STRING          reduce using rule 114 (type_specifier -> struct_specifier .)
    BOOL            reduce using rule 114 (type_specifier -> struct_specifier .)
    LONG_LONG_INT   reduce using rule 114 (type_specifier -> struct_specifier .)
    UNSIGNED_INT    reduce using rule 114 (type_specifier -> struct_specifier .)
    CLASS           reduce using rule 114 (type_specifier -> struct_specifier .)
    STRUCT          reduce using rule 114 (type_specifier -> struct_specifier .)
    COLON           reduce using rule 114 (type_specifier -> struct_specifier .)
    PLUS_PLUS       reduce using rule 114 (type_specifier -> struct_specifier .)
    MINUS_MINUS     reduce using rule 114 (type_specifier -> struct_specifier .)
    SIZEOF          reduce using rule 114 (type_specifier -> struct_specifier .)
    AND             reduce using rule 114 (type_specifier -> struct_specifier .)
    PLUS            reduce using rule 114 (type_specifier -> struct_specifier .)
    MINUS           reduce using rule 114 (type_specifier -> struct_specifier .)
    NOT             reduce using rule 114 (type_specifier -> struct_specifier .)
    TILDE           reduce using rule 114 (type_specifier -> struct_specifier .)
    NUMBER          reduce using rule 114 (type_specifier -> struct_specifier .)
    DECIMAL_NUMBER  reduce using rule 114 (type_specifier -> struct_specifier .)
    CHARACTER       reduce using rule 114 (type_specifier -> struct_specifier .)
    TRUE            reduce using rule 114 (type_specifier -> struct_specifier .)
    FALSE           reduce using rule 114 (type_specifier -> struct_specifier .)
    NULL            reduce using rule 114 (type_specifier -> struct_specifier .)
    STRING_LITERAL  reduce using rule 114 (type_specifier -> struct_specifier .)
    INPUT           reduce using rule 114 (type_specifier -> struct_specifier .)
    SQUARE_ROOT     reduce using rule 114 (type_specifier -> struct_specifier .)
    SIN             reduce using rule 114 (type_specifier -> struct_specifier .)
    COS             reduce using rule 114 (type_specifier -> struct_specifier .)
    TAN             reduce using rule 114 (type_specifier -> struct_specifier .)
    STRING_COPY     reduce using rule 114 (type_specifier -> struct_specifier .)
    STRING_REVERSE  reduce using rule 114 (type_specifier -> struct_specifier .)
    STRING_LENGTH   reduce using rule 114 (type_specifier -> struct_specifier .)
    STRING_COMPARE  reduce using rule 114 (type_specifier -> struct_specifier .)
    WRITE           reduce using rule 114 (type_specifier -> struct_specifier .)
    READ            reduce using rule 114 (type_specifier -> struct_specifier .)
    OPEN            reduce using rule 114 (type_specifier -> struct_specifier .)
    OUTPUT          reduce using rule 114 (type_specifier -> struct_specifier .)


state 19

    (115) type_specifier -> CLASS . IDENTIFIER
    (150) class_head -> CLASS . base_clause
    (151) class_head -> CLASS .
    (152) class_head -> CLASS . IDENTIFIER base_clause
    (153) class_head -> CLASS . IDENTIFIER
    (172) base_clause -> . COLON base_specifier_list

    IDENTIFIER      shift and go to state 38
    LEFT_CURLY_BRACKET reduce using rule 151 (class_head -> CLASS .)
    COLON           shift and go to state 40

    base_clause                    shift and go to state 39

state 20

    (122) direct_declarator -> IDENTIFIER .

    LEFT_SQUARE_BRACKET reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    STRING          reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    BOOL            reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    LONG_LONG_INT   reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    UNSIGNED_INT    reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    CLASS           reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    EQUALS          reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 122 (direct_declarator -> IDENTIFIER .)
    COLON           reduce using rule 122 (direct_declarator -> IDENTIFIER .)


state 21

    (130) declarator -> pointer . direct_declarator
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    direct_declarator              shift and go to state 41

state 22

    (131) declarator -> direct_declarator .
    (125) direct_declarator -> direct_declarator . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> direct_declarator . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> direct_declarator . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> direct_declarator . LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> direct_declarator . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_CURLY_BRACKET reduce using rule 131 (declarator -> direct_declarator .)
    VOID            reduce using rule 131 (declarator -> direct_declarator .)
    CHAR            reduce using rule 131 (declarator -> direct_declarator .)
    INT             reduce using rule 131 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 131 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 131 (declarator -> direct_declarator .)
    STRING          reduce using rule 131 (declarator -> direct_declarator .)
    BOOL            reduce using rule 131 (declarator -> direct_declarator .)
    LONG_LONG_INT   reduce using rule 131 (declarator -> direct_declarator .)
    UNSIGNED_INT    reduce using rule 131 (declarator -> direct_declarator .)
    CLASS           reduce using rule 131 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 131 (declarator -> direct_declarator .)
    EQUALS          reduce using rule 131 (declarator -> direct_declarator .)
    SEMICOLON       reduce using rule 131 (declarator -> direct_declarator .)
    COMMA           reduce using rule 131 (declarator -> direct_declarator .)
    RIGHT_PARENTHESIS reduce using rule 131 (declarator -> direct_declarator .)
    COLON           reduce using rule 131 (declarator -> direct_declarator .)
    LEFT_SQUARE_BRACKET shift and go to state 42
    LEFT_PARENTHESIS shift and go to state 43


state 23

    (154) class_specifier -> class_head . LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> class_head . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON

    LEFT_CURLY_BRACKET shift and go to state 44


state 24

    (137) struct_specifier -> STRUCT . IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> STRUCT . LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> STRUCT . IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> STRUCT . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> STRUCT . IDENTIFIER

    IDENTIFIER      shift and go to state 45
    LEFT_CURLY_BRACKET shift and go to state 46


state 25

    (116) pointer -> STAR .
    (117) pointer -> STAR . pointer
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer

    IDENTIFIER      reduce using rule 116 (pointer -> STAR .)
    MAIN            reduce using rule 116 (pointer -> STAR .)
    LEFT_PARENTHESIS reduce using rule 116 (pointer -> STAR .)
    LEFT_SQUARE_BRACKET reduce using rule 116 (pointer -> STAR .)
    RIGHT_PARENTHESIS reduce using rule 116 (pointer -> STAR .)
    COMMA           reduce using rule 116 (pointer -> STAR .)
    STAR            shift and go to state 25

    pointer                        shift and go to state 47

state 26

    (123) direct_declarator -> MAIN .

    LEFT_SQUARE_BRACKET reduce using rule 123 (direct_declarator -> MAIN .)
    LEFT_PARENTHESIS reduce using rule 123 (direct_declarator -> MAIN .)
    LEFT_CURLY_BRACKET reduce using rule 123 (direct_declarator -> MAIN .)
    VOID            reduce using rule 123 (direct_declarator -> MAIN .)
    CHAR            reduce using rule 123 (direct_declarator -> MAIN .)
    INT             reduce using rule 123 (direct_declarator -> MAIN .)
    FLOAT           reduce using rule 123 (direct_declarator -> MAIN .)
    DOUBLE          reduce using rule 123 (direct_declarator -> MAIN .)
    STRING          reduce using rule 123 (direct_declarator -> MAIN .)
    BOOL            reduce using rule 123 (direct_declarator -> MAIN .)
    LONG_LONG_INT   reduce using rule 123 (direct_declarator -> MAIN .)
    UNSIGNED_INT    reduce using rule 123 (direct_declarator -> MAIN .)
    CLASS           reduce using rule 123 (direct_declarator -> MAIN .)
    STRUCT          reduce using rule 123 (direct_declarator -> MAIN .)
    EQUALS          reduce using rule 123 (direct_declarator -> MAIN .)
    SEMICOLON       reduce using rule 123 (direct_declarator -> MAIN .)
    COMMA           reduce using rule 123 (direct_declarator -> MAIN .)
    RIGHT_PARENTHESIS reduce using rule 123 (direct_declarator -> MAIN .)
    COLON           reduce using rule 123 (direct_declarator -> MAIN .)


state 27

    (124) direct_declarator -> LEFT_PARENTHESIS . declarator RIGHT_PARENTHESIS
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    declarator                     shift and go to state 48
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 28

    (227) translation_unit -> translation_unit external_declaration .

    VOID            reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    STRING          reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    LONG_LONG_INT   reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED_INT    reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    CLASS           reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    STAR            reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    IDENTIFIER      reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    MAIN            reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    LEFT_PARENTHESIS reduce using rule 227 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 227 (translation_unit -> translation_unit external_declaration .)


state 29

    (231) function_definition -> type_specifier declarator . declaration_list compound_statement
    (232) function_definition -> type_specifier declarator . compound_statement
    (103) init_declarator -> declarator . EQUALS initializer
    (104) init_declarator -> declarator .
    (208) declaration_list -> . declaration_list declaration
    (209) declaration_list -> . declaration
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (98) declaration -> . type_specifier SEMICOLON
    (99) declaration -> . type_specifier init_declarators_list SEMICOLON
    (100) declaration -> . class_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (154) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (150) class_head -> . CLASS base_clause
    (151) class_head -> . CLASS
    (152) class_head -> . CLASS IDENTIFIER base_clause
    (153) class_head -> . CLASS IDENTIFIER

    EQUALS          shift and go to state 51
    SEMICOLON       reduce using rule 104 (init_declarator -> declarator .)
    COMMA           reduce using rule 104 (init_declarator -> declarator .)
    LEFT_CURLY_BRACKET shift and go to state 36
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24

    type_specifier                 shift and go to state 37
    declaration_list               shift and go to state 49
    compound_statement             shift and go to state 50
    declaration                    shift and go to state 35
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23

state 30

    (98) declaration -> type_specifier SEMICOLON .

    VOID            reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    CHAR            reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    INT             reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    FLOAT           reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    DOUBLE          reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    STRING          reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    BOOL            reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    LONG_LONG_INT   reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    UNSIGNED_INT    reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    CLASS           reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    STRUCT          reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    STAR            reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    IDENTIFIER      reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    MAIN            reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    $end            reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    SEMICOLON       reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    IF              reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    ASSERT          reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    WHILE           reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    FOR             reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    GOTO            reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    BREAK           reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    CONTINUE        reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    RETURN          reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    PLUS_PLUS       reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    MINUS_MINUS     reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    SIZEOF          reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    AND             reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    PLUS            reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    MINUS           reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    NOT             reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    TILDE           reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    NUMBER          reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    CHARACTER       reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    TRUE            reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    FALSE           reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    NULL            reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    STRING_LITERAL  reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    INPUT           reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    SQUARE_ROOT     reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    SIN             reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    COS             reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    TAN             reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    STRING_COPY     reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    STRING_REVERSE  reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    STRING_LENGTH   reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    STRING_COMPARE  reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    WRITE           reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    READ            reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    OPEN            reduce using rule 98 (declaration -> type_specifier SEMICOLON .)
    OUTPUT          reduce using rule 98 (declaration -> type_specifier SEMICOLON .)


state 31

    (99) declaration -> type_specifier init_declarators_list . SEMICOLON
    (102) init_declarators_list -> init_declarators_list . COMMA init_declarator

    SEMICOLON       shift and go to state 52
    COMMA           shift and go to state 53


state 32

    (101) init_declarators_list -> init_declarator .

    SEMICOLON       reduce using rule 101 (init_declarators_list -> init_declarator .)
    COMMA           reduce using rule 101 (init_declarators_list -> init_declarator .)


state 33

    (233) function_definition -> declarator declaration_list . compound_statement
    (208) declaration_list -> declaration_list . declaration
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (98) declaration -> . type_specifier SEMICOLON
    (99) declaration -> . type_specifier init_declarators_list SEMICOLON
    (100) declaration -> . class_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (154) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (150) class_head -> . CLASS base_clause
    (151) class_head -> . CLASS
    (152) class_head -> . CLASS IDENTIFIER base_clause
    (153) class_head -> . CLASS IDENTIFIER

    LEFT_CURLY_BRACKET shift and go to state 36
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24

    compound_statement             shift and go to state 54
    declaration                    shift and go to state 55
    type_specifier                 shift and go to state 37
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23

state 34

    (234) function_definition -> declarator compound_statement .

    VOID            reduce using rule 234 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 234 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 234 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 234 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 234 (function_definition -> declarator compound_statement .)
    STRING          reduce using rule 234 (function_definition -> declarator compound_statement .)
    BOOL            reduce using rule 234 (function_definition -> declarator compound_statement .)
    LONG_LONG_INT   reduce using rule 234 (function_definition -> declarator compound_statement .)
    UNSIGNED_INT    reduce using rule 234 (function_definition -> declarator compound_statement .)
    CLASS           reduce using rule 234 (function_definition -> declarator compound_statement .)
    STRUCT          reduce using rule 234 (function_definition -> declarator compound_statement .)
    STAR            reduce using rule 234 (function_definition -> declarator compound_statement .)
    IDENTIFIER      reduce using rule 234 (function_definition -> declarator compound_statement .)
    MAIN            reduce using rule 234 (function_definition -> declarator compound_statement .)
    LEFT_PARENTHESIS reduce using rule 234 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 234 (function_definition -> declarator compound_statement .)
    SEMICOLON       reduce using rule 234 (function_definition -> declarator compound_statement .)
    RIGHT_CURLY_BRACKET reduce using rule 234 (function_definition -> declarator compound_statement .)
    PRIVATE         reduce using rule 234 (function_definition -> declarator compound_statement .)
    PUBLIC          reduce using rule 234 (function_definition -> declarator compound_statement .)


state 35

    (209) declaration_list -> declaration .

    LEFT_CURLY_BRACKET reduce using rule 209 (declaration_list -> declaration .)
    VOID            reduce using rule 209 (declaration_list -> declaration .)
    CHAR            reduce using rule 209 (declaration_list -> declaration .)
    INT             reduce using rule 209 (declaration_list -> declaration .)
    FLOAT           reduce using rule 209 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 209 (declaration_list -> declaration .)
    STRING          reduce using rule 209 (declaration_list -> declaration .)
    BOOL            reduce using rule 209 (declaration_list -> declaration .)
    LONG_LONG_INT   reduce using rule 209 (declaration_list -> declaration .)
    UNSIGNED_INT    reduce using rule 209 (declaration_list -> declaration .)
    CLASS           reduce using rule 209 (declaration_list -> declaration .)
    STRUCT          reduce using rule 209 (declaration_list -> declaration .)
    RIGHT_CURLY_BRACKET reduce using rule 209 (declaration_list -> declaration .)
    SEMICOLON       reduce using rule 209 (declaration_list -> declaration .)
    IF              reduce using rule 209 (declaration_list -> declaration .)
    ASSERT          reduce using rule 209 (declaration_list -> declaration .)
    WHILE           reduce using rule 209 (declaration_list -> declaration .)
    FOR             reduce using rule 209 (declaration_list -> declaration .)
    GOTO            reduce using rule 209 (declaration_list -> declaration .)
    BREAK           reduce using rule 209 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 209 (declaration_list -> declaration .)
    RETURN          reduce using rule 209 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 209 (declaration_list -> declaration .)
    PLUS_PLUS       reduce using rule 209 (declaration_list -> declaration .)
    MINUS_MINUS     reduce using rule 209 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 209 (declaration_list -> declaration .)
    AND             reduce using rule 209 (declaration_list -> declaration .)
    STAR            reduce using rule 209 (declaration_list -> declaration .)
    PLUS            reduce using rule 209 (declaration_list -> declaration .)
    MINUS           reduce using rule 209 (declaration_list -> declaration .)
    NOT             reduce using rule 209 (declaration_list -> declaration .)
    TILDE           reduce using rule 209 (declaration_list -> declaration .)
    LEFT_PARENTHESIS reduce using rule 209 (declaration_list -> declaration .)
    NUMBER          reduce using rule 209 (declaration_list -> declaration .)
    DECIMAL_NUMBER  reduce using rule 209 (declaration_list -> declaration .)
    CHARACTER       reduce using rule 209 (declaration_list -> declaration .)
    TRUE            reduce using rule 209 (declaration_list -> declaration .)
    FALSE           reduce using rule 209 (declaration_list -> declaration .)
    NULL            reduce using rule 209 (declaration_list -> declaration .)
    STRING_LITERAL  reduce using rule 209 (declaration_list -> declaration .)
    INPUT           reduce using rule 209 (declaration_list -> declaration .)
    SQUARE_ROOT     reduce using rule 209 (declaration_list -> declaration .)
    SIN             reduce using rule 209 (declaration_list -> declaration .)
    COS             reduce using rule 209 (declaration_list -> declaration .)
    TAN             reduce using rule 209 (declaration_list -> declaration .)
    STRING_COPY     reduce using rule 209 (declaration_list -> declaration .)
    STRING_REVERSE  reduce using rule 209 (declaration_list -> declaration .)
    STRING_LENGTH   reduce using rule 209 (declaration_list -> declaration .)
    STRING_COMPARE  reduce using rule 209 (declaration_list -> declaration .)
    WRITE           reduce using rule 209 (declaration_list -> declaration .)
    READ            reduce using rule 209 (declaration_list -> declaration .)
    OPEN            reduce using rule 209 (declaration_list -> declaration .)
    OUTPUT          reduce using rule 209 (declaration_list -> declaration .)


state 36

    (204) compound_statement -> LEFT_CURLY_BRACKET . declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> LEFT_CURLY_BRACKET . declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> LEFT_CURLY_BRACKET . statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> LEFT_CURLY_BRACKET . RIGHT_CURLY_BRACKET
    (208) declaration_list -> . declaration_list declaration
    (209) declaration_list -> . declaration
    (210) statement_list -> . statement
    (211) statement_list -> . statement_list statement
    (98) declaration -> . type_specifier SEMICOLON
    (99) declaration -> . type_specifier init_declarators_list SEMICOLON
    (100) declaration -> . class_specifier
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) statement -> . labeled_statement
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (154) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (212) expression_statement -> . expression SEMICOLON
    (213) expression_statement -> . SEMICOLON
    (214) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (215) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (216) selection_statement -> . ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (217) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (219) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (220) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (221) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (222) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (223) jump_statement -> . BREAK SEMICOLON
    (224) jump_statement -> . CONTINUE SEMICOLON
    (225) jump_statement -> . RETURN SEMICOLON
    (226) jump_statement -> . RETURN expression SEMICOLON
    (203) labeled_statement -> . IDENTIFIER COLON statement
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (150) class_head -> . CLASS base_clause
    (151) class_head -> . CLASS
    (152) class_head -> . CLASS IDENTIFIER base_clause
    (153) class_head -> . CLASS IDENTIFIER
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_CURLY_BRACKET shift and go to state 58
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    ASSERT          shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    GOTO            shift and go to state 74
    BREAK           shift and go to state 75
    CONTINUE        shift and go to state 76
    RETURN          shift and go to state 77
    IDENTIFIER      shift and go to state 67
    STRUCT          shift and go to state 24
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    declaration_list               shift and go to state 56
    statement_list                 shift and go to state 57
    declaration                    shift and go to state 35
    statement                      shift and go to state 59
    type_specifier                 shift and go to state 37
    class_specifier                shift and go to state 8
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 37

    (98) declaration -> type_specifier . SEMICOLON
    (99) declaration -> type_specifier . init_declarators_list SEMICOLON
    (101) init_declarators_list -> . init_declarator
    (102) init_declarators_list -> . init_declarators_list COMMA init_declarator
    (103) init_declarator -> . declarator EQUALS initializer
    (104) init_declarator -> . declarator
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    SEMICOLON       shift and go to state 30
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    init_declarators_list          shift and go to state 31
    init_declarator                shift and go to state 32
    declarator                     shift and go to state 129
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 38

    (115) type_specifier -> CLASS IDENTIFIER .
    (152) class_head -> CLASS IDENTIFIER . base_clause
    (153) class_head -> CLASS IDENTIFIER .
    (172) base_clause -> . COLON base_specifier_list

    SEMICOLON       reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    STAR            reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    IDENTIFIER      reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    MAIN            reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 153 (class_head -> CLASS IDENTIFIER .)
    COLON           shift and go to state 40

    base_clause                    shift and go to state 130

state 39

    (150) class_head -> CLASS base_clause .

    LEFT_CURLY_BRACKET reduce using rule 150 (class_head -> CLASS base_clause .)


state 40

    (172) base_clause -> COLON . base_specifier_list
    (173) base_specifier_list -> . base_specifier
    (174) base_specifier_list -> . base_specifier_list COMMA base_specifier
    (175) base_specifier -> . CLASS IDENTIFIER
    (176) base_specifier -> . access_specifier CLASS IDENTIFIER
    (177) base_specifier -> . IDENTIFIER
    (178) base_specifier -> . access_specifier IDENTIFIER
    (179) access_specifier -> . PRIVATE
    (180) access_specifier -> . PUBLIC

    CLASS           shift and go to state 133
    IDENTIFIER      shift and go to state 134
    PRIVATE         shift and go to state 136
    PUBLIC          shift and go to state 137

    base_specifier_list            shift and go to state 131
    base_specifier                 shift and go to state 132
    access_specifier               shift and go to state 135

state 41

    (130) declarator -> pointer direct_declarator .
    (125) direct_declarator -> direct_declarator . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> direct_declarator . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> direct_declarator . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> direct_declarator . LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> direct_declarator . LEFT_PARENTHESIS RIGHT_PARENTHESIS

    LEFT_CURLY_BRACKET reduce using rule 130 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 130 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 130 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 130 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 130 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 130 (declarator -> pointer direct_declarator .)
    STRING          reduce using rule 130 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 130 (declarator -> pointer direct_declarator .)
    LONG_LONG_INT   reduce using rule 130 (declarator -> pointer direct_declarator .)
    UNSIGNED_INT    reduce using rule 130 (declarator -> pointer direct_declarator .)
    CLASS           reduce using rule 130 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 130 (declarator -> pointer direct_declarator .)
    EQUALS          reduce using rule 130 (declarator -> pointer direct_declarator .)
    SEMICOLON       reduce using rule 130 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 130 (declarator -> pointer direct_declarator .)
    RIGHT_PARENTHESIS reduce using rule 130 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 130 (declarator -> pointer direct_declarator .)
    LEFT_SQUARE_BRACKET shift and go to state 42
    LEFT_PARENTHESIS shift and go to state 43


state 42

    (125) direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET . conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET . RIGHT_SQUARE_BRACKET
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    RIGHT_SQUARE_BRACKET shift and go to state 139
    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    conditional_expression         shift and go to state 138
    logical_or_expression          shift and go to state 81
    logical_and_expression         shift and go to state 88
    or_expression                  shift and go to state 96
    xor_expression                 shift and go to state 100
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 43

    (127) direct_declarator -> direct_declarator LEFT_PARENTHESIS . parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> direct_declarator LEFT_PARENTHESIS . identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> direct_declarator LEFT_PARENTHESIS . RIGHT_PARENTHESIS
    (132) parameter_list -> . parameter_declaration
    (133) parameter_list -> . parameter_list COMMA parameter_declaration
    (118) identifier_list -> . IDENTIFIER
    (119) identifier_list -> . identifier_list COMMA IDENTIFIER
    (134) parameter_declaration -> . type_specifier declarator
    (135) parameter_declaration -> . type_specifier abstract_declarator
    (136) parameter_declaration -> . type_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_PARENTHESIS shift and go to state 144
    IDENTIFIER      shift and go to state 147
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 149
    STRUCT          shift and go to state 24

    parameter_list                 shift and go to state 143
    identifier_list                shift and go to state 145
    parameter_declaration          shift and go to state 146
    type_specifier                 shift and go to state 148
    struct_specifier               shift and go to state 18

state 44

    (154) class_specifier -> class_head LEFT_CURLY_BRACKET . member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> class_head LEFT_CURLY_BRACKET . RIGHT_CURLY_BRACKET SEMICOLON
    (156) member_list -> . member_access_list
    (157) member_list -> . access_list
    (158) member_list -> . member_list access_list
    (170) member_access_list -> . member_declaration member_access_list
    (171) member_access_list -> . member_declaration
    (168) access_list -> . access_specifier COLON member_access_list
    (169) access_list -> . access_specifier COLON
    (162) member_declaration -> . type_specifier member_declarator_list SEMICOLON
    (163) member_declaration -> . member_declarator_list SEMICOLON
    (164) member_declaration -> . type_specifier SEMICOLON
    (165) member_declaration -> . SEMICOLON
    (166) member_declaration -> . function_definition
    (167) member_declaration -> . class_specifier
    (179) access_specifier -> . PRIVATE
    (180) access_specifier -> . PUBLIC
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (160) member_declarator_list -> . member_declarator
    (161) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (231) function_definition -> . type_specifier declarator declaration_list compound_statement
    (232) function_definition -> . type_specifier declarator compound_statement
    (233) function_definition -> . declarator declaration_list compound_statement
    (234) function_definition -> . declarator compound_statement
    (154) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (159) member_declarator -> . init_declarator
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (150) class_head -> . CLASS base_clause
    (151) class_head -> . CLASS
    (152) class_head -> . CLASS IDENTIFIER base_clause
    (153) class_head -> . CLASS IDENTIFIER
    (103) init_declarator -> . declarator EQUALS initializer
    (104) init_declarator -> . declarator
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    RIGHT_CURLY_BRACKET shift and go to state 151
    SEMICOLON       shift and go to state 152
    PRIVATE         shift and go to state 136
    PUBLIC          shift and go to state 137
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    class_head                     shift and go to state 23
    member_list                    shift and go to state 150
    member_access_list             shift and go to state 153
    access_list                    shift and go to state 154
    member_declaration             shift and go to state 155
    access_specifier               shift and go to state 156
    type_specifier                 shift and go to state 157
    member_declarator_list         shift and go to state 158
    function_definition            shift and go to state 159
    class_specifier                shift and go to state 160
    struct_specifier               shift and go to state 18
    member_declarator              shift and go to state 161
    declarator                     shift and go to state 162
    init_declarator                shift and go to state 163
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 45

    (137) struct_specifier -> STRUCT IDENTIFIER . LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> STRUCT IDENTIFIER . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> STRUCT IDENTIFIER .

    LEFT_CURLY_BRACKET shift and go to state 164
    SEMICOLON       reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    STAR            reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    IDENTIFIER      reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    MAIN            reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    LEFT_SQUARE_BRACKET reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    COMMA           reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    VOID            reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    CHAR            reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    INT             reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    FLOAT           reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    DOUBLE          reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    STRING          reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    BOOL            reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    LONG_LONG_INT   reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    UNSIGNED_INT    reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    CLASS           reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    STRUCT          reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    COLON           reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    SIZEOF          reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    AND             reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    PLUS            reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    MINUS           reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    NOT             reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    TILDE           reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    NUMBER          reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    DECIMAL_NUMBER  reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    CHARACTER       reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    TRUE            reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    FALSE           reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    NULL            reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    STRING_LITERAL  reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    INPUT           reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    SQUARE_ROOT     reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    SIN             reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    COS             reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    TAN             reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    STRING_COPY     reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    STRING_REVERSE  reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    STRING_LENGTH   reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    STRING_COMPARE  reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    WRITE           reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    READ            reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    OPEN            reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)
    OUTPUT          reduce using rule 141 (struct_specifier -> STRUCT IDENTIFIER .)


state 46

    (138) struct_specifier -> STRUCT LEFT_CURLY_BRACKET . struct_declaration_list RIGHT_CURLY_BRACKET
    (140) struct_specifier -> STRUCT LEFT_CURLY_BRACKET . RIGHT_CURLY_BRACKET
    (148) struct_declaration_list -> . struct_declaration
    (149) struct_declaration_list -> . struct_declaration_list struct_declaration
    (147) struct_declaration -> . specifier_list struct_declarator_list SEMICOLON
    (120) specifier_list -> . type_specifier specifier_list
    (121) specifier_list -> . type_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_CURLY_BRACKET shift and go to state 166
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 149
    STRUCT          shift and go to state 24

    struct_declaration_list        shift and go to state 165
    struct_declaration             shift and go to state 167
    specifier_list                 shift and go to state 168
    type_specifier                 shift and go to state 169
    struct_specifier               shift and go to state 18

state 47

    (117) pointer -> STAR pointer .

    IDENTIFIER      reduce using rule 117 (pointer -> STAR pointer .)
    MAIN            reduce using rule 117 (pointer -> STAR pointer .)
    LEFT_PARENTHESIS reduce using rule 117 (pointer -> STAR pointer .)
    LEFT_SQUARE_BRACKET reduce using rule 117 (pointer -> STAR pointer .)
    RIGHT_PARENTHESIS reduce using rule 117 (pointer -> STAR pointer .)
    COMMA           reduce using rule 117 (pointer -> STAR pointer .)


state 48

    (124) direct_declarator -> LEFT_PARENTHESIS declarator . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 170


state 49

    (231) function_definition -> type_specifier declarator declaration_list . compound_statement
    (208) declaration_list -> declaration_list . declaration
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (98) declaration -> . type_specifier SEMICOLON
    (99) declaration -> . type_specifier init_declarators_list SEMICOLON
    (100) declaration -> . class_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (154) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (150) class_head -> . CLASS base_clause
    (151) class_head -> . CLASS
    (152) class_head -> . CLASS IDENTIFIER base_clause
    (153) class_head -> . CLASS IDENTIFIER

    LEFT_CURLY_BRACKET shift and go to state 36
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24

    type_specifier                 shift and go to state 37
    compound_statement             shift and go to state 171
    declaration                    shift and go to state 55
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23

state 50

    (232) function_definition -> type_specifier declarator compound_statement .

    VOID            reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    CHAR            reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    INT             reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    FLOAT           reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    DOUBLE          reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    STRING          reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    BOOL            reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    LONG_LONG_INT   reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    UNSIGNED_INT    reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    CLASS           reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    STRUCT          reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    STAR            reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    IDENTIFIER      reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    MAIN            reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    LEFT_PARENTHESIS reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    $end            reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    SEMICOLON       reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    RIGHT_CURLY_BRACKET reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    PRIVATE         reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)
    PUBLIC          reduce using rule 232 (function_definition -> type_specifier declarator compound_statement .)


state 51

    (103) init_declarator -> declarator EQUALS . initializer
    (193) initializer -> . LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET
    (194) initializer -> . assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    LEFT_CURLY_BRACKET shift and go to state 173
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    initializer                    shift and go to state 172
    assignment_expression          shift and go to state 174
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 52

    (99) declaration -> type_specifier init_declarators_list SEMICOLON .

    VOID            reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    CHAR            reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    INT             reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    FLOAT           reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    DOUBLE          reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRING          reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    BOOL            reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    LONG_LONG_INT   reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    UNSIGNED_INT    reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    CLASS           reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRUCT          reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STAR            reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    IDENTIFIER      reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    MAIN            reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    $end            reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    SEMICOLON       reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    IF              reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    ASSERT          reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    WHILE           reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    FOR             reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    GOTO            reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    BREAK           reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    CONTINUE        reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    RETURN          reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    PLUS_PLUS       reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    MINUS_MINUS     reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    SIZEOF          reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    AND             reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    PLUS            reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    MINUS           reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    NOT             reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    TILDE           reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    NUMBER          reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    CHARACTER       reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    TRUE            reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    FALSE           reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    NULL            reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRING_LITERAL  reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    INPUT           reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    SQUARE_ROOT     reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    SIN             reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    COS             reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    TAN             reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRING_COPY     reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRING_REVERSE  reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRING_LENGTH   reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    STRING_COMPARE  reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    WRITE           reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    READ            reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    OPEN            reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)
    OUTPUT          reduce using rule 99 (declaration -> type_specifier init_declarators_list SEMICOLON .)


state 53

    (102) init_declarators_list -> init_declarators_list COMMA . init_declarator
    (103) init_declarator -> . declarator EQUALS initializer
    (104) init_declarator -> . declarator
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    init_declarator                shift and go to state 175
    declarator                     shift and go to state 129
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 54

    (233) function_definition -> declarator declaration_list compound_statement .

    VOID            reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    CHAR            reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    STRING          reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    BOOL            reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    LONG_LONG_INT   reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    UNSIGNED_INT    reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    CLASS           reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    STAR            reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    MAIN            reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    LEFT_PARENTHESIS reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    SEMICOLON       reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    RIGHT_CURLY_BRACKET reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    PRIVATE         reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)
    PUBLIC          reduce using rule 233 (function_definition -> declarator declaration_list compound_statement .)


state 55

    (208) declaration_list -> declaration_list declaration .

    LEFT_CURLY_BRACKET reduce using rule 208 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 208 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 208 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 208 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 208 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 208 (declaration_list -> declaration_list declaration .)
    STRING          reduce using rule 208 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 208 (declaration_list -> declaration_list declaration .)
    LONG_LONG_INT   reduce using rule 208 (declaration_list -> declaration_list declaration .)
    UNSIGNED_INT    reduce using rule 208 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 208 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 208 (declaration_list -> declaration_list declaration .)
    RIGHT_CURLY_BRACKET reduce using rule 208 (declaration_list -> declaration_list declaration .)
    SEMICOLON       reduce using rule 208 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 208 (declaration_list -> declaration_list declaration .)
    ASSERT          reduce using rule 208 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 208 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 208 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 208 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 208 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 208 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 208 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 208 (declaration_list -> declaration_list declaration .)
    PLUS_PLUS       reduce using rule 208 (declaration_list -> declaration_list declaration .)
    MINUS_MINUS     reduce using rule 208 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 208 (declaration_list -> declaration_list declaration .)
    AND             reduce using rule 208 (declaration_list -> declaration_list declaration .)
    STAR            reduce using rule 208 (declaration_list -> declaration_list declaration .)
    PLUS            reduce using rule 208 (declaration_list -> declaration_list declaration .)
    MINUS           reduce using rule 208 (declaration_list -> declaration_list declaration .)
    NOT             reduce using rule 208 (declaration_list -> declaration_list declaration .)
    TILDE           reduce using rule 208 (declaration_list -> declaration_list declaration .)
    LEFT_PARENTHESIS reduce using rule 208 (declaration_list -> declaration_list declaration .)
    NUMBER          reduce using rule 208 (declaration_list -> declaration_list declaration .)
    DECIMAL_NUMBER  reduce using rule 208 (declaration_list -> declaration_list declaration .)
    CHARACTER       reduce using rule 208 (declaration_list -> declaration_list declaration .)
    TRUE            reduce using rule 208 (declaration_list -> declaration_list declaration .)
    FALSE           reduce using rule 208 (declaration_list -> declaration_list declaration .)
    NULL            reduce using rule 208 (declaration_list -> declaration_list declaration .)
    STRING_LITERAL  reduce using rule 208 (declaration_list -> declaration_list declaration .)
    INPUT           reduce using rule 208 (declaration_list -> declaration_list declaration .)
    SQUARE_ROOT     reduce using rule 208 (declaration_list -> declaration_list declaration .)
    SIN             reduce using rule 208 (declaration_list -> declaration_list declaration .)
    COS             reduce using rule 208 (declaration_list -> declaration_list declaration .)
    TAN             reduce using rule 208 (declaration_list -> declaration_list declaration .)
    STRING_COPY     reduce using rule 208 (declaration_list -> declaration_list declaration .)
    STRING_REVERSE  reduce using rule 208 (declaration_list -> declaration_list declaration .)
    STRING_LENGTH   reduce using rule 208 (declaration_list -> declaration_list declaration .)
    STRING_COMPARE  reduce using rule 208 (declaration_list -> declaration_list declaration .)
    WRITE           reduce using rule 208 (declaration_list -> declaration_list declaration .)
    READ            reduce using rule 208 (declaration_list -> declaration_list declaration .)
    OPEN            reduce using rule 208 (declaration_list -> declaration_list declaration .)
    OUTPUT          reduce using rule 208 (declaration_list -> declaration_list declaration .)


state 56

    (204) compound_statement -> LEFT_CURLY_BRACKET declaration_list . statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> LEFT_CURLY_BRACKET declaration_list . RIGHT_CURLY_BRACKET
    (208) declaration_list -> declaration_list . declaration
    (210) statement_list -> . statement
    (211) statement_list -> . statement_list statement
    (98) declaration -> . type_specifier SEMICOLON
    (99) declaration -> . type_specifier init_declarators_list SEMICOLON
    (100) declaration -> . class_specifier
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) statement -> . labeled_statement
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (154) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (212) expression_statement -> . expression SEMICOLON
    (213) expression_statement -> . SEMICOLON
    (214) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (215) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (216) selection_statement -> . ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (217) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (219) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (220) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (221) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (222) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (223) jump_statement -> . BREAK SEMICOLON
    (224) jump_statement -> . CONTINUE SEMICOLON
    (225) jump_statement -> . RETURN SEMICOLON
    (226) jump_statement -> . RETURN expression SEMICOLON
    (203) labeled_statement -> . IDENTIFIER COLON statement
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (150) class_head -> . CLASS base_clause
    (151) class_head -> . CLASS
    (152) class_head -> . CLASS IDENTIFIER base_clause
    (153) class_head -> . CLASS IDENTIFIER
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_CURLY_BRACKET shift and go to state 177
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    ASSERT          shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    GOTO            shift and go to state 74
    BREAK           shift and go to state 75
    CONTINUE        shift and go to state 76
    RETURN          shift and go to state 77
    IDENTIFIER      shift and go to state 67
    STRUCT          shift and go to state 24
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    statement_list                 shift and go to state 176
    declaration                    shift and go to state 55
    statement                      shift and go to state 59
    type_specifier                 shift and go to state 37
    class_specifier                shift and go to state 8
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 57

    (206) compound_statement -> LEFT_CURLY_BRACKET statement_list . RIGHT_CURLY_BRACKET
    (211) statement_list -> statement_list . statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) statement -> . labeled_statement
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (212) expression_statement -> . expression SEMICOLON
    (213) expression_statement -> . SEMICOLON
    (214) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (215) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (216) selection_statement -> . ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (217) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (219) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (220) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (221) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (222) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (223) jump_statement -> . BREAK SEMICOLON
    (224) jump_statement -> . CONTINUE SEMICOLON
    (225) jump_statement -> . RETURN SEMICOLON
    (226) jump_statement -> . RETURN expression SEMICOLON
    (203) labeled_statement -> . IDENTIFIER COLON statement
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_CURLY_BRACKET shift and go to state 178
    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    ASSERT          shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    GOTO            shift and go to state 74
    BREAK           shift and go to state 75
    CONTINUE        shift and go to state 76
    RETURN          shift and go to state 77
    IDENTIFIER      shift and go to state 67
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    statement                      shift and go to state 179
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 58

    (207) compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .

    VOID            reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PRIVATE         reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PUBLIC          reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    ASSERT          reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    GOTO            reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 207 (compound_statement -> LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)


state 59

    (210) statement_list -> statement .

    RIGHT_CURLY_BRACKET reduce using rule 210 (statement_list -> statement .)
    LEFT_CURLY_BRACKET reduce using rule 210 (statement_list -> statement .)
    SEMICOLON       reduce using rule 210 (statement_list -> statement .)
    IF              reduce using rule 210 (statement_list -> statement .)
    ASSERT          reduce using rule 210 (statement_list -> statement .)
    WHILE           reduce using rule 210 (statement_list -> statement .)
    FOR             reduce using rule 210 (statement_list -> statement .)
    GOTO            reduce using rule 210 (statement_list -> statement .)
    BREAK           reduce using rule 210 (statement_list -> statement .)
    CONTINUE        reduce using rule 210 (statement_list -> statement .)
    RETURN          reduce using rule 210 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 210 (statement_list -> statement .)
    PLUS_PLUS       reduce using rule 210 (statement_list -> statement .)
    MINUS_MINUS     reduce using rule 210 (statement_list -> statement .)
    SIZEOF          reduce using rule 210 (statement_list -> statement .)
    AND             reduce using rule 210 (statement_list -> statement .)
    STAR            reduce using rule 210 (statement_list -> statement .)
    PLUS            reduce using rule 210 (statement_list -> statement .)
    MINUS           reduce using rule 210 (statement_list -> statement .)
    NOT             reduce using rule 210 (statement_list -> statement .)
    TILDE           reduce using rule 210 (statement_list -> statement .)
    LEFT_PARENTHESIS reduce using rule 210 (statement_list -> statement .)
    NUMBER          reduce using rule 210 (statement_list -> statement .)
    DECIMAL_NUMBER  reduce using rule 210 (statement_list -> statement .)
    CHARACTER       reduce using rule 210 (statement_list -> statement .)
    TRUE            reduce using rule 210 (statement_list -> statement .)
    FALSE           reduce using rule 210 (statement_list -> statement .)
    NULL            reduce using rule 210 (statement_list -> statement .)
    STRING_LITERAL  reduce using rule 210 (statement_list -> statement .)
    INPUT           reduce using rule 210 (statement_list -> statement .)
    SQUARE_ROOT     reduce using rule 210 (statement_list -> statement .)
    SIN             reduce using rule 210 (statement_list -> statement .)
    COS             reduce using rule 210 (statement_list -> statement .)
    TAN             reduce using rule 210 (statement_list -> statement .)
    STRING_COPY     reduce using rule 210 (statement_list -> statement .)
    STRING_REVERSE  reduce using rule 210 (statement_list -> statement .)
    STRING_LENGTH   reduce using rule 210 (statement_list -> statement .)
    STRING_COMPARE  reduce using rule 210 (statement_list -> statement .)
    WRITE           reduce using rule 210 (statement_list -> statement .)
    READ            reduce using rule 210 (statement_list -> statement .)
    OPEN            reduce using rule 210 (statement_list -> statement .)
    OUTPUT          reduce using rule 210 (statement_list -> statement .)


state 60

    (213) expression_statement -> SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 213 (expression_statement -> SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 213 (expression_statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 213 (expression_statement -> SEMICOLON .)
    IF              reduce using rule 213 (expression_statement -> SEMICOLON .)
    ASSERT          reduce using rule 213 (expression_statement -> SEMICOLON .)
    WHILE           reduce using rule 213 (expression_statement -> SEMICOLON .)
    FOR             reduce using rule 213 (expression_statement -> SEMICOLON .)
    GOTO            reduce using rule 213 (expression_statement -> SEMICOLON .)
    BREAK           reduce using rule 213 (expression_statement -> SEMICOLON .)
    CONTINUE        reduce using rule 213 (expression_statement -> SEMICOLON .)
    RETURN          reduce using rule 213 (expression_statement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 213 (expression_statement -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 213 (expression_statement -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 213 (expression_statement -> SEMICOLON .)
    SIZEOF          reduce using rule 213 (expression_statement -> SEMICOLON .)
    AND             reduce using rule 213 (expression_statement -> SEMICOLON .)
    STAR            reduce using rule 213 (expression_statement -> SEMICOLON .)
    PLUS            reduce using rule 213 (expression_statement -> SEMICOLON .)
    MINUS           reduce using rule 213 (expression_statement -> SEMICOLON .)
    NOT             reduce using rule 213 (expression_statement -> SEMICOLON .)
    TILDE           reduce using rule 213 (expression_statement -> SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 213 (expression_statement -> SEMICOLON .)
    NUMBER          reduce using rule 213 (expression_statement -> SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 213 (expression_statement -> SEMICOLON .)
    CHARACTER       reduce using rule 213 (expression_statement -> SEMICOLON .)
    TRUE            reduce using rule 213 (expression_statement -> SEMICOLON .)
    FALSE           reduce using rule 213 (expression_statement -> SEMICOLON .)
    NULL            reduce using rule 213 (expression_statement -> SEMICOLON .)
    STRING_LITERAL  reduce using rule 213 (expression_statement -> SEMICOLON .)
    INPUT           reduce using rule 213 (expression_statement -> SEMICOLON .)
    SQUARE_ROOT     reduce using rule 213 (expression_statement -> SEMICOLON .)
    SIN             reduce using rule 213 (expression_statement -> SEMICOLON .)
    COS             reduce using rule 213 (expression_statement -> SEMICOLON .)
    TAN             reduce using rule 213 (expression_statement -> SEMICOLON .)
    STRING_COPY     reduce using rule 213 (expression_statement -> SEMICOLON .)
    STRING_REVERSE  reduce using rule 213 (expression_statement -> SEMICOLON .)
    STRING_LENGTH   reduce using rule 213 (expression_statement -> SEMICOLON .)
    STRING_COMPARE  reduce using rule 213 (expression_statement -> SEMICOLON .)
    WRITE           reduce using rule 213 (expression_statement -> SEMICOLON .)
    READ            reduce using rule 213 (expression_statement -> SEMICOLON .)
    OPEN            reduce using rule 213 (expression_statement -> SEMICOLON .)
    OUTPUT          reduce using rule 213 (expression_statement -> SEMICOLON .)
    ELSE            reduce using rule 213 (expression_statement -> SEMICOLON .)
    RIGHT_PARENTHESIS reduce using rule 213 (expression_statement -> SEMICOLON .)


state 61

    (197) statement -> compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 197 (statement -> compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 197 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 197 (statement -> compound_statement .)
    IF              reduce using rule 197 (statement -> compound_statement .)
    ASSERT          reduce using rule 197 (statement -> compound_statement .)
    WHILE           reduce using rule 197 (statement -> compound_statement .)
    FOR             reduce using rule 197 (statement -> compound_statement .)
    GOTO            reduce using rule 197 (statement -> compound_statement .)
    BREAK           reduce using rule 197 (statement -> compound_statement .)
    CONTINUE        reduce using rule 197 (statement -> compound_statement .)
    RETURN          reduce using rule 197 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 197 (statement -> compound_statement .)
    PLUS_PLUS       reduce using rule 197 (statement -> compound_statement .)
    MINUS_MINUS     reduce using rule 197 (statement -> compound_statement .)
    SIZEOF          reduce using rule 197 (statement -> compound_statement .)
    AND             reduce using rule 197 (statement -> compound_statement .)
    STAR            reduce using rule 197 (statement -> compound_statement .)
    PLUS            reduce using rule 197 (statement -> compound_statement .)
    MINUS           reduce using rule 197 (statement -> compound_statement .)
    NOT             reduce using rule 197 (statement -> compound_statement .)
    TILDE           reduce using rule 197 (statement -> compound_statement .)
    LEFT_PARENTHESIS reduce using rule 197 (statement -> compound_statement .)
    NUMBER          reduce using rule 197 (statement -> compound_statement .)
    DECIMAL_NUMBER  reduce using rule 197 (statement -> compound_statement .)
    CHARACTER       reduce using rule 197 (statement -> compound_statement .)
    TRUE            reduce using rule 197 (statement -> compound_statement .)
    FALSE           reduce using rule 197 (statement -> compound_statement .)
    NULL            reduce using rule 197 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 197 (statement -> compound_statement .)
    INPUT           reduce using rule 197 (statement -> compound_statement .)
    SQUARE_ROOT     reduce using rule 197 (statement -> compound_statement .)
    SIN             reduce using rule 197 (statement -> compound_statement .)
    COS             reduce using rule 197 (statement -> compound_statement .)
    TAN             reduce using rule 197 (statement -> compound_statement .)
    STRING_COPY     reduce using rule 197 (statement -> compound_statement .)
    STRING_REVERSE  reduce using rule 197 (statement -> compound_statement .)
    STRING_LENGTH   reduce using rule 197 (statement -> compound_statement .)
    STRING_COMPARE  reduce using rule 197 (statement -> compound_statement .)
    WRITE           reduce using rule 197 (statement -> compound_statement .)
    READ            reduce using rule 197 (statement -> compound_statement .)
    OPEN            reduce using rule 197 (statement -> compound_statement .)
    OUTPUT          reduce using rule 197 (statement -> compound_statement .)
    ELSE            reduce using rule 197 (statement -> compound_statement .)


state 62

    (198) statement -> expression_statement .

    RIGHT_CURLY_BRACKET reduce using rule 198 (statement -> expression_statement .)
    LEFT_CURLY_BRACKET reduce using rule 198 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 198 (statement -> expression_statement .)
    IF              reduce using rule 198 (statement -> expression_statement .)
    ASSERT          reduce using rule 198 (statement -> expression_statement .)
    WHILE           reduce using rule 198 (statement -> expression_statement .)
    FOR             reduce using rule 198 (statement -> expression_statement .)
    GOTO            reduce using rule 198 (statement -> expression_statement .)
    BREAK           reduce using rule 198 (statement -> expression_statement .)
    CONTINUE        reduce using rule 198 (statement -> expression_statement .)
    RETURN          reduce using rule 198 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 198 (statement -> expression_statement .)
    PLUS_PLUS       reduce using rule 198 (statement -> expression_statement .)
    MINUS_MINUS     reduce using rule 198 (statement -> expression_statement .)
    SIZEOF          reduce using rule 198 (statement -> expression_statement .)
    AND             reduce using rule 198 (statement -> expression_statement .)
    STAR            reduce using rule 198 (statement -> expression_statement .)
    PLUS            reduce using rule 198 (statement -> expression_statement .)
    MINUS           reduce using rule 198 (statement -> expression_statement .)
    NOT             reduce using rule 198 (statement -> expression_statement .)
    TILDE           reduce using rule 198 (statement -> expression_statement .)
    LEFT_PARENTHESIS reduce using rule 198 (statement -> expression_statement .)
    NUMBER          reduce using rule 198 (statement -> expression_statement .)
    DECIMAL_NUMBER  reduce using rule 198 (statement -> expression_statement .)
    CHARACTER       reduce using rule 198 (statement -> expression_statement .)
    TRUE            reduce using rule 198 (statement -> expression_statement .)
    FALSE           reduce using rule 198 (statement -> expression_statement .)
    NULL            reduce using rule 198 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 198 (statement -> expression_statement .)
    INPUT           reduce using rule 198 (statement -> expression_statement .)
    SQUARE_ROOT     reduce using rule 198 (statement -> expression_statement .)
    SIN             reduce using rule 198 (statement -> expression_statement .)
    COS             reduce using rule 198 (statement -> expression_statement .)
    TAN             reduce using rule 198 (statement -> expression_statement .)
    STRING_COPY     reduce using rule 198 (statement -> expression_statement .)
    STRING_REVERSE  reduce using rule 198 (statement -> expression_statement .)
    STRING_LENGTH   reduce using rule 198 (statement -> expression_statement .)
    STRING_COMPARE  reduce using rule 198 (statement -> expression_statement .)
    WRITE           reduce using rule 198 (statement -> expression_statement .)
    READ            reduce using rule 198 (statement -> expression_statement .)
    OPEN            reduce using rule 198 (statement -> expression_statement .)
    OUTPUT          reduce using rule 198 (statement -> expression_statement .)
    ELSE            reduce using rule 198 (statement -> expression_statement .)


state 63

    (199) statement -> selection_statement .

    RIGHT_CURLY_BRACKET reduce using rule 199 (statement -> selection_statement .)
    LEFT_CURLY_BRACKET reduce using rule 199 (statement -> selection_statement .)
    SEMICOLON       reduce using rule 199 (statement -> selection_statement .)
    IF              reduce using rule 199 (statement -> selection_statement .)
    ASSERT          reduce using rule 199 (statement -> selection_statement .)
    WHILE           reduce using rule 199 (statement -> selection_statement .)
    FOR             reduce using rule 199 (statement -> selection_statement .)
    GOTO            reduce using rule 199 (statement -> selection_statement .)
    BREAK           reduce using rule 199 (statement -> selection_statement .)
    CONTINUE        reduce using rule 199 (statement -> selection_statement .)
    RETURN          reduce using rule 199 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 199 (statement -> selection_statement .)
    PLUS_PLUS       reduce using rule 199 (statement -> selection_statement .)
    MINUS_MINUS     reduce using rule 199 (statement -> selection_statement .)
    SIZEOF          reduce using rule 199 (statement -> selection_statement .)
    AND             reduce using rule 199 (statement -> selection_statement .)
    STAR            reduce using rule 199 (statement -> selection_statement .)
    PLUS            reduce using rule 199 (statement -> selection_statement .)
    MINUS           reduce using rule 199 (statement -> selection_statement .)
    NOT             reduce using rule 199 (statement -> selection_statement .)
    TILDE           reduce using rule 199 (statement -> selection_statement .)
    LEFT_PARENTHESIS reduce using rule 199 (statement -> selection_statement .)
    NUMBER          reduce using rule 199 (statement -> selection_statement .)
    DECIMAL_NUMBER  reduce using rule 199 (statement -> selection_statement .)
    CHARACTER       reduce using rule 199 (statement -> selection_statement .)
    TRUE            reduce using rule 199 (statement -> selection_statement .)
    FALSE           reduce using rule 199 (statement -> selection_statement .)
    NULL            reduce using rule 199 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 199 (statement -> selection_statement .)
    INPUT           reduce using rule 199 (statement -> selection_statement .)
    SQUARE_ROOT     reduce using rule 199 (statement -> selection_statement .)
    SIN             reduce using rule 199 (statement -> selection_statement .)
    COS             reduce using rule 199 (statement -> selection_statement .)
    TAN             reduce using rule 199 (statement -> selection_statement .)
    STRING_COPY     reduce using rule 199 (statement -> selection_statement .)
    STRING_REVERSE  reduce using rule 199 (statement -> selection_statement .)
    STRING_LENGTH   reduce using rule 199 (statement -> selection_statement .)
    STRING_COMPARE  reduce using rule 199 (statement -> selection_statement .)
    WRITE           reduce using rule 199 (statement -> selection_statement .)
    READ            reduce using rule 199 (statement -> selection_statement .)
    OPEN            reduce using rule 199 (statement -> selection_statement .)
    OUTPUT          reduce using rule 199 (statement -> selection_statement .)
    ELSE            reduce using rule 199 (statement -> selection_statement .)


state 64

    (200) statement -> iteration_statement .

    RIGHT_CURLY_BRACKET reduce using rule 200 (statement -> iteration_statement .)
    LEFT_CURLY_BRACKET reduce using rule 200 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 200 (statement -> iteration_statement .)
    IF              reduce using rule 200 (statement -> iteration_statement .)
    ASSERT          reduce using rule 200 (statement -> iteration_statement .)
    WHILE           reduce using rule 200 (statement -> iteration_statement .)
    FOR             reduce using rule 200 (statement -> iteration_statement .)
    GOTO            reduce using rule 200 (statement -> iteration_statement .)
    BREAK           reduce using rule 200 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 200 (statement -> iteration_statement .)
    RETURN          reduce using rule 200 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 200 (statement -> iteration_statement .)
    PLUS_PLUS       reduce using rule 200 (statement -> iteration_statement .)
    MINUS_MINUS     reduce using rule 200 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 200 (statement -> iteration_statement .)
    AND             reduce using rule 200 (statement -> iteration_statement .)
    STAR            reduce using rule 200 (statement -> iteration_statement .)
    PLUS            reduce using rule 200 (statement -> iteration_statement .)
    MINUS           reduce using rule 200 (statement -> iteration_statement .)
    NOT             reduce using rule 200 (statement -> iteration_statement .)
    TILDE           reduce using rule 200 (statement -> iteration_statement .)
    LEFT_PARENTHESIS reduce using rule 200 (statement -> iteration_statement .)
    NUMBER          reduce using rule 200 (statement -> iteration_statement .)
    DECIMAL_NUMBER  reduce using rule 200 (statement -> iteration_statement .)
    CHARACTER       reduce using rule 200 (statement -> iteration_statement .)
    TRUE            reduce using rule 200 (statement -> iteration_statement .)
    FALSE           reduce using rule 200 (statement -> iteration_statement .)
    NULL            reduce using rule 200 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 200 (statement -> iteration_statement .)
    INPUT           reduce using rule 200 (statement -> iteration_statement .)
    SQUARE_ROOT     reduce using rule 200 (statement -> iteration_statement .)
    SIN             reduce using rule 200 (statement -> iteration_statement .)
    COS             reduce using rule 200 (statement -> iteration_statement .)
    TAN             reduce using rule 200 (statement -> iteration_statement .)
    STRING_COPY     reduce using rule 200 (statement -> iteration_statement .)
    STRING_REVERSE  reduce using rule 200 (statement -> iteration_statement .)
    STRING_LENGTH   reduce using rule 200 (statement -> iteration_statement .)
    STRING_COMPARE  reduce using rule 200 (statement -> iteration_statement .)
    WRITE           reduce using rule 200 (statement -> iteration_statement .)
    READ            reduce using rule 200 (statement -> iteration_statement .)
    OPEN            reduce using rule 200 (statement -> iteration_statement .)
    OUTPUT          reduce using rule 200 (statement -> iteration_statement .)
    ELSE            reduce using rule 200 (statement -> iteration_statement .)


state 65

    (201) statement -> jump_statement .

    RIGHT_CURLY_BRACKET reduce using rule 201 (statement -> jump_statement .)
    LEFT_CURLY_BRACKET reduce using rule 201 (statement -> jump_statement .)
    SEMICOLON       reduce using rule 201 (statement -> jump_statement .)
    IF              reduce using rule 201 (statement -> jump_statement .)
    ASSERT          reduce using rule 201 (statement -> jump_statement .)
    WHILE           reduce using rule 201 (statement -> jump_statement .)
    FOR             reduce using rule 201 (statement -> jump_statement .)
    GOTO            reduce using rule 201 (statement -> jump_statement .)
    BREAK           reduce using rule 201 (statement -> jump_statement .)
    CONTINUE        reduce using rule 201 (statement -> jump_statement .)
    RETURN          reduce using rule 201 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 201 (statement -> jump_statement .)
    PLUS_PLUS       reduce using rule 201 (statement -> jump_statement .)
    MINUS_MINUS     reduce using rule 201 (statement -> jump_statement .)
    SIZEOF          reduce using rule 201 (statement -> jump_statement .)
    AND             reduce using rule 201 (statement -> jump_statement .)
    STAR            reduce using rule 201 (statement -> jump_statement .)
    PLUS            reduce using rule 201 (statement -> jump_statement .)
    MINUS           reduce using rule 201 (statement -> jump_statement .)
    NOT             reduce using rule 201 (statement -> jump_statement .)
    TILDE           reduce using rule 201 (statement -> jump_statement .)
    LEFT_PARENTHESIS reduce using rule 201 (statement -> jump_statement .)
    NUMBER          reduce using rule 201 (statement -> jump_statement .)
    DECIMAL_NUMBER  reduce using rule 201 (statement -> jump_statement .)
    CHARACTER       reduce using rule 201 (statement -> jump_statement .)
    TRUE            reduce using rule 201 (statement -> jump_statement .)
    FALSE           reduce using rule 201 (statement -> jump_statement .)
    NULL            reduce using rule 201 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 201 (statement -> jump_statement .)
    INPUT           reduce using rule 201 (statement -> jump_statement .)
    SQUARE_ROOT     reduce using rule 201 (statement -> jump_statement .)
    SIN             reduce using rule 201 (statement -> jump_statement .)
    COS             reduce using rule 201 (statement -> jump_statement .)
    TAN             reduce using rule 201 (statement -> jump_statement .)
    STRING_COPY     reduce using rule 201 (statement -> jump_statement .)
    STRING_REVERSE  reduce using rule 201 (statement -> jump_statement .)
    STRING_LENGTH   reduce using rule 201 (statement -> jump_statement .)
    STRING_COMPARE  reduce using rule 201 (statement -> jump_statement .)
    WRITE           reduce using rule 201 (statement -> jump_statement .)
    READ            reduce using rule 201 (statement -> jump_statement .)
    OPEN            reduce using rule 201 (statement -> jump_statement .)
    OUTPUT          reduce using rule 201 (statement -> jump_statement .)
    ELSE            reduce using rule 201 (statement -> jump_statement .)


state 66

    (202) statement -> labeled_statement .

    RIGHT_CURLY_BRACKET reduce using rule 202 (statement -> labeled_statement .)
    LEFT_CURLY_BRACKET reduce using rule 202 (statement -> labeled_statement .)
    SEMICOLON       reduce using rule 202 (statement -> labeled_statement .)
    IF              reduce using rule 202 (statement -> labeled_statement .)
    ASSERT          reduce using rule 202 (statement -> labeled_statement .)
    WHILE           reduce using rule 202 (statement -> labeled_statement .)
    FOR             reduce using rule 202 (statement -> labeled_statement .)
    GOTO            reduce using rule 202 (statement -> labeled_statement .)
    BREAK           reduce using rule 202 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 202 (statement -> labeled_statement .)
    RETURN          reduce using rule 202 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 202 (statement -> labeled_statement .)
    PLUS_PLUS       reduce using rule 202 (statement -> labeled_statement .)
    MINUS_MINUS     reduce using rule 202 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 202 (statement -> labeled_statement .)
    AND             reduce using rule 202 (statement -> labeled_statement .)
    STAR            reduce using rule 202 (statement -> labeled_statement .)
    PLUS            reduce using rule 202 (statement -> labeled_statement .)
    MINUS           reduce using rule 202 (statement -> labeled_statement .)
    NOT             reduce using rule 202 (statement -> labeled_statement .)
    TILDE           reduce using rule 202 (statement -> labeled_statement .)
    LEFT_PARENTHESIS reduce using rule 202 (statement -> labeled_statement .)
    NUMBER          reduce using rule 202 (statement -> labeled_statement .)
    DECIMAL_NUMBER  reduce using rule 202 (statement -> labeled_statement .)
    CHARACTER       reduce using rule 202 (statement -> labeled_statement .)
    TRUE            reduce using rule 202 (statement -> labeled_statement .)
    FALSE           reduce using rule 202 (statement -> labeled_statement .)
    NULL            reduce using rule 202 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 202 (statement -> labeled_statement .)
    INPUT           reduce using rule 202 (statement -> labeled_statement .)
    SQUARE_ROOT     reduce using rule 202 (statement -> labeled_statement .)
    SIN             reduce using rule 202 (statement -> labeled_statement .)
    COS             reduce using rule 202 (statement -> labeled_statement .)
    TAN             reduce using rule 202 (statement -> labeled_statement .)
    STRING_COPY     reduce using rule 202 (statement -> labeled_statement .)
    STRING_REVERSE  reduce using rule 202 (statement -> labeled_statement .)
    STRING_LENGTH   reduce using rule 202 (statement -> labeled_statement .)
    STRING_COMPARE  reduce using rule 202 (statement -> labeled_statement .)
    WRITE           reduce using rule 202 (statement -> labeled_statement .)
    READ            reduce using rule 202 (statement -> labeled_statement .)
    OPEN            reduce using rule 202 (statement -> labeled_statement .)
    OUTPUT          reduce using rule 202 (statement -> labeled_statement .)
    ELSE            reduce using rule 202 (statement -> labeled_statement .)


state 67

    (203) labeled_statement -> IDENTIFIER . COLON statement
    (18) primary_expression -> IDENTIFIER .

    COLON           shift and go to state 180
    LEFT_SQUARE_BRACKET reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 18 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 18 (primary_expression -> IDENTIFIER .)
    ARROW           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 18 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 18 (primary_expression -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MODULUS_EQUALS  reduce using rule 18 (primary_expression -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 18 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 18 (primary_expression -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 18 (primary_expression -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 18 (primary_expression -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 18 (primary_expression -> IDENTIFIER .)
    STAR            reduce using rule 18 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MODULUS         reduce using rule 18 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 18 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 18 (primary_expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 18 (primary_expression -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 18 (primary_expression -> IDENTIFIER .)
    EQUALS_EQUALS   reduce using rule 18 (primary_expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 18 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 18 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 18 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 18 (primary_expression -> IDENTIFIER .)
    AND_AND         reduce using rule 18 (primary_expression -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 18 (primary_expression -> IDENTIFIER .)
    OR_OR           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 18 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 18 (primary_expression -> IDENTIFIER .)


state 68

    (212) expression_statement -> expression . SEMICOLON
    (97) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 181
    COMMA           shift and go to state 182


state 69

    (214) selection_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (215) selection_statement -> IF . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement

    LEFT_PARENTHESIS shift and go to state 183


state 70

    (21) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (52) cast_expression -> LEFT_PARENTHESIS . type_specifier RIGHT_PARENTHESIS cast_expression
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 149
    STRUCT          shift and go to state 24
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression                     shift and go to state 184
    type_specifier                 shift and go to state 185
    cast_expression                shift and go to state 86
    assignment_expression          shift and go to state 78
    struct_specifier               shift and go to state 18
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 71

    (216) selection_statement -> ASSERT . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON

    LEFT_PARENTHESIS shift and go to state 186


state 72

    (217) iteration_statement -> WHILE . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement

    LEFT_PARENTHESIS shift and go to state 187


state 73

    (218) iteration_statement -> FOR . LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (219) iteration_statement -> FOR . LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (220) iteration_statement -> FOR . LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (221) iteration_statement -> FOR . LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement

    LEFT_PARENTHESIS shift and go to state 188


state 74

    (222) jump_statement -> GOTO . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 189


state 75

    (223) jump_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 190


state 76

    (224) jump_statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 191


state 77

    (225) jump_statement -> RETURN . SEMICOLON
    (226) jump_statement -> RETURN . expression SEMICOLON
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    SEMICOLON       shift and go to state 192
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression                     shift and go to state 193
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 78

    (96) expression -> assignment_expression .

    SEMICOLON       reduce using rule 96 (expression -> assignment_expression .)
    COMMA           reduce using rule 96 (expression -> assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 96 (expression -> assignment_expression .)
    COLON           reduce using rule 96 (expression -> assignment_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 96 (expression -> assignment_expression .)


state 79

    (83) assignment_expression -> conditional_expression .

    SEMICOLON       reduce using rule 83 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 83 (assignment_expression -> conditional_expression .)
    RIGHT_PARENTHESIS reduce using rule 83 (assignment_expression -> conditional_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 83 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 83 (assignment_expression -> conditional_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 83 (assignment_expression -> conditional_expression .)


state 80

    (84) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (51) cast_expression -> unary_expression .
    (85) assignment_operator -> . EQUALS
    (86) assignment_operator -> . DIVIDE_EQUALS
    (87) assignment_operator -> . MULTIPLY_EQUALS
    (88) assignment_operator -> . MODULUS_EQUALS
    (89) assignment_operator -> . PLUS_EQUALS
    (90) assignment_operator -> . MINUS_EQUALS
    (91) assignment_operator -> . LEFT_SHIFT_EQUALS
    (92) assignment_operator -> . RIGHT_SHIFT_EQUALS
    (93) assignment_operator -> . AND_EQUALS
    (94) assignment_operator -> . OR_EQUALS
    (95) assignment_operator -> . XOR_EQUALS

    STAR            reduce using rule 51 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 51 (cast_expression -> unary_expression .)
    MODULUS         reduce using rule 51 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 51 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 51 (cast_expression -> unary_expression .)
    LEFT_SHIFT      reduce using rule 51 (cast_expression -> unary_expression .)
    RIGHT_SHIFT     reduce using rule 51 (cast_expression -> unary_expression .)
    LESS_THAN       reduce using rule 51 (cast_expression -> unary_expression .)
    GREATER_THAN    reduce using rule 51 (cast_expression -> unary_expression .)
    LESS_THAN_EQUALS reduce using rule 51 (cast_expression -> unary_expression .)
    GREATER_THAN_EQUALS reduce using rule 51 (cast_expression -> unary_expression .)
    EQUALS_EQUALS   reduce using rule 51 (cast_expression -> unary_expression .)
    NOT_EQUALS      reduce using rule 51 (cast_expression -> unary_expression .)
    AND             reduce using rule 51 (cast_expression -> unary_expression .)
    XOR             reduce using rule 51 (cast_expression -> unary_expression .)
    OR              reduce using rule 51 (cast_expression -> unary_expression .)
    AND_AND         reduce using rule 51 (cast_expression -> unary_expression .)
    QUESTION_MARK   reduce using rule 51 (cast_expression -> unary_expression .)
    OR_OR           reduce using rule 51 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 51 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 51 (cast_expression -> unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 51 (cast_expression -> unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 51 (cast_expression -> unary_expression .)
    COLON           reduce using rule 51 (cast_expression -> unary_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 51 (cast_expression -> unary_expression .)
    EQUALS          shift and go to state 195
    DIVIDE_EQUALS   shift and go to state 196
    MULTIPLY_EQUALS shift and go to state 197
    MODULUS_EQUALS  shift and go to state 198
    PLUS_EQUALS     shift and go to state 199
    MINUS_EQUALS    shift and go to state 200
    LEFT_SHIFT_EQUALS shift and go to state 201
    RIGHT_SHIFT_EQUALS shift and go to state 202
    AND_EQUALS      shift and go to state 203
    OR_EQUALS       shift and go to state 204
    XOR_EQUALS      shift and go to state 205

    assignment_operator            shift and go to state 194

state 81

    (81) conditional_expression -> logical_or_expression .
    (82) conditional_expression -> logical_or_expression . QUESTION_MARK expression COLON conditional_expression
    (80) logical_or_expression -> logical_or_expression . OR_OR logical_and_expression

    SEMICOLON       reduce using rule 81 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 81 (conditional_expression -> logical_or_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 81 (conditional_expression -> logical_or_expression .)
    RIGHT_PARENTHESIS reduce using rule 81 (conditional_expression -> logical_or_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 81 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 81 (conditional_expression -> logical_or_expression .)
    QUESTION_MARK   shift and go to state 206
    OR_OR           shift and go to state 207


state 82

    (40) unary_expression -> postfix_expression .
    (31) postfix_expression -> postfix_expression . LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> postfix_expression . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> postfix_expression . LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (35) postfix_expression -> postfix_expression . ARROW IDENTIFIER
    (36) postfix_expression -> postfix_expression . PLUS_PLUS
    (37) postfix_expression -> postfix_expression . MINUS_MINUS

    EQUALS          reduce using rule 40 (unary_expression -> postfix_expression .)
    DIVIDE_EQUALS   reduce using rule 40 (unary_expression -> postfix_expression .)
    MULTIPLY_EQUALS reduce using rule 40 (unary_expression -> postfix_expression .)
    MODULUS_EQUALS  reduce using rule 40 (unary_expression -> postfix_expression .)
    PLUS_EQUALS     reduce using rule 40 (unary_expression -> postfix_expression .)
    MINUS_EQUALS    reduce using rule 40 (unary_expression -> postfix_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 40 (unary_expression -> postfix_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 40 (unary_expression -> postfix_expression .)
    AND_EQUALS      reduce using rule 40 (unary_expression -> postfix_expression .)
    OR_EQUALS       reduce using rule 40 (unary_expression -> postfix_expression .)
    XOR_EQUALS      reduce using rule 40 (unary_expression -> postfix_expression .)
    STAR            reduce using rule 40 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 40 (unary_expression -> postfix_expression .)
    MODULUS         reduce using rule 40 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 40 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 40 (unary_expression -> postfix_expression .)
    LEFT_SHIFT      reduce using rule 40 (unary_expression -> postfix_expression .)
    RIGHT_SHIFT     reduce using rule 40 (unary_expression -> postfix_expression .)
    LESS_THAN       reduce using rule 40 (unary_expression -> postfix_expression .)
    GREATER_THAN    reduce using rule 40 (unary_expression -> postfix_expression .)
    LESS_THAN_EQUALS reduce using rule 40 (unary_expression -> postfix_expression .)
    GREATER_THAN_EQUALS reduce using rule 40 (unary_expression -> postfix_expression .)
    EQUALS_EQUALS   reduce using rule 40 (unary_expression -> postfix_expression .)
    NOT_EQUALS      reduce using rule 40 (unary_expression -> postfix_expression .)
    AND             reduce using rule 40 (unary_expression -> postfix_expression .)
    XOR             reduce using rule 40 (unary_expression -> postfix_expression .)
    OR              reduce using rule 40 (unary_expression -> postfix_expression .)
    AND_AND         reduce using rule 40 (unary_expression -> postfix_expression .)
    QUESTION_MARK   reduce using rule 40 (unary_expression -> postfix_expression .)
    OR_OR           reduce using rule 40 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 40 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 40 (unary_expression -> postfix_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 40 (unary_expression -> postfix_expression .)
    RIGHT_PARENTHESIS reduce using rule 40 (unary_expression -> postfix_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 40 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 40 (unary_expression -> postfix_expression .)
    LEFT_SQUARE_BRACKET shift and go to state 208
    LEFT_PARENTHESIS shift and go to state 209
    DOT             shift and go to state 210
    ARROW           shift and go to state 211
    PLUS_PLUS       shift and go to state 212
    MINUS_MINUS     shift and go to state 213


state 83

    (41) unary_expression -> PLUS_PLUS . unary_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 215
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    unary_expression               shift and go to state 214
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 84

    (42) unary_expression -> MINUS_MINUS . unary_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 215
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    unary_expression               shift and go to state 216
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 85

    (43) unary_expression -> unary_operator . cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 217
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 86

    (53) multiplicative_expression -> cast_expression .

    STAR            reduce using rule 53 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 53 (multiplicative_expression -> cast_expression .)
    MODULUS         reduce using rule 53 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 53 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 53 (multiplicative_expression -> cast_expression .)
    LEFT_SHIFT      reduce using rule 53 (multiplicative_expression -> cast_expression .)
    RIGHT_SHIFT     reduce using rule 53 (multiplicative_expression -> cast_expression .)
    LESS_THAN       reduce using rule 53 (multiplicative_expression -> cast_expression .)
    GREATER_THAN    reduce using rule 53 (multiplicative_expression -> cast_expression .)
    LESS_THAN_EQUALS reduce using rule 53 (multiplicative_expression -> cast_expression .)
    GREATER_THAN_EQUALS reduce using rule 53 (multiplicative_expression -> cast_expression .)
    EQUALS_EQUALS   reduce using rule 53 (multiplicative_expression -> cast_expression .)
    NOT_EQUALS      reduce using rule 53 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 53 (multiplicative_expression -> cast_expression .)
    XOR             reduce using rule 53 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 53 (multiplicative_expression -> cast_expression .)
    AND_AND         reduce using rule 53 (multiplicative_expression -> cast_expression .)
    QUESTION_MARK   reduce using rule 53 (multiplicative_expression -> cast_expression .)
    OR_OR           reduce using rule 53 (multiplicative_expression -> cast_expression .)
    SEMICOLON       reduce using rule 53 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 53 (multiplicative_expression -> cast_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 53 (multiplicative_expression -> cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 53 (multiplicative_expression -> cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 53 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 53 (multiplicative_expression -> cast_expression .)


state 87

    (44) unary_expression -> SIZEOF . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 218


state 88

    (79) logical_or_expression -> logical_and_expression .
    (78) logical_and_expression -> logical_and_expression . AND_AND or_expression

    QUESTION_MARK   reduce using rule 79 (logical_or_expression -> logical_and_expression .)
    OR_OR           reduce using rule 79 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 79 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 79 (logical_or_expression -> logical_and_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 79 (logical_or_expression -> logical_and_expression .)
    RIGHT_PARENTHESIS reduce using rule 79 (logical_or_expression -> logical_and_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 79 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 79 (logical_or_expression -> logical_and_expression .)
    AND_AND         shift and go to state 219


state 89

    (30) postfix_expression -> primary_expression .

    LEFT_SQUARE_BRACKET reduce using rule 30 (postfix_expression -> primary_expression .)
    LEFT_PARENTHESIS reduce using rule 30 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 30 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 30 (postfix_expression -> primary_expression .)
    PLUS_PLUS       reduce using rule 30 (postfix_expression -> primary_expression .)
    MINUS_MINUS     reduce using rule 30 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 30 (postfix_expression -> primary_expression .)
    DIVIDE_EQUALS   reduce using rule 30 (postfix_expression -> primary_expression .)
    MULTIPLY_EQUALS reduce using rule 30 (postfix_expression -> primary_expression .)
    MODULUS_EQUALS  reduce using rule 30 (postfix_expression -> primary_expression .)
    PLUS_EQUALS     reduce using rule 30 (postfix_expression -> primary_expression .)
    MINUS_EQUALS    reduce using rule 30 (postfix_expression -> primary_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 30 (postfix_expression -> primary_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 30 (postfix_expression -> primary_expression .)
    AND_EQUALS      reduce using rule 30 (postfix_expression -> primary_expression .)
    OR_EQUALS       reduce using rule 30 (postfix_expression -> primary_expression .)
    XOR_EQUALS      reduce using rule 30 (postfix_expression -> primary_expression .)
    STAR            reduce using rule 30 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 30 (postfix_expression -> primary_expression .)
    MODULUS         reduce using rule 30 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 30 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 30 (postfix_expression -> primary_expression .)
    LEFT_SHIFT      reduce using rule 30 (postfix_expression -> primary_expression .)
    RIGHT_SHIFT     reduce using rule 30 (postfix_expression -> primary_expression .)
    LESS_THAN       reduce using rule 30 (postfix_expression -> primary_expression .)
    GREATER_THAN    reduce using rule 30 (postfix_expression -> primary_expression .)
    LESS_THAN_EQUALS reduce using rule 30 (postfix_expression -> primary_expression .)
    GREATER_THAN_EQUALS reduce using rule 30 (postfix_expression -> primary_expression .)
    EQUALS_EQUALS   reduce using rule 30 (postfix_expression -> primary_expression .)
    NOT_EQUALS      reduce using rule 30 (postfix_expression -> primary_expression .)
    AND             reduce using rule 30 (postfix_expression -> primary_expression .)
    XOR             reduce using rule 30 (postfix_expression -> primary_expression .)
    OR              reduce using rule 30 (postfix_expression -> primary_expression .)
    AND_AND         reduce using rule 30 (postfix_expression -> primary_expression .)
    QUESTION_MARK   reduce using rule 30 (postfix_expression -> primary_expression .)
    OR_OR           reduce using rule 30 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 30 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 30 (postfix_expression -> primary_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 30 (postfix_expression -> primary_expression .)
    RIGHT_PARENTHESIS reduce using rule 30 (postfix_expression -> primary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 30 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 30 (postfix_expression -> primary_expression .)


state 90

    (45) unary_operator -> AND .

    LEFT_PARENTHESIS reduce using rule 45 (unary_operator -> AND .)
    PLUS_PLUS       reduce using rule 45 (unary_operator -> AND .)
    MINUS_MINUS     reduce using rule 45 (unary_operator -> AND .)
    SIZEOF          reduce using rule 45 (unary_operator -> AND .)
    AND             reduce using rule 45 (unary_operator -> AND .)
    STAR            reduce using rule 45 (unary_operator -> AND .)
    PLUS            reduce using rule 45 (unary_operator -> AND .)
    MINUS           reduce using rule 45 (unary_operator -> AND .)
    NOT             reduce using rule 45 (unary_operator -> AND .)
    TILDE           reduce using rule 45 (unary_operator -> AND .)
    IDENTIFIER      reduce using rule 45 (unary_operator -> AND .)
    NUMBER          reduce using rule 45 (unary_operator -> AND .)
    DECIMAL_NUMBER  reduce using rule 45 (unary_operator -> AND .)
    CHARACTER       reduce using rule 45 (unary_operator -> AND .)
    TRUE            reduce using rule 45 (unary_operator -> AND .)
    FALSE           reduce using rule 45 (unary_operator -> AND .)
    NULL            reduce using rule 45 (unary_operator -> AND .)
    STRING_LITERAL  reduce using rule 45 (unary_operator -> AND .)
    INPUT           reduce using rule 45 (unary_operator -> AND .)
    SQUARE_ROOT     reduce using rule 45 (unary_operator -> AND .)
    SIN             reduce using rule 45 (unary_operator -> AND .)
    COS             reduce using rule 45 (unary_operator -> AND .)
    TAN             reduce using rule 45 (unary_operator -> AND .)
    STRING_COPY     reduce using rule 45 (unary_operator -> AND .)
    STRING_REVERSE  reduce using rule 45 (unary_operator -> AND .)
    STRING_LENGTH   reduce using rule 45 (unary_operator -> AND .)
    STRING_COMPARE  reduce using rule 45 (unary_operator -> AND .)
    WRITE           reduce using rule 45 (unary_operator -> AND .)
    READ            reduce using rule 45 (unary_operator -> AND .)
    OPEN            reduce using rule 45 (unary_operator -> AND .)
    OUTPUT          reduce using rule 45 (unary_operator -> AND .)


state 91

    (46) unary_operator -> STAR .

    LEFT_PARENTHESIS reduce using rule 46 (unary_operator -> STAR .)
    PLUS_PLUS       reduce using rule 46 (unary_operator -> STAR .)
    MINUS_MINUS     reduce using rule 46 (unary_operator -> STAR .)
    SIZEOF          reduce using rule 46 (unary_operator -> STAR .)
    AND             reduce using rule 46 (unary_operator -> STAR .)
    STAR            reduce using rule 46 (unary_operator -> STAR .)
    PLUS            reduce using rule 46 (unary_operator -> STAR .)
    MINUS           reduce using rule 46 (unary_operator -> STAR .)
    NOT             reduce using rule 46 (unary_operator -> STAR .)
    TILDE           reduce using rule 46 (unary_operator -> STAR .)
    IDENTIFIER      reduce using rule 46 (unary_operator -> STAR .)
    NUMBER          reduce using rule 46 (unary_operator -> STAR .)
    DECIMAL_NUMBER  reduce using rule 46 (unary_operator -> STAR .)
    CHARACTER       reduce using rule 46 (unary_operator -> STAR .)
    TRUE            reduce using rule 46 (unary_operator -> STAR .)
    FALSE           reduce using rule 46 (unary_operator -> STAR .)
    NULL            reduce using rule 46 (unary_operator -> STAR .)
    STRING_LITERAL  reduce using rule 46 (unary_operator -> STAR .)
    INPUT           reduce using rule 46 (unary_operator -> STAR .)
    SQUARE_ROOT     reduce using rule 46 (unary_operator -> STAR .)
    SIN             reduce using rule 46 (unary_operator -> STAR .)
    COS             reduce using rule 46 (unary_operator -> STAR .)
    TAN             reduce using rule 46 (unary_operator -> STAR .)
    STRING_COPY     reduce using rule 46 (unary_operator -> STAR .)
    STRING_REVERSE  reduce using rule 46 (unary_operator -> STAR .)
    STRING_LENGTH   reduce using rule 46 (unary_operator -> STAR .)
    STRING_COMPARE  reduce using rule 46 (unary_operator -> STAR .)
    WRITE           reduce using rule 46 (unary_operator -> STAR .)
    READ            reduce using rule 46 (unary_operator -> STAR .)
    OPEN            reduce using rule 46 (unary_operator -> STAR .)
    OUTPUT          reduce using rule 46 (unary_operator -> STAR .)


state 92

    (47) unary_operator -> PLUS .

    LEFT_PARENTHESIS reduce using rule 47 (unary_operator -> PLUS .)
    PLUS_PLUS       reduce using rule 47 (unary_operator -> PLUS .)
    MINUS_MINUS     reduce using rule 47 (unary_operator -> PLUS .)
    SIZEOF          reduce using rule 47 (unary_operator -> PLUS .)
    AND             reduce using rule 47 (unary_operator -> PLUS .)
    STAR            reduce using rule 47 (unary_operator -> PLUS .)
    PLUS            reduce using rule 47 (unary_operator -> PLUS .)
    MINUS           reduce using rule 47 (unary_operator -> PLUS .)
    NOT             reduce using rule 47 (unary_operator -> PLUS .)
    TILDE           reduce using rule 47 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 47 (unary_operator -> PLUS .)
    NUMBER          reduce using rule 47 (unary_operator -> PLUS .)
    DECIMAL_NUMBER  reduce using rule 47 (unary_operator -> PLUS .)
    CHARACTER       reduce using rule 47 (unary_operator -> PLUS .)
    TRUE            reduce using rule 47 (unary_operator -> PLUS .)
    FALSE           reduce using rule 47 (unary_operator -> PLUS .)
    NULL            reduce using rule 47 (unary_operator -> PLUS .)
    STRING_LITERAL  reduce using rule 47 (unary_operator -> PLUS .)
    INPUT           reduce using rule 47 (unary_operator -> PLUS .)
    SQUARE_ROOT     reduce using rule 47 (unary_operator -> PLUS .)
    SIN             reduce using rule 47 (unary_operator -> PLUS .)
    COS             reduce using rule 47 (unary_operator -> PLUS .)
    TAN             reduce using rule 47 (unary_operator -> PLUS .)
    STRING_COPY     reduce using rule 47 (unary_operator -> PLUS .)
    STRING_REVERSE  reduce using rule 47 (unary_operator -> PLUS .)
    STRING_LENGTH   reduce using rule 47 (unary_operator -> PLUS .)
    STRING_COMPARE  reduce using rule 47 (unary_operator -> PLUS .)
    WRITE           reduce using rule 47 (unary_operator -> PLUS .)
    READ            reduce using rule 47 (unary_operator -> PLUS .)
    OPEN            reduce using rule 47 (unary_operator -> PLUS .)
    OUTPUT          reduce using rule 47 (unary_operator -> PLUS .)


state 93

    (48) unary_operator -> MINUS .

    LEFT_PARENTHESIS reduce using rule 48 (unary_operator -> MINUS .)
    PLUS_PLUS       reduce using rule 48 (unary_operator -> MINUS .)
    MINUS_MINUS     reduce using rule 48 (unary_operator -> MINUS .)
    SIZEOF          reduce using rule 48 (unary_operator -> MINUS .)
    AND             reduce using rule 48 (unary_operator -> MINUS .)
    STAR            reduce using rule 48 (unary_operator -> MINUS .)
    PLUS            reduce using rule 48 (unary_operator -> MINUS .)
    MINUS           reduce using rule 48 (unary_operator -> MINUS .)
    NOT             reduce using rule 48 (unary_operator -> MINUS .)
    TILDE           reduce using rule 48 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 48 (unary_operator -> MINUS .)
    NUMBER          reduce using rule 48 (unary_operator -> MINUS .)
    DECIMAL_NUMBER  reduce using rule 48 (unary_operator -> MINUS .)
    CHARACTER       reduce using rule 48 (unary_operator -> MINUS .)
    TRUE            reduce using rule 48 (unary_operator -> MINUS .)
    FALSE           reduce using rule 48 (unary_operator -> MINUS .)
    NULL            reduce using rule 48 (unary_operator -> MINUS .)
    STRING_LITERAL  reduce using rule 48 (unary_operator -> MINUS .)
    INPUT           reduce using rule 48 (unary_operator -> MINUS .)
    SQUARE_ROOT     reduce using rule 48 (unary_operator -> MINUS .)
    SIN             reduce using rule 48 (unary_operator -> MINUS .)
    COS             reduce using rule 48 (unary_operator -> MINUS .)
    TAN             reduce using rule 48 (unary_operator -> MINUS .)
    STRING_COPY     reduce using rule 48 (unary_operator -> MINUS .)
    STRING_REVERSE  reduce using rule 48 (unary_operator -> MINUS .)
    STRING_LENGTH   reduce using rule 48 (unary_operator -> MINUS .)
    STRING_COMPARE  reduce using rule 48 (unary_operator -> MINUS .)
    WRITE           reduce using rule 48 (unary_operator -> MINUS .)
    READ            reduce using rule 48 (unary_operator -> MINUS .)
    OPEN            reduce using rule 48 (unary_operator -> MINUS .)
    OUTPUT          reduce using rule 48 (unary_operator -> MINUS .)


state 94

    (49) unary_operator -> NOT .

    LEFT_PARENTHESIS reduce using rule 49 (unary_operator -> NOT .)
    PLUS_PLUS       reduce using rule 49 (unary_operator -> NOT .)
    MINUS_MINUS     reduce using rule 49 (unary_operator -> NOT .)
    SIZEOF          reduce using rule 49 (unary_operator -> NOT .)
    AND             reduce using rule 49 (unary_operator -> NOT .)
    STAR            reduce using rule 49 (unary_operator -> NOT .)
    PLUS            reduce using rule 49 (unary_operator -> NOT .)
    MINUS           reduce using rule 49 (unary_operator -> NOT .)
    NOT             reduce using rule 49 (unary_operator -> NOT .)
    TILDE           reduce using rule 49 (unary_operator -> NOT .)
    IDENTIFIER      reduce using rule 49 (unary_operator -> NOT .)
    NUMBER          reduce using rule 49 (unary_operator -> NOT .)
    DECIMAL_NUMBER  reduce using rule 49 (unary_operator -> NOT .)
    CHARACTER       reduce using rule 49 (unary_operator -> NOT .)
    TRUE            reduce using rule 49 (unary_operator -> NOT .)
    FALSE           reduce using rule 49 (unary_operator -> NOT .)
    NULL            reduce using rule 49 (unary_operator -> NOT .)
    STRING_LITERAL  reduce using rule 49 (unary_operator -> NOT .)
    INPUT           reduce using rule 49 (unary_operator -> NOT .)
    SQUARE_ROOT     reduce using rule 49 (unary_operator -> NOT .)
    SIN             reduce using rule 49 (unary_operator -> NOT .)
    COS             reduce using rule 49 (unary_operator -> NOT .)
    TAN             reduce using rule 49 (unary_operator -> NOT .)
    STRING_COPY     reduce using rule 49 (unary_operator -> NOT .)
    STRING_REVERSE  reduce using rule 49 (unary_operator -> NOT .)
    STRING_LENGTH   reduce using rule 49 (unary_operator -> NOT .)
    STRING_COMPARE  reduce using rule 49 (unary_operator -> NOT .)
    WRITE           reduce using rule 49 (unary_operator -> NOT .)
    READ            reduce using rule 49 (unary_operator -> NOT .)
    OPEN            reduce using rule 49 (unary_operator -> NOT .)
    OUTPUT          reduce using rule 49 (unary_operator -> NOT .)


state 95

    (50) unary_operator -> TILDE .

    LEFT_PARENTHESIS reduce using rule 50 (unary_operator -> TILDE .)
    PLUS_PLUS       reduce using rule 50 (unary_operator -> TILDE .)
    MINUS_MINUS     reduce using rule 50 (unary_operator -> TILDE .)
    SIZEOF          reduce using rule 50 (unary_operator -> TILDE .)
    AND             reduce using rule 50 (unary_operator -> TILDE .)
    STAR            reduce using rule 50 (unary_operator -> TILDE .)
    PLUS            reduce using rule 50 (unary_operator -> TILDE .)
    MINUS           reduce using rule 50 (unary_operator -> TILDE .)
    NOT             reduce using rule 50 (unary_operator -> TILDE .)
    TILDE           reduce using rule 50 (unary_operator -> TILDE .)
    IDENTIFIER      reduce using rule 50 (unary_operator -> TILDE .)
    NUMBER          reduce using rule 50 (unary_operator -> TILDE .)
    DECIMAL_NUMBER  reduce using rule 50 (unary_operator -> TILDE .)
    CHARACTER       reduce using rule 50 (unary_operator -> TILDE .)
    TRUE            reduce using rule 50 (unary_operator -> TILDE .)
    FALSE           reduce using rule 50 (unary_operator -> TILDE .)
    NULL            reduce using rule 50 (unary_operator -> TILDE .)
    STRING_LITERAL  reduce using rule 50 (unary_operator -> TILDE .)
    INPUT           reduce using rule 50 (unary_operator -> TILDE .)
    SQUARE_ROOT     reduce using rule 50 (unary_operator -> TILDE .)
    SIN             reduce using rule 50 (unary_operator -> TILDE .)
    COS             reduce using rule 50 (unary_operator -> TILDE .)
    TAN             reduce using rule 50 (unary_operator -> TILDE .)
    STRING_COPY     reduce using rule 50 (unary_operator -> TILDE .)
    STRING_REVERSE  reduce using rule 50 (unary_operator -> TILDE .)
    STRING_LENGTH   reduce using rule 50 (unary_operator -> TILDE .)
    STRING_COMPARE  reduce using rule 50 (unary_operator -> TILDE .)
    WRITE           reduce using rule 50 (unary_operator -> TILDE .)
    READ            reduce using rule 50 (unary_operator -> TILDE .)
    OPEN            reduce using rule 50 (unary_operator -> TILDE .)
    OUTPUT          reduce using rule 50 (unary_operator -> TILDE .)


state 96

    (77) logical_and_expression -> or_expression .
    (76) or_expression -> or_expression . OR xor_expression

    AND_AND         reduce using rule 77 (logical_and_expression -> or_expression .)
    QUESTION_MARK   reduce using rule 77 (logical_and_expression -> or_expression .)
    OR_OR           reduce using rule 77 (logical_and_expression -> or_expression .)
    SEMICOLON       reduce using rule 77 (logical_and_expression -> or_expression .)
    COMMA           reduce using rule 77 (logical_and_expression -> or_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 77 (logical_and_expression -> or_expression .)
    RIGHT_PARENTHESIS reduce using rule 77 (logical_and_expression -> or_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 77 (logical_and_expression -> or_expression .)
    COLON           reduce using rule 77 (logical_and_expression -> or_expression .)
    OR              shift and go to state 220


state 97

    (19) primary_expression -> constant .

    LEFT_SQUARE_BRACKET reduce using rule 19 (primary_expression -> constant .)
    LEFT_PARENTHESIS reduce using rule 19 (primary_expression -> constant .)
    DOT             reduce using rule 19 (primary_expression -> constant .)
    ARROW           reduce using rule 19 (primary_expression -> constant .)
    PLUS_PLUS       reduce using rule 19 (primary_expression -> constant .)
    MINUS_MINUS     reduce using rule 19 (primary_expression -> constant .)
    EQUALS          reduce using rule 19 (primary_expression -> constant .)
    DIVIDE_EQUALS   reduce using rule 19 (primary_expression -> constant .)
    MULTIPLY_EQUALS reduce using rule 19 (primary_expression -> constant .)
    MODULUS_EQUALS  reduce using rule 19 (primary_expression -> constant .)
    PLUS_EQUALS     reduce using rule 19 (primary_expression -> constant .)
    MINUS_EQUALS    reduce using rule 19 (primary_expression -> constant .)
    LEFT_SHIFT_EQUALS reduce using rule 19 (primary_expression -> constant .)
    RIGHT_SHIFT_EQUALS reduce using rule 19 (primary_expression -> constant .)
    AND_EQUALS      reduce using rule 19 (primary_expression -> constant .)
    OR_EQUALS       reduce using rule 19 (primary_expression -> constant .)
    XOR_EQUALS      reduce using rule 19 (primary_expression -> constant .)
    STAR            reduce using rule 19 (primary_expression -> constant .)
    DIVIDE          reduce using rule 19 (primary_expression -> constant .)
    MODULUS         reduce using rule 19 (primary_expression -> constant .)
    PLUS            reduce using rule 19 (primary_expression -> constant .)
    MINUS           reduce using rule 19 (primary_expression -> constant .)
    LEFT_SHIFT      reduce using rule 19 (primary_expression -> constant .)
    RIGHT_SHIFT     reduce using rule 19 (primary_expression -> constant .)
    LESS_THAN       reduce using rule 19 (primary_expression -> constant .)
    GREATER_THAN    reduce using rule 19 (primary_expression -> constant .)
    LESS_THAN_EQUALS reduce using rule 19 (primary_expression -> constant .)
    GREATER_THAN_EQUALS reduce using rule 19 (primary_expression -> constant .)
    EQUALS_EQUALS   reduce using rule 19 (primary_expression -> constant .)
    NOT_EQUALS      reduce using rule 19 (primary_expression -> constant .)
    AND             reduce using rule 19 (primary_expression -> constant .)
    XOR             reduce using rule 19 (primary_expression -> constant .)
    OR              reduce using rule 19 (primary_expression -> constant .)
    AND_AND         reduce using rule 19 (primary_expression -> constant .)
    QUESTION_MARK   reduce using rule 19 (primary_expression -> constant .)
    OR_OR           reduce using rule 19 (primary_expression -> constant .)
    SEMICOLON       reduce using rule 19 (primary_expression -> constant .)
    COMMA           reduce using rule 19 (primary_expression -> constant .)
    RIGHT_SQUARE_BRACKET reduce using rule 19 (primary_expression -> constant .)
    RIGHT_PARENTHESIS reduce using rule 19 (primary_expression -> constant .)
    RIGHT_CURLY_BRACKET reduce using rule 19 (primary_expression -> constant .)
    COLON           reduce using rule 19 (primary_expression -> constant .)


state 98

    (20) primary_expression -> string .

    LEFT_SQUARE_BRACKET reduce using rule 20 (primary_expression -> string .)
    LEFT_PARENTHESIS reduce using rule 20 (primary_expression -> string .)
    DOT             reduce using rule 20 (primary_expression -> string .)
    ARROW           reduce using rule 20 (primary_expression -> string .)
    PLUS_PLUS       reduce using rule 20 (primary_expression -> string .)
    MINUS_MINUS     reduce using rule 20 (primary_expression -> string .)
    EQUALS          reduce using rule 20 (primary_expression -> string .)
    DIVIDE_EQUALS   reduce using rule 20 (primary_expression -> string .)
    MULTIPLY_EQUALS reduce using rule 20 (primary_expression -> string .)
    MODULUS_EQUALS  reduce using rule 20 (primary_expression -> string .)
    PLUS_EQUALS     reduce using rule 20 (primary_expression -> string .)
    MINUS_EQUALS    reduce using rule 20 (primary_expression -> string .)
    LEFT_SHIFT_EQUALS reduce using rule 20 (primary_expression -> string .)
    RIGHT_SHIFT_EQUALS reduce using rule 20 (primary_expression -> string .)
    AND_EQUALS      reduce using rule 20 (primary_expression -> string .)
    OR_EQUALS       reduce using rule 20 (primary_expression -> string .)
    XOR_EQUALS      reduce using rule 20 (primary_expression -> string .)
    STAR            reduce using rule 20 (primary_expression -> string .)
    DIVIDE          reduce using rule 20 (primary_expression -> string .)
    MODULUS         reduce using rule 20 (primary_expression -> string .)
    PLUS            reduce using rule 20 (primary_expression -> string .)
    MINUS           reduce using rule 20 (primary_expression -> string .)
    LEFT_SHIFT      reduce using rule 20 (primary_expression -> string .)
    RIGHT_SHIFT     reduce using rule 20 (primary_expression -> string .)
    LESS_THAN       reduce using rule 20 (primary_expression -> string .)
    GREATER_THAN    reduce using rule 20 (primary_expression -> string .)
    LESS_THAN_EQUALS reduce using rule 20 (primary_expression -> string .)
    GREATER_THAN_EQUALS reduce using rule 20 (primary_expression -> string .)
    EQUALS_EQUALS   reduce using rule 20 (primary_expression -> string .)
    NOT_EQUALS      reduce using rule 20 (primary_expression -> string .)
    AND             reduce using rule 20 (primary_expression -> string .)
    XOR             reduce using rule 20 (primary_expression -> string .)
    OR              reduce using rule 20 (primary_expression -> string .)
    AND_AND         reduce using rule 20 (primary_expression -> string .)
    QUESTION_MARK   reduce using rule 20 (primary_expression -> string .)
    OR_OR           reduce using rule 20 (primary_expression -> string .)
    SEMICOLON       reduce using rule 20 (primary_expression -> string .)
    COMMA           reduce using rule 20 (primary_expression -> string .)
    RIGHT_SQUARE_BRACKET reduce using rule 20 (primary_expression -> string .)
    RIGHT_PARENTHESIS reduce using rule 20 (primary_expression -> string .)
    RIGHT_CURLY_BRACKET reduce using rule 20 (primary_expression -> string .)
    COLON           reduce using rule 20 (primary_expression -> string .)


state 99

    (22) primary_expression -> predefined_functions .

    LEFT_SQUARE_BRACKET reduce using rule 22 (primary_expression -> predefined_functions .)
    LEFT_PARENTHESIS reduce using rule 22 (primary_expression -> predefined_functions .)
    DOT             reduce using rule 22 (primary_expression -> predefined_functions .)
    ARROW           reduce using rule 22 (primary_expression -> predefined_functions .)
    PLUS_PLUS       reduce using rule 22 (primary_expression -> predefined_functions .)
    MINUS_MINUS     reduce using rule 22 (primary_expression -> predefined_functions .)
    EQUALS          reduce using rule 22 (primary_expression -> predefined_functions .)
    DIVIDE_EQUALS   reduce using rule 22 (primary_expression -> predefined_functions .)
    MULTIPLY_EQUALS reduce using rule 22 (primary_expression -> predefined_functions .)
    MODULUS_EQUALS  reduce using rule 22 (primary_expression -> predefined_functions .)
    PLUS_EQUALS     reduce using rule 22 (primary_expression -> predefined_functions .)
    MINUS_EQUALS    reduce using rule 22 (primary_expression -> predefined_functions .)
    LEFT_SHIFT_EQUALS reduce using rule 22 (primary_expression -> predefined_functions .)
    RIGHT_SHIFT_EQUALS reduce using rule 22 (primary_expression -> predefined_functions .)
    AND_EQUALS      reduce using rule 22 (primary_expression -> predefined_functions .)
    OR_EQUALS       reduce using rule 22 (primary_expression -> predefined_functions .)
    XOR_EQUALS      reduce using rule 22 (primary_expression -> predefined_functions .)
    STAR            reduce using rule 22 (primary_expression -> predefined_functions .)
    DIVIDE          reduce using rule 22 (primary_expression -> predefined_functions .)
    MODULUS         reduce using rule 22 (primary_expression -> predefined_functions .)
    PLUS            reduce using rule 22 (primary_expression -> predefined_functions .)
    MINUS           reduce using rule 22 (primary_expression -> predefined_functions .)
    LEFT_SHIFT      reduce using rule 22 (primary_expression -> predefined_functions .)
    RIGHT_SHIFT     reduce using rule 22 (primary_expression -> predefined_functions .)
    LESS_THAN       reduce using rule 22 (primary_expression -> predefined_functions .)
    GREATER_THAN    reduce using rule 22 (primary_expression -> predefined_functions .)
    LESS_THAN_EQUALS reduce using rule 22 (primary_expression -> predefined_functions .)
    GREATER_THAN_EQUALS reduce using rule 22 (primary_expression -> predefined_functions .)
    EQUALS_EQUALS   reduce using rule 22 (primary_expression -> predefined_functions .)
    NOT_EQUALS      reduce using rule 22 (primary_expression -> predefined_functions .)
    AND             reduce using rule 22 (primary_expression -> predefined_functions .)
    XOR             reduce using rule 22 (primary_expression -> predefined_functions .)
    OR              reduce using rule 22 (primary_expression -> predefined_functions .)
    AND_AND         reduce using rule 22 (primary_expression -> predefined_functions .)
    QUESTION_MARK   reduce using rule 22 (primary_expression -> predefined_functions .)
    OR_OR           reduce using rule 22 (primary_expression -> predefined_functions .)
    SEMICOLON       reduce using rule 22 (primary_expression -> predefined_functions .)
    COMMA           reduce using rule 22 (primary_expression -> predefined_functions .)
    RIGHT_SQUARE_BRACKET reduce using rule 22 (primary_expression -> predefined_functions .)
    RIGHT_PARENTHESIS reduce using rule 22 (primary_expression -> predefined_functions .)
    RIGHT_CURLY_BRACKET reduce using rule 22 (primary_expression -> predefined_functions .)
    COLON           reduce using rule 22 (primary_expression -> predefined_functions .)


state 100

    (75) or_expression -> xor_expression .
    (74) xor_expression -> xor_expression . XOR and_expression

    OR              reduce using rule 75 (or_expression -> xor_expression .)
    AND_AND         reduce using rule 75 (or_expression -> xor_expression .)
    QUESTION_MARK   reduce using rule 75 (or_expression -> xor_expression .)
    OR_OR           reduce using rule 75 (or_expression -> xor_expression .)
    SEMICOLON       reduce using rule 75 (or_expression -> xor_expression .)
    COMMA           reduce using rule 75 (or_expression -> xor_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 75 (or_expression -> xor_expression .)
    RIGHT_PARENTHESIS reduce using rule 75 (or_expression -> xor_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 75 (or_expression -> xor_expression .)
    COLON           reduce using rule 75 (or_expression -> xor_expression .)
    XOR             shift and go to state 221


state 101

    (23) constant -> NUMBER .

    LEFT_SQUARE_BRACKET reduce using rule 23 (constant -> NUMBER .)
    LEFT_PARENTHESIS reduce using rule 23 (constant -> NUMBER .)
    DOT             reduce using rule 23 (constant -> NUMBER .)
    ARROW           reduce using rule 23 (constant -> NUMBER .)
    PLUS_PLUS       reduce using rule 23 (constant -> NUMBER .)
    MINUS_MINUS     reduce using rule 23 (constant -> NUMBER .)
    EQUALS          reduce using rule 23 (constant -> NUMBER .)
    DIVIDE_EQUALS   reduce using rule 23 (constant -> NUMBER .)
    MULTIPLY_EQUALS reduce using rule 23 (constant -> NUMBER .)
    MODULUS_EQUALS  reduce using rule 23 (constant -> NUMBER .)
    PLUS_EQUALS     reduce using rule 23 (constant -> NUMBER .)
    MINUS_EQUALS    reduce using rule 23 (constant -> NUMBER .)
    LEFT_SHIFT_EQUALS reduce using rule 23 (constant -> NUMBER .)
    RIGHT_SHIFT_EQUALS reduce using rule 23 (constant -> NUMBER .)
    AND_EQUALS      reduce using rule 23 (constant -> NUMBER .)
    OR_EQUALS       reduce using rule 23 (constant -> NUMBER .)
    XOR_EQUALS      reduce using rule 23 (constant -> NUMBER .)
    STAR            reduce using rule 23 (constant -> NUMBER .)
    DIVIDE          reduce using rule 23 (constant -> NUMBER .)
    MODULUS         reduce using rule 23 (constant -> NUMBER .)
    PLUS            reduce using rule 23 (constant -> NUMBER .)
    MINUS           reduce using rule 23 (constant -> NUMBER .)
    LEFT_SHIFT      reduce using rule 23 (constant -> NUMBER .)
    RIGHT_SHIFT     reduce using rule 23 (constant -> NUMBER .)
    LESS_THAN       reduce using rule 23 (constant -> NUMBER .)
    GREATER_THAN    reduce using rule 23 (constant -> NUMBER .)
    LESS_THAN_EQUALS reduce using rule 23 (constant -> NUMBER .)
    GREATER_THAN_EQUALS reduce using rule 23 (constant -> NUMBER .)
    EQUALS_EQUALS   reduce using rule 23 (constant -> NUMBER .)
    NOT_EQUALS      reduce using rule 23 (constant -> NUMBER .)
    AND             reduce using rule 23 (constant -> NUMBER .)
    XOR             reduce using rule 23 (constant -> NUMBER .)
    OR              reduce using rule 23 (constant -> NUMBER .)
    AND_AND         reduce using rule 23 (constant -> NUMBER .)
    QUESTION_MARK   reduce using rule 23 (constant -> NUMBER .)
    OR_OR           reduce using rule 23 (constant -> NUMBER .)
    SEMICOLON       reduce using rule 23 (constant -> NUMBER .)
    COMMA           reduce using rule 23 (constant -> NUMBER .)
    RIGHT_SQUARE_BRACKET reduce using rule 23 (constant -> NUMBER .)
    RIGHT_PARENTHESIS reduce using rule 23 (constant -> NUMBER .)
    RIGHT_CURLY_BRACKET reduce using rule 23 (constant -> NUMBER .)
    COLON           reduce using rule 23 (constant -> NUMBER .)


state 102

    (24) constant -> DECIMAL_NUMBER .

    LEFT_SQUARE_BRACKET reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    LEFT_PARENTHESIS reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    DOT             reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    ARROW           reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    PLUS_PLUS       reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    MINUS_MINUS     reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    EQUALS          reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    DIVIDE_EQUALS   reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    MULTIPLY_EQUALS reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    MODULUS_EQUALS  reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    PLUS_EQUALS     reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    MINUS_EQUALS    reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    LEFT_SHIFT_EQUALS reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    RIGHT_SHIFT_EQUALS reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    AND_EQUALS      reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    OR_EQUALS       reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    XOR_EQUALS      reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    STAR            reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    DIVIDE          reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    MODULUS         reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    PLUS            reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    MINUS           reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    LEFT_SHIFT      reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    RIGHT_SHIFT     reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    LESS_THAN       reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    GREATER_THAN    reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    LESS_THAN_EQUALS reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    GREATER_THAN_EQUALS reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    EQUALS_EQUALS   reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    NOT_EQUALS      reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    AND             reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    XOR             reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    OR              reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    AND_AND         reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    QUESTION_MARK   reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    OR_OR           reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    SEMICOLON       reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    COMMA           reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    RIGHT_SQUARE_BRACKET reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    RIGHT_PARENTHESIS reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    RIGHT_CURLY_BRACKET reduce using rule 24 (constant -> DECIMAL_NUMBER .)
    COLON           reduce using rule 24 (constant -> DECIMAL_NUMBER .)


state 103

    (25) constant -> CHARACTER .

    LEFT_SQUARE_BRACKET reduce using rule 25 (constant -> CHARACTER .)
    LEFT_PARENTHESIS reduce using rule 25 (constant -> CHARACTER .)
    DOT             reduce using rule 25 (constant -> CHARACTER .)
    ARROW           reduce using rule 25 (constant -> CHARACTER .)
    PLUS_PLUS       reduce using rule 25 (constant -> CHARACTER .)
    MINUS_MINUS     reduce using rule 25 (constant -> CHARACTER .)
    EQUALS          reduce using rule 25 (constant -> CHARACTER .)
    DIVIDE_EQUALS   reduce using rule 25 (constant -> CHARACTER .)
    MULTIPLY_EQUALS reduce using rule 25 (constant -> CHARACTER .)
    MODULUS_EQUALS  reduce using rule 25 (constant -> CHARACTER .)
    PLUS_EQUALS     reduce using rule 25 (constant -> CHARACTER .)
    MINUS_EQUALS    reduce using rule 25 (constant -> CHARACTER .)
    LEFT_SHIFT_EQUALS reduce using rule 25 (constant -> CHARACTER .)
    RIGHT_SHIFT_EQUALS reduce using rule 25 (constant -> CHARACTER .)
    AND_EQUALS      reduce using rule 25 (constant -> CHARACTER .)
    OR_EQUALS       reduce using rule 25 (constant -> CHARACTER .)
    XOR_EQUALS      reduce using rule 25 (constant -> CHARACTER .)
    STAR            reduce using rule 25 (constant -> CHARACTER .)
    DIVIDE          reduce using rule 25 (constant -> CHARACTER .)
    MODULUS         reduce using rule 25 (constant -> CHARACTER .)
    PLUS            reduce using rule 25 (constant -> CHARACTER .)
    MINUS           reduce using rule 25 (constant -> CHARACTER .)
    LEFT_SHIFT      reduce using rule 25 (constant -> CHARACTER .)
    RIGHT_SHIFT     reduce using rule 25 (constant -> CHARACTER .)
    LESS_THAN       reduce using rule 25 (constant -> CHARACTER .)
    GREATER_THAN    reduce using rule 25 (constant -> CHARACTER .)
    LESS_THAN_EQUALS reduce using rule 25 (constant -> CHARACTER .)
    GREATER_THAN_EQUALS reduce using rule 25 (constant -> CHARACTER .)
    EQUALS_EQUALS   reduce using rule 25 (constant -> CHARACTER .)
    NOT_EQUALS      reduce using rule 25 (constant -> CHARACTER .)
    AND             reduce using rule 25 (constant -> CHARACTER .)
    XOR             reduce using rule 25 (constant -> CHARACTER .)
    OR              reduce using rule 25 (constant -> CHARACTER .)
    AND_AND         reduce using rule 25 (constant -> CHARACTER .)
    QUESTION_MARK   reduce using rule 25 (constant -> CHARACTER .)
    OR_OR           reduce using rule 25 (constant -> CHARACTER .)
    SEMICOLON       reduce using rule 25 (constant -> CHARACTER .)
    COMMA           reduce using rule 25 (constant -> CHARACTER .)
    RIGHT_SQUARE_BRACKET reduce using rule 25 (constant -> CHARACTER .)
    RIGHT_PARENTHESIS reduce using rule 25 (constant -> CHARACTER .)
    RIGHT_CURLY_BRACKET reduce using rule 25 (constant -> CHARACTER .)
    COLON           reduce using rule 25 (constant -> CHARACTER .)


state 104

    (26) constant -> TRUE .

    LEFT_SQUARE_BRACKET reduce using rule 26 (constant -> TRUE .)
    LEFT_PARENTHESIS reduce using rule 26 (constant -> TRUE .)
    DOT             reduce using rule 26 (constant -> TRUE .)
    ARROW           reduce using rule 26 (constant -> TRUE .)
    PLUS_PLUS       reduce using rule 26 (constant -> TRUE .)
    MINUS_MINUS     reduce using rule 26 (constant -> TRUE .)
    EQUALS          reduce using rule 26 (constant -> TRUE .)
    DIVIDE_EQUALS   reduce using rule 26 (constant -> TRUE .)
    MULTIPLY_EQUALS reduce using rule 26 (constant -> TRUE .)
    MODULUS_EQUALS  reduce using rule 26 (constant -> TRUE .)
    PLUS_EQUALS     reduce using rule 26 (constant -> TRUE .)
    MINUS_EQUALS    reduce using rule 26 (constant -> TRUE .)
    LEFT_SHIFT_EQUALS reduce using rule 26 (constant -> TRUE .)
    RIGHT_SHIFT_EQUALS reduce using rule 26 (constant -> TRUE .)
    AND_EQUALS      reduce using rule 26 (constant -> TRUE .)
    OR_EQUALS       reduce using rule 26 (constant -> TRUE .)
    XOR_EQUALS      reduce using rule 26 (constant -> TRUE .)
    STAR            reduce using rule 26 (constant -> TRUE .)
    DIVIDE          reduce using rule 26 (constant -> TRUE .)
    MODULUS         reduce using rule 26 (constant -> TRUE .)
    PLUS            reduce using rule 26 (constant -> TRUE .)
    MINUS           reduce using rule 26 (constant -> TRUE .)
    LEFT_SHIFT      reduce using rule 26 (constant -> TRUE .)
    RIGHT_SHIFT     reduce using rule 26 (constant -> TRUE .)
    LESS_THAN       reduce using rule 26 (constant -> TRUE .)
    GREATER_THAN    reduce using rule 26 (constant -> TRUE .)
    LESS_THAN_EQUALS reduce using rule 26 (constant -> TRUE .)
    GREATER_THAN_EQUALS reduce using rule 26 (constant -> TRUE .)
    EQUALS_EQUALS   reduce using rule 26 (constant -> TRUE .)
    NOT_EQUALS      reduce using rule 26 (constant -> TRUE .)
    AND             reduce using rule 26 (constant -> TRUE .)
    XOR             reduce using rule 26 (constant -> TRUE .)
    OR              reduce using rule 26 (constant -> TRUE .)
    AND_AND         reduce using rule 26 (constant -> TRUE .)
    QUESTION_MARK   reduce using rule 26 (constant -> TRUE .)
    OR_OR           reduce using rule 26 (constant -> TRUE .)
    SEMICOLON       reduce using rule 26 (constant -> TRUE .)
    COMMA           reduce using rule 26 (constant -> TRUE .)
    RIGHT_SQUARE_BRACKET reduce using rule 26 (constant -> TRUE .)
    RIGHT_PARENTHESIS reduce using rule 26 (constant -> TRUE .)
    RIGHT_CURLY_BRACKET reduce using rule 26 (constant -> TRUE .)
    COLON           reduce using rule 26 (constant -> TRUE .)


state 105

    (27) constant -> FALSE .

    LEFT_SQUARE_BRACKET reduce using rule 27 (constant -> FALSE .)
    LEFT_PARENTHESIS reduce using rule 27 (constant -> FALSE .)
    DOT             reduce using rule 27 (constant -> FALSE .)
    ARROW           reduce using rule 27 (constant -> FALSE .)
    PLUS_PLUS       reduce using rule 27 (constant -> FALSE .)
    MINUS_MINUS     reduce using rule 27 (constant -> FALSE .)
    EQUALS          reduce using rule 27 (constant -> FALSE .)
    DIVIDE_EQUALS   reduce using rule 27 (constant -> FALSE .)
    MULTIPLY_EQUALS reduce using rule 27 (constant -> FALSE .)
    MODULUS_EQUALS  reduce using rule 27 (constant -> FALSE .)
    PLUS_EQUALS     reduce using rule 27 (constant -> FALSE .)
    MINUS_EQUALS    reduce using rule 27 (constant -> FALSE .)
    LEFT_SHIFT_EQUALS reduce using rule 27 (constant -> FALSE .)
    RIGHT_SHIFT_EQUALS reduce using rule 27 (constant -> FALSE .)
    AND_EQUALS      reduce using rule 27 (constant -> FALSE .)
    OR_EQUALS       reduce using rule 27 (constant -> FALSE .)
    XOR_EQUALS      reduce using rule 27 (constant -> FALSE .)
    STAR            reduce using rule 27 (constant -> FALSE .)
    DIVIDE          reduce using rule 27 (constant -> FALSE .)
    MODULUS         reduce using rule 27 (constant -> FALSE .)
    PLUS            reduce using rule 27 (constant -> FALSE .)
    MINUS           reduce using rule 27 (constant -> FALSE .)
    LEFT_SHIFT      reduce using rule 27 (constant -> FALSE .)
    RIGHT_SHIFT     reduce using rule 27 (constant -> FALSE .)
    LESS_THAN       reduce using rule 27 (constant -> FALSE .)
    GREATER_THAN    reduce using rule 27 (constant -> FALSE .)
    LESS_THAN_EQUALS reduce using rule 27 (constant -> FALSE .)
    GREATER_THAN_EQUALS reduce using rule 27 (constant -> FALSE .)
    EQUALS_EQUALS   reduce using rule 27 (constant -> FALSE .)
    NOT_EQUALS      reduce using rule 27 (constant -> FALSE .)
    AND             reduce using rule 27 (constant -> FALSE .)
    XOR             reduce using rule 27 (constant -> FALSE .)
    OR              reduce using rule 27 (constant -> FALSE .)
    AND_AND         reduce using rule 27 (constant -> FALSE .)
    QUESTION_MARK   reduce using rule 27 (constant -> FALSE .)
    OR_OR           reduce using rule 27 (constant -> FALSE .)
    SEMICOLON       reduce using rule 27 (constant -> FALSE .)
    COMMA           reduce using rule 27 (constant -> FALSE .)
    RIGHT_SQUARE_BRACKET reduce using rule 27 (constant -> FALSE .)
    RIGHT_PARENTHESIS reduce using rule 27 (constant -> FALSE .)
    RIGHT_CURLY_BRACKET reduce using rule 27 (constant -> FALSE .)
    COLON           reduce using rule 27 (constant -> FALSE .)


state 106

    (28) constant -> NULL .

    LEFT_SQUARE_BRACKET reduce using rule 28 (constant -> NULL .)
    LEFT_PARENTHESIS reduce using rule 28 (constant -> NULL .)
    DOT             reduce using rule 28 (constant -> NULL .)
    ARROW           reduce using rule 28 (constant -> NULL .)
    PLUS_PLUS       reduce using rule 28 (constant -> NULL .)
    MINUS_MINUS     reduce using rule 28 (constant -> NULL .)
    EQUALS          reduce using rule 28 (constant -> NULL .)
    DIVIDE_EQUALS   reduce using rule 28 (constant -> NULL .)
    MULTIPLY_EQUALS reduce using rule 28 (constant -> NULL .)
    MODULUS_EQUALS  reduce using rule 28 (constant -> NULL .)
    PLUS_EQUALS     reduce using rule 28 (constant -> NULL .)
    MINUS_EQUALS    reduce using rule 28 (constant -> NULL .)
    LEFT_SHIFT_EQUALS reduce using rule 28 (constant -> NULL .)
    RIGHT_SHIFT_EQUALS reduce using rule 28 (constant -> NULL .)
    AND_EQUALS      reduce using rule 28 (constant -> NULL .)
    OR_EQUALS       reduce using rule 28 (constant -> NULL .)
    XOR_EQUALS      reduce using rule 28 (constant -> NULL .)
    STAR            reduce using rule 28 (constant -> NULL .)
    DIVIDE          reduce using rule 28 (constant -> NULL .)
    MODULUS         reduce using rule 28 (constant -> NULL .)
    PLUS            reduce using rule 28 (constant -> NULL .)
    MINUS           reduce using rule 28 (constant -> NULL .)
    LEFT_SHIFT      reduce using rule 28 (constant -> NULL .)
    RIGHT_SHIFT     reduce using rule 28 (constant -> NULL .)
    LESS_THAN       reduce using rule 28 (constant -> NULL .)
    GREATER_THAN    reduce using rule 28 (constant -> NULL .)
    LESS_THAN_EQUALS reduce using rule 28 (constant -> NULL .)
    GREATER_THAN_EQUALS reduce using rule 28 (constant -> NULL .)
    EQUALS_EQUALS   reduce using rule 28 (constant -> NULL .)
    NOT_EQUALS      reduce using rule 28 (constant -> NULL .)
    AND             reduce using rule 28 (constant -> NULL .)
    XOR             reduce using rule 28 (constant -> NULL .)
    OR              reduce using rule 28 (constant -> NULL .)
    AND_AND         reduce using rule 28 (constant -> NULL .)
    QUESTION_MARK   reduce using rule 28 (constant -> NULL .)
    OR_OR           reduce using rule 28 (constant -> NULL .)
    SEMICOLON       reduce using rule 28 (constant -> NULL .)
    COMMA           reduce using rule 28 (constant -> NULL .)
    RIGHT_SQUARE_BRACKET reduce using rule 28 (constant -> NULL .)
    RIGHT_PARENTHESIS reduce using rule 28 (constant -> NULL .)
    RIGHT_CURLY_BRACKET reduce using rule 28 (constant -> NULL .)
    COLON           reduce using rule 28 (constant -> NULL .)


state 107

    (29) string -> STRING_LITERAL .

    LEFT_SQUARE_BRACKET reduce using rule 29 (string -> STRING_LITERAL .)
    LEFT_PARENTHESIS reduce using rule 29 (string -> STRING_LITERAL .)
    DOT             reduce using rule 29 (string -> STRING_LITERAL .)
    ARROW           reduce using rule 29 (string -> STRING_LITERAL .)
    PLUS_PLUS       reduce using rule 29 (string -> STRING_LITERAL .)
    MINUS_MINUS     reduce using rule 29 (string -> STRING_LITERAL .)
    EQUALS          reduce using rule 29 (string -> STRING_LITERAL .)
    DIVIDE_EQUALS   reduce using rule 29 (string -> STRING_LITERAL .)
    MULTIPLY_EQUALS reduce using rule 29 (string -> STRING_LITERAL .)
    MODULUS_EQUALS  reduce using rule 29 (string -> STRING_LITERAL .)
    PLUS_EQUALS     reduce using rule 29 (string -> STRING_LITERAL .)
    MINUS_EQUALS    reduce using rule 29 (string -> STRING_LITERAL .)
    LEFT_SHIFT_EQUALS reduce using rule 29 (string -> STRING_LITERAL .)
    RIGHT_SHIFT_EQUALS reduce using rule 29 (string -> STRING_LITERAL .)
    AND_EQUALS      reduce using rule 29 (string -> STRING_LITERAL .)
    OR_EQUALS       reduce using rule 29 (string -> STRING_LITERAL .)
    XOR_EQUALS      reduce using rule 29 (string -> STRING_LITERAL .)
    STAR            reduce using rule 29 (string -> STRING_LITERAL .)
    DIVIDE          reduce using rule 29 (string -> STRING_LITERAL .)
    MODULUS         reduce using rule 29 (string -> STRING_LITERAL .)
    PLUS            reduce using rule 29 (string -> STRING_LITERAL .)
    MINUS           reduce using rule 29 (string -> STRING_LITERAL .)
    LEFT_SHIFT      reduce using rule 29 (string -> STRING_LITERAL .)
    RIGHT_SHIFT     reduce using rule 29 (string -> STRING_LITERAL .)
    LESS_THAN       reduce using rule 29 (string -> STRING_LITERAL .)
    GREATER_THAN    reduce using rule 29 (string -> STRING_LITERAL .)
    LESS_THAN_EQUALS reduce using rule 29 (string -> STRING_LITERAL .)
    GREATER_THAN_EQUALS reduce using rule 29 (string -> STRING_LITERAL .)
    EQUALS_EQUALS   reduce using rule 29 (string -> STRING_LITERAL .)
    NOT_EQUALS      reduce using rule 29 (string -> STRING_LITERAL .)
    AND             reduce using rule 29 (string -> STRING_LITERAL .)
    XOR             reduce using rule 29 (string -> STRING_LITERAL .)
    OR              reduce using rule 29 (string -> STRING_LITERAL .)
    AND_AND         reduce using rule 29 (string -> STRING_LITERAL .)
    QUESTION_MARK   reduce using rule 29 (string -> STRING_LITERAL .)
    OR_OR           reduce using rule 29 (string -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 29 (string -> STRING_LITERAL .)
    COMMA           reduce using rule 29 (string -> STRING_LITERAL .)
    RIGHT_SQUARE_BRACKET reduce using rule 29 (string -> STRING_LITERAL .)
    RIGHT_PARENTHESIS reduce using rule 29 (string -> STRING_LITERAL .)
    RIGHT_CURLY_BRACKET reduce using rule 29 (string -> STRING_LITERAL .)
    COLON           reduce using rule 29 (string -> STRING_LITERAL .)


state 108

    (2) predefined_functions -> INPUT .
    (17) input -> INPUT . LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

  ! shift/reduce conflict for LEFT_PARENTHESIS resolved as shift
    LEFT_SQUARE_BRACKET reduce using rule 2 (predefined_functions -> INPUT .)
    DOT             reduce using rule 2 (predefined_functions -> INPUT .)
    ARROW           reduce using rule 2 (predefined_functions -> INPUT .)
    PLUS_PLUS       reduce using rule 2 (predefined_functions -> INPUT .)
    MINUS_MINUS     reduce using rule 2 (predefined_functions -> INPUT .)
    EQUALS          reduce using rule 2 (predefined_functions -> INPUT .)
    DIVIDE_EQUALS   reduce using rule 2 (predefined_functions -> INPUT .)
    MULTIPLY_EQUALS reduce using rule 2 (predefined_functions -> INPUT .)
    MODULUS_EQUALS  reduce using rule 2 (predefined_functions -> INPUT .)
    PLUS_EQUALS     reduce using rule 2 (predefined_functions -> INPUT .)
    MINUS_EQUALS    reduce using rule 2 (predefined_functions -> INPUT .)
    LEFT_SHIFT_EQUALS reduce using rule 2 (predefined_functions -> INPUT .)
    RIGHT_SHIFT_EQUALS reduce using rule 2 (predefined_functions -> INPUT .)
    AND_EQUALS      reduce using rule 2 (predefined_functions -> INPUT .)
    OR_EQUALS       reduce using rule 2 (predefined_functions -> INPUT .)
    XOR_EQUALS      reduce using rule 2 (predefined_functions -> INPUT .)
    STAR            reduce using rule 2 (predefined_functions -> INPUT .)
    DIVIDE          reduce using rule 2 (predefined_functions -> INPUT .)
    MODULUS         reduce using rule 2 (predefined_functions -> INPUT .)
    PLUS            reduce using rule 2 (predefined_functions -> INPUT .)
    MINUS           reduce using rule 2 (predefined_functions -> INPUT .)
    LEFT_SHIFT      reduce using rule 2 (predefined_functions -> INPUT .)
    RIGHT_SHIFT     reduce using rule 2 (predefined_functions -> INPUT .)
    LESS_THAN       reduce using rule 2 (predefined_functions -> INPUT .)
    GREATER_THAN    reduce using rule 2 (predefined_functions -> INPUT .)
    LESS_THAN_EQUALS reduce using rule 2 (predefined_functions -> INPUT .)
    GREATER_THAN_EQUALS reduce using rule 2 (predefined_functions -> INPUT .)
    EQUALS_EQUALS   reduce using rule 2 (predefined_functions -> INPUT .)
    NOT_EQUALS      reduce using rule 2 (predefined_functions -> INPUT .)
    AND             reduce using rule 2 (predefined_functions -> INPUT .)
    XOR             reduce using rule 2 (predefined_functions -> INPUT .)
    OR              reduce using rule 2 (predefined_functions -> INPUT .)
    AND_AND         reduce using rule 2 (predefined_functions -> INPUT .)
    QUESTION_MARK   reduce using rule 2 (predefined_functions -> INPUT .)
    OR_OR           reduce using rule 2 (predefined_functions -> INPUT .)
    SEMICOLON       reduce using rule 2 (predefined_functions -> INPUT .)
    COMMA           reduce using rule 2 (predefined_functions -> INPUT .)
    RIGHT_SQUARE_BRACKET reduce using rule 2 (predefined_functions -> INPUT .)
    RIGHT_PARENTHESIS reduce using rule 2 (predefined_functions -> INPUT .)
    RIGHT_CURLY_BRACKET reduce using rule 2 (predefined_functions -> INPUT .)
    COLON           reduce using rule 2 (predefined_functions -> INPUT .)
    LEFT_PARENTHESIS shift and go to state 222

  ! LEFT_PARENTHESIS [ reduce using rule 2 (predefined_functions -> INPUT .) ]


state 109

    (3) predefined_functions -> output .

    LEFT_SQUARE_BRACKET reduce using rule 3 (predefined_functions -> output .)
    LEFT_PARENTHESIS reduce using rule 3 (predefined_functions -> output .)
    DOT             reduce using rule 3 (predefined_functions -> output .)
    ARROW           reduce using rule 3 (predefined_functions -> output .)
    PLUS_PLUS       reduce using rule 3 (predefined_functions -> output .)
    MINUS_MINUS     reduce using rule 3 (predefined_functions -> output .)
    EQUALS          reduce using rule 3 (predefined_functions -> output .)
    DIVIDE_EQUALS   reduce using rule 3 (predefined_functions -> output .)
    MULTIPLY_EQUALS reduce using rule 3 (predefined_functions -> output .)
    MODULUS_EQUALS  reduce using rule 3 (predefined_functions -> output .)
    PLUS_EQUALS     reduce using rule 3 (predefined_functions -> output .)
    MINUS_EQUALS    reduce using rule 3 (predefined_functions -> output .)
    LEFT_SHIFT_EQUALS reduce using rule 3 (predefined_functions -> output .)
    RIGHT_SHIFT_EQUALS reduce using rule 3 (predefined_functions -> output .)
    AND_EQUALS      reduce using rule 3 (predefined_functions -> output .)
    OR_EQUALS       reduce using rule 3 (predefined_functions -> output .)
    XOR_EQUALS      reduce using rule 3 (predefined_functions -> output .)
    STAR            reduce using rule 3 (predefined_functions -> output .)
    DIVIDE          reduce using rule 3 (predefined_functions -> output .)
    MODULUS         reduce using rule 3 (predefined_functions -> output .)
    PLUS            reduce using rule 3 (predefined_functions -> output .)
    MINUS           reduce using rule 3 (predefined_functions -> output .)
    LEFT_SHIFT      reduce using rule 3 (predefined_functions -> output .)
    RIGHT_SHIFT     reduce using rule 3 (predefined_functions -> output .)
    LESS_THAN       reduce using rule 3 (predefined_functions -> output .)
    GREATER_THAN    reduce using rule 3 (predefined_functions -> output .)
    LESS_THAN_EQUALS reduce using rule 3 (predefined_functions -> output .)
    GREATER_THAN_EQUALS reduce using rule 3 (predefined_functions -> output .)
    EQUALS_EQUALS   reduce using rule 3 (predefined_functions -> output .)
    NOT_EQUALS      reduce using rule 3 (predefined_functions -> output .)
    AND             reduce using rule 3 (predefined_functions -> output .)
    XOR             reduce using rule 3 (predefined_functions -> output .)
    OR              reduce using rule 3 (predefined_functions -> output .)
    AND_AND         reduce using rule 3 (predefined_functions -> output .)
    QUESTION_MARK   reduce using rule 3 (predefined_functions -> output .)
    OR_OR           reduce using rule 3 (predefined_functions -> output .)
    SEMICOLON       reduce using rule 3 (predefined_functions -> output .)
    COMMA           reduce using rule 3 (predefined_functions -> output .)
    RIGHT_SQUARE_BRACKET reduce using rule 3 (predefined_functions -> output .)
    RIGHT_PARENTHESIS reduce using rule 3 (predefined_functions -> output .)
    RIGHT_CURLY_BRACKET reduce using rule 3 (predefined_functions -> output .)
    COLON           reduce using rule 3 (predefined_functions -> output .)


state 110

    (4) predefined_functions -> input .

    LEFT_SQUARE_BRACKET reduce using rule 4 (predefined_functions -> input .)
    LEFT_PARENTHESIS reduce using rule 4 (predefined_functions -> input .)
    DOT             reduce using rule 4 (predefined_functions -> input .)
    ARROW           reduce using rule 4 (predefined_functions -> input .)
    PLUS_PLUS       reduce using rule 4 (predefined_functions -> input .)
    MINUS_MINUS     reduce using rule 4 (predefined_functions -> input .)
    EQUALS          reduce using rule 4 (predefined_functions -> input .)
    DIVIDE_EQUALS   reduce using rule 4 (predefined_functions -> input .)
    MULTIPLY_EQUALS reduce using rule 4 (predefined_functions -> input .)
    MODULUS_EQUALS  reduce using rule 4 (predefined_functions -> input .)
    PLUS_EQUALS     reduce using rule 4 (predefined_functions -> input .)
    MINUS_EQUALS    reduce using rule 4 (predefined_functions -> input .)
    LEFT_SHIFT_EQUALS reduce using rule 4 (predefined_functions -> input .)
    RIGHT_SHIFT_EQUALS reduce using rule 4 (predefined_functions -> input .)
    AND_EQUALS      reduce using rule 4 (predefined_functions -> input .)
    OR_EQUALS       reduce using rule 4 (predefined_functions -> input .)
    XOR_EQUALS      reduce using rule 4 (predefined_functions -> input .)
    STAR            reduce using rule 4 (predefined_functions -> input .)
    DIVIDE          reduce using rule 4 (predefined_functions -> input .)
    MODULUS         reduce using rule 4 (predefined_functions -> input .)
    PLUS            reduce using rule 4 (predefined_functions -> input .)
    MINUS           reduce using rule 4 (predefined_functions -> input .)
    LEFT_SHIFT      reduce using rule 4 (predefined_functions -> input .)
    RIGHT_SHIFT     reduce using rule 4 (predefined_functions -> input .)
    LESS_THAN       reduce using rule 4 (predefined_functions -> input .)
    GREATER_THAN    reduce using rule 4 (predefined_functions -> input .)
    LESS_THAN_EQUALS reduce using rule 4 (predefined_functions -> input .)
    GREATER_THAN_EQUALS reduce using rule 4 (predefined_functions -> input .)
    EQUALS_EQUALS   reduce using rule 4 (predefined_functions -> input .)
    NOT_EQUALS      reduce using rule 4 (predefined_functions -> input .)
    AND             reduce using rule 4 (predefined_functions -> input .)
    XOR             reduce using rule 4 (predefined_functions -> input .)
    OR              reduce using rule 4 (predefined_functions -> input .)
    AND_AND         reduce using rule 4 (predefined_functions -> input .)
    QUESTION_MARK   reduce using rule 4 (predefined_functions -> input .)
    OR_OR           reduce using rule 4 (predefined_functions -> input .)
    SEMICOLON       reduce using rule 4 (predefined_functions -> input .)
    COMMA           reduce using rule 4 (predefined_functions -> input .)
    RIGHT_SQUARE_BRACKET reduce using rule 4 (predefined_functions -> input .)
    RIGHT_PARENTHESIS reduce using rule 4 (predefined_functions -> input .)
    RIGHT_CURLY_BRACKET reduce using rule 4 (predefined_functions -> input .)
    COLON           reduce using rule 4 (predefined_functions -> input .)


state 111

    (5) predefined_functions -> SQUARE_ROOT .

    LEFT_SQUARE_BRACKET reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    LEFT_PARENTHESIS reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    DOT             reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    ARROW           reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    PLUS_PLUS       reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    MINUS_MINUS     reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    EQUALS          reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    DIVIDE_EQUALS   reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    MULTIPLY_EQUALS reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    MODULUS_EQUALS  reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    PLUS_EQUALS     reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    MINUS_EQUALS    reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    LEFT_SHIFT_EQUALS reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    RIGHT_SHIFT_EQUALS reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    AND_EQUALS      reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    OR_EQUALS       reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    XOR_EQUALS      reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    STAR            reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    DIVIDE          reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    MODULUS         reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    PLUS            reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    MINUS           reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    LEFT_SHIFT      reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    RIGHT_SHIFT     reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    LESS_THAN       reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    GREATER_THAN    reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    LESS_THAN_EQUALS reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    GREATER_THAN_EQUALS reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    EQUALS_EQUALS   reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    NOT_EQUALS      reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    AND             reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    XOR             reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    OR              reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    AND_AND         reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    QUESTION_MARK   reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    OR_OR           reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    SEMICOLON       reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    COMMA           reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    RIGHT_SQUARE_BRACKET reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    RIGHT_PARENTHESIS reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    RIGHT_CURLY_BRACKET reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)
    COLON           reduce using rule 5 (predefined_functions -> SQUARE_ROOT .)


state 112

    (6) predefined_functions -> SIN .

    LEFT_SQUARE_BRACKET reduce using rule 6 (predefined_functions -> SIN .)
    LEFT_PARENTHESIS reduce using rule 6 (predefined_functions -> SIN .)
    DOT             reduce using rule 6 (predefined_functions -> SIN .)
    ARROW           reduce using rule 6 (predefined_functions -> SIN .)
    PLUS_PLUS       reduce using rule 6 (predefined_functions -> SIN .)
    MINUS_MINUS     reduce using rule 6 (predefined_functions -> SIN .)
    EQUALS          reduce using rule 6 (predefined_functions -> SIN .)
    DIVIDE_EQUALS   reduce using rule 6 (predefined_functions -> SIN .)
    MULTIPLY_EQUALS reduce using rule 6 (predefined_functions -> SIN .)
    MODULUS_EQUALS  reduce using rule 6 (predefined_functions -> SIN .)
    PLUS_EQUALS     reduce using rule 6 (predefined_functions -> SIN .)
    MINUS_EQUALS    reduce using rule 6 (predefined_functions -> SIN .)
    LEFT_SHIFT_EQUALS reduce using rule 6 (predefined_functions -> SIN .)
    RIGHT_SHIFT_EQUALS reduce using rule 6 (predefined_functions -> SIN .)
    AND_EQUALS      reduce using rule 6 (predefined_functions -> SIN .)
    OR_EQUALS       reduce using rule 6 (predefined_functions -> SIN .)
    XOR_EQUALS      reduce using rule 6 (predefined_functions -> SIN .)
    STAR            reduce using rule 6 (predefined_functions -> SIN .)
    DIVIDE          reduce using rule 6 (predefined_functions -> SIN .)
    MODULUS         reduce using rule 6 (predefined_functions -> SIN .)
    PLUS            reduce using rule 6 (predefined_functions -> SIN .)
    MINUS           reduce using rule 6 (predefined_functions -> SIN .)
    LEFT_SHIFT      reduce using rule 6 (predefined_functions -> SIN .)
    RIGHT_SHIFT     reduce using rule 6 (predefined_functions -> SIN .)
    LESS_THAN       reduce using rule 6 (predefined_functions -> SIN .)
    GREATER_THAN    reduce using rule 6 (predefined_functions -> SIN .)
    LESS_THAN_EQUALS reduce using rule 6 (predefined_functions -> SIN .)
    GREATER_THAN_EQUALS reduce using rule 6 (predefined_functions -> SIN .)
    EQUALS_EQUALS   reduce using rule 6 (predefined_functions -> SIN .)
    NOT_EQUALS      reduce using rule 6 (predefined_functions -> SIN .)
    AND             reduce using rule 6 (predefined_functions -> SIN .)
    XOR             reduce using rule 6 (predefined_functions -> SIN .)
    OR              reduce using rule 6 (predefined_functions -> SIN .)
    AND_AND         reduce using rule 6 (predefined_functions -> SIN .)
    QUESTION_MARK   reduce using rule 6 (predefined_functions -> SIN .)
    OR_OR           reduce using rule 6 (predefined_functions -> SIN .)
    SEMICOLON       reduce using rule 6 (predefined_functions -> SIN .)
    COMMA           reduce using rule 6 (predefined_functions -> SIN .)
    RIGHT_SQUARE_BRACKET reduce using rule 6 (predefined_functions -> SIN .)
    RIGHT_PARENTHESIS reduce using rule 6 (predefined_functions -> SIN .)
    RIGHT_CURLY_BRACKET reduce using rule 6 (predefined_functions -> SIN .)
    COLON           reduce using rule 6 (predefined_functions -> SIN .)


state 113

    (7) predefined_functions -> COS .

    LEFT_SQUARE_BRACKET reduce using rule 7 (predefined_functions -> COS .)
    LEFT_PARENTHESIS reduce using rule 7 (predefined_functions -> COS .)
    DOT             reduce using rule 7 (predefined_functions -> COS .)
    ARROW           reduce using rule 7 (predefined_functions -> COS .)
    PLUS_PLUS       reduce using rule 7 (predefined_functions -> COS .)
    MINUS_MINUS     reduce using rule 7 (predefined_functions -> COS .)
    EQUALS          reduce using rule 7 (predefined_functions -> COS .)
    DIVIDE_EQUALS   reduce using rule 7 (predefined_functions -> COS .)
    MULTIPLY_EQUALS reduce using rule 7 (predefined_functions -> COS .)
    MODULUS_EQUALS  reduce using rule 7 (predefined_functions -> COS .)
    PLUS_EQUALS     reduce using rule 7 (predefined_functions -> COS .)
    MINUS_EQUALS    reduce using rule 7 (predefined_functions -> COS .)
    LEFT_SHIFT_EQUALS reduce using rule 7 (predefined_functions -> COS .)
    RIGHT_SHIFT_EQUALS reduce using rule 7 (predefined_functions -> COS .)
    AND_EQUALS      reduce using rule 7 (predefined_functions -> COS .)
    OR_EQUALS       reduce using rule 7 (predefined_functions -> COS .)
    XOR_EQUALS      reduce using rule 7 (predefined_functions -> COS .)
    STAR            reduce using rule 7 (predefined_functions -> COS .)
    DIVIDE          reduce using rule 7 (predefined_functions -> COS .)
    MODULUS         reduce using rule 7 (predefined_functions -> COS .)
    PLUS            reduce using rule 7 (predefined_functions -> COS .)
    MINUS           reduce using rule 7 (predefined_functions -> COS .)
    LEFT_SHIFT      reduce using rule 7 (predefined_functions -> COS .)
    RIGHT_SHIFT     reduce using rule 7 (predefined_functions -> COS .)
    LESS_THAN       reduce using rule 7 (predefined_functions -> COS .)
    GREATER_THAN    reduce using rule 7 (predefined_functions -> COS .)
    LESS_THAN_EQUALS reduce using rule 7 (predefined_functions -> COS .)
    GREATER_THAN_EQUALS reduce using rule 7 (predefined_functions -> COS .)
    EQUALS_EQUALS   reduce using rule 7 (predefined_functions -> COS .)
    NOT_EQUALS      reduce using rule 7 (predefined_functions -> COS .)
    AND             reduce using rule 7 (predefined_functions -> COS .)
    XOR             reduce using rule 7 (predefined_functions -> COS .)
    OR              reduce using rule 7 (predefined_functions -> COS .)
    AND_AND         reduce using rule 7 (predefined_functions -> COS .)
    QUESTION_MARK   reduce using rule 7 (predefined_functions -> COS .)
    OR_OR           reduce using rule 7 (predefined_functions -> COS .)
    SEMICOLON       reduce using rule 7 (predefined_functions -> COS .)
    COMMA           reduce using rule 7 (predefined_functions -> COS .)
    RIGHT_SQUARE_BRACKET reduce using rule 7 (predefined_functions -> COS .)
    RIGHT_PARENTHESIS reduce using rule 7 (predefined_functions -> COS .)
    RIGHT_CURLY_BRACKET reduce using rule 7 (predefined_functions -> COS .)
    COLON           reduce using rule 7 (predefined_functions -> COS .)


state 114

    (8) predefined_functions -> TAN .

    LEFT_SQUARE_BRACKET reduce using rule 8 (predefined_functions -> TAN .)
    LEFT_PARENTHESIS reduce using rule 8 (predefined_functions -> TAN .)
    DOT             reduce using rule 8 (predefined_functions -> TAN .)
    ARROW           reduce using rule 8 (predefined_functions -> TAN .)
    PLUS_PLUS       reduce using rule 8 (predefined_functions -> TAN .)
    MINUS_MINUS     reduce using rule 8 (predefined_functions -> TAN .)
    EQUALS          reduce using rule 8 (predefined_functions -> TAN .)
    DIVIDE_EQUALS   reduce using rule 8 (predefined_functions -> TAN .)
    MULTIPLY_EQUALS reduce using rule 8 (predefined_functions -> TAN .)
    MODULUS_EQUALS  reduce using rule 8 (predefined_functions -> TAN .)
    PLUS_EQUALS     reduce using rule 8 (predefined_functions -> TAN .)
    MINUS_EQUALS    reduce using rule 8 (predefined_functions -> TAN .)
    LEFT_SHIFT_EQUALS reduce using rule 8 (predefined_functions -> TAN .)
    RIGHT_SHIFT_EQUALS reduce using rule 8 (predefined_functions -> TAN .)
    AND_EQUALS      reduce using rule 8 (predefined_functions -> TAN .)
    OR_EQUALS       reduce using rule 8 (predefined_functions -> TAN .)
    XOR_EQUALS      reduce using rule 8 (predefined_functions -> TAN .)
    STAR            reduce using rule 8 (predefined_functions -> TAN .)
    DIVIDE          reduce using rule 8 (predefined_functions -> TAN .)
    MODULUS         reduce using rule 8 (predefined_functions -> TAN .)
    PLUS            reduce using rule 8 (predefined_functions -> TAN .)
    MINUS           reduce using rule 8 (predefined_functions -> TAN .)
    LEFT_SHIFT      reduce using rule 8 (predefined_functions -> TAN .)
    RIGHT_SHIFT     reduce using rule 8 (predefined_functions -> TAN .)
    LESS_THAN       reduce using rule 8 (predefined_functions -> TAN .)
    GREATER_THAN    reduce using rule 8 (predefined_functions -> TAN .)
    LESS_THAN_EQUALS reduce using rule 8 (predefined_functions -> TAN .)
    GREATER_THAN_EQUALS reduce using rule 8 (predefined_functions -> TAN .)
    EQUALS_EQUALS   reduce using rule 8 (predefined_functions -> TAN .)
    NOT_EQUALS      reduce using rule 8 (predefined_functions -> TAN .)
    AND             reduce using rule 8 (predefined_functions -> TAN .)
    XOR             reduce using rule 8 (predefined_functions -> TAN .)
    OR              reduce using rule 8 (predefined_functions -> TAN .)
    AND_AND         reduce using rule 8 (predefined_functions -> TAN .)
    QUESTION_MARK   reduce using rule 8 (predefined_functions -> TAN .)
    OR_OR           reduce using rule 8 (predefined_functions -> TAN .)
    SEMICOLON       reduce using rule 8 (predefined_functions -> TAN .)
    COMMA           reduce using rule 8 (predefined_functions -> TAN .)
    RIGHT_SQUARE_BRACKET reduce using rule 8 (predefined_functions -> TAN .)
    RIGHT_PARENTHESIS reduce using rule 8 (predefined_functions -> TAN .)
    RIGHT_CURLY_BRACKET reduce using rule 8 (predefined_functions -> TAN .)
    COLON           reduce using rule 8 (predefined_functions -> TAN .)


state 115

    (9) predefined_functions -> STRING_COPY .

    LEFT_SQUARE_BRACKET reduce using rule 9 (predefined_functions -> STRING_COPY .)
    LEFT_PARENTHESIS reduce using rule 9 (predefined_functions -> STRING_COPY .)
    DOT             reduce using rule 9 (predefined_functions -> STRING_COPY .)
    ARROW           reduce using rule 9 (predefined_functions -> STRING_COPY .)
    PLUS_PLUS       reduce using rule 9 (predefined_functions -> STRING_COPY .)
    MINUS_MINUS     reduce using rule 9 (predefined_functions -> STRING_COPY .)
    EQUALS          reduce using rule 9 (predefined_functions -> STRING_COPY .)
    DIVIDE_EQUALS   reduce using rule 9 (predefined_functions -> STRING_COPY .)
    MULTIPLY_EQUALS reduce using rule 9 (predefined_functions -> STRING_COPY .)
    MODULUS_EQUALS  reduce using rule 9 (predefined_functions -> STRING_COPY .)
    PLUS_EQUALS     reduce using rule 9 (predefined_functions -> STRING_COPY .)
    MINUS_EQUALS    reduce using rule 9 (predefined_functions -> STRING_COPY .)
    LEFT_SHIFT_EQUALS reduce using rule 9 (predefined_functions -> STRING_COPY .)
    RIGHT_SHIFT_EQUALS reduce using rule 9 (predefined_functions -> STRING_COPY .)
    AND_EQUALS      reduce using rule 9 (predefined_functions -> STRING_COPY .)
    OR_EQUALS       reduce using rule 9 (predefined_functions -> STRING_COPY .)
    XOR_EQUALS      reduce using rule 9 (predefined_functions -> STRING_COPY .)
    STAR            reduce using rule 9 (predefined_functions -> STRING_COPY .)
    DIVIDE          reduce using rule 9 (predefined_functions -> STRING_COPY .)
    MODULUS         reduce using rule 9 (predefined_functions -> STRING_COPY .)
    PLUS            reduce using rule 9 (predefined_functions -> STRING_COPY .)
    MINUS           reduce using rule 9 (predefined_functions -> STRING_COPY .)
    LEFT_SHIFT      reduce using rule 9 (predefined_functions -> STRING_COPY .)
    RIGHT_SHIFT     reduce using rule 9 (predefined_functions -> STRING_COPY .)
    LESS_THAN       reduce using rule 9 (predefined_functions -> STRING_COPY .)
    GREATER_THAN    reduce using rule 9 (predefined_functions -> STRING_COPY .)
    LESS_THAN_EQUALS reduce using rule 9 (predefined_functions -> STRING_COPY .)
    GREATER_THAN_EQUALS reduce using rule 9 (predefined_functions -> STRING_COPY .)
    EQUALS_EQUALS   reduce using rule 9 (predefined_functions -> STRING_COPY .)
    NOT_EQUALS      reduce using rule 9 (predefined_functions -> STRING_COPY .)
    AND             reduce using rule 9 (predefined_functions -> STRING_COPY .)
    XOR             reduce using rule 9 (predefined_functions -> STRING_COPY .)
    OR              reduce using rule 9 (predefined_functions -> STRING_COPY .)
    AND_AND         reduce using rule 9 (predefined_functions -> STRING_COPY .)
    QUESTION_MARK   reduce using rule 9 (predefined_functions -> STRING_COPY .)
    OR_OR           reduce using rule 9 (predefined_functions -> STRING_COPY .)
    SEMICOLON       reduce using rule 9 (predefined_functions -> STRING_COPY .)
    COMMA           reduce using rule 9 (predefined_functions -> STRING_COPY .)
    RIGHT_SQUARE_BRACKET reduce using rule 9 (predefined_functions -> STRING_COPY .)
    RIGHT_PARENTHESIS reduce using rule 9 (predefined_functions -> STRING_COPY .)
    RIGHT_CURLY_BRACKET reduce using rule 9 (predefined_functions -> STRING_COPY .)
    COLON           reduce using rule 9 (predefined_functions -> STRING_COPY .)


state 116

    (10) predefined_functions -> STRING_REVERSE .

    LEFT_SQUARE_BRACKET reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    LEFT_PARENTHESIS reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    DOT             reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    ARROW           reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    PLUS_PLUS       reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    MINUS_MINUS     reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    EQUALS          reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    DIVIDE_EQUALS   reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    MULTIPLY_EQUALS reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    MODULUS_EQUALS  reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    PLUS_EQUALS     reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    MINUS_EQUALS    reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    LEFT_SHIFT_EQUALS reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    RIGHT_SHIFT_EQUALS reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    AND_EQUALS      reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    OR_EQUALS       reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    XOR_EQUALS      reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    STAR            reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    DIVIDE          reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    MODULUS         reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    PLUS            reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    MINUS           reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    LEFT_SHIFT      reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    RIGHT_SHIFT     reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    LESS_THAN       reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    GREATER_THAN    reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    LESS_THAN_EQUALS reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    GREATER_THAN_EQUALS reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    EQUALS_EQUALS   reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    NOT_EQUALS      reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    AND             reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    XOR             reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    OR              reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    AND_AND         reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    QUESTION_MARK   reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    OR_OR           reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    SEMICOLON       reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    COMMA           reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    RIGHT_SQUARE_BRACKET reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    RIGHT_PARENTHESIS reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    RIGHT_CURLY_BRACKET reduce using rule 10 (predefined_functions -> STRING_REVERSE .)
    COLON           reduce using rule 10 (predefined_functions -> STRING_REVERSE .)


state 117

    (11) predefined_functions -> STRING_LENGTH .

    LEFT_SQUARE_BRACKET reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    LEFT_PARENTHESIS reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    DOT             reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    ARROW           reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    PLUS_PLUS       reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    MINUS_MINUS     reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    EQUALS          reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    DIVIDE_EQUALS   reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    MULTIPLY_EQUALS reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    MODULUS_EQUALS  reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    PLUS_EQUALS     reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    MINUS_EQUALS    reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    LEFT_SHIFT_EQUALS reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    RIGHT_SHIFT_EQUALS reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    AND_EQUALS      reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    OR_EQUALS       reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    XOR_EQUALS      reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    STAR            reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    DIVIDE          reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    MODULUS         reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    PLUS            reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    MINUS           reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    LEFT_SHIFT      reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    RIGHT_SHIFT     reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    LESS_THAN       reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    GREATER_THAN    reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    LESS_THAN_EQUALS reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    GREATER_THAN_EQUALS reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    EQUALS_EQUALS   reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    NOT_EQUALS      reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    AND             reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    XOR             reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    OR              reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    AND_AND         reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    QUESTION_MARK   reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    OR_OR           reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    SEMICOLON       reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    COMMA           reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    RIGHT_SQUARE_BRACKET reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    RIGHT_PARENTHESIS reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    RIGHT_CURLY_BRACKET reduce using rule 11 (predefined_functions -> STRING_LENGTH .)
    COLON           reduce using rule 11 (predefined_functions -> STRING_LENGTH .)


state 118

    (12) predefined_functions -> STRING_COMPARE .

    LEFT_SQUARE_BRACKET reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    LEFT_PARENTHESIS reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    DOT             reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    ARROW           reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    PLUS_PLUS       reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    MINUS_MINUS     reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    EQUALS          reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    DIVIDE_EQUALS   reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    MULTIPLY_EQUALS reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    MODULUS_EQUALS  reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    PLUS_EQUALS     reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    MINUS_EQUALS    reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    LEFT_SHIFT_EQUALS reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    RIGHT_SHIFT_EQUALS reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    AND_EQUALS      reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    OR_EQUALS       reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    XOR_EQUALS      reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    STAR            reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    DIVIDE          reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    MODULUS         reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    PLUS            reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    MINUS           reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    LEFT_SHIFT      reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    RIGHT_SHIFT     reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    LESS_THAN       reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    GREATER_THAN    reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    LESS_THAN_EQUALS reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    GREATER_THAN_EQUALS reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    EQUALS_EQUALS   reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    NOT_EQUALS      reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    AND             reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    XOR             reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    OR              reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    AND_AND         reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    QUESTION_MARK   reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    OR_OR           reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    SEMICOLON       reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    COMMA           reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    RIGHT_SQUARE_BRACKET reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    RIGHT_PARENTHESIS reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    RIGHT_CURLY_BRACKET reduce using rule 12 (predefined_functions -> STRING_COMPARE .)
    COLON           reduce using rule 12 (predefined_functions -> STRING_COMPARE .)


state 119

    (13) predefined_functions -> WRITE .

    LEFT_SQUARE_BRACKET reduce using rule 13 (predefined_functions -> WRITE .)
    LEFT_PARENTHESIS reduce using rule 13 (predefined_functions -> WRITE .)
    DOT             reduce using rule 13 (predefined_functions -> WRITE .)
    ARROW           reduce using rule 13 (predefined_functions -> WRITE .)
    PLUS_PLUS       reduce using rule 13 (predefined_functions -> WRITE .)
    MINUS_MINUS     reduce using rule 13 (predefined_functions -> WRITE .)
    EQUALS          reduce using rule 13 (predefined_functions -> WRITE .)
    DIVIDE_EQUALS   reduce using rule 13 (predefined_functions -> WRITE .)
    MULTIPLY_EQUALS reduce using rule 13 (predefined_functions -> WRITE .)
    MODULUS_EQUALS  reduce using rule 13 (predefined_functions -> WRITE .)
    PLUS_EQUALS     reduce using rule 13 (predefined_functions -> WRITE .)
    MINUS_EQUALS    reduce using rule 13 (predefined_functions -> WRITE .)
    LEFT_SHIFT_EQUALS reduce using rule 13 (predefined_functions -> WRITE .)
    RIGHT_SHIFT_EQUALS reduce using rule 13 (predefined_functions -> WRITE .)
    AND_EQUALS      reduce using rule 13 (predefined_functions -> WRITE .)
    OR_EQUALS       reduce using rule 13 (predefined_functions -> WRITE .)
    XOR_EQUALS      reduce using rule 13 (predefined_functions -> WRITE .)
    STAR            reduce using rule 13 (predefined_functions -> WRITE .)
    DIVIDE          reduce using rule 13 (predefined_functions -> WRITE .)
    MODULUS         reduce using rule 13 (predefined_functions -> WRITE .)
    PLUS            reduce using rule 13 (predefined_functions -> WRITE .)
    MINUS           reduce using rule 13 (predefined_functions -> WRITE .)
    LEFT_SHIFT      reduce using rule 13 (predefined_functions -> WRITE .)
    RIGHT_SHIFT     reduce using rule 13 (predefined_functions -> WRITE .)
    LESS_THAN       reduce using rule 13 (predefined_functions -> WRITE .)
    GREATER_THAN    reduce using rule 13 (predefined_functions -> WRITE .)
    LESS_THAN_EQUALS reduce using rule 13 (predefined_functions -> WRITE .)
    GREATER_THAN_EQUALS reduce using rule 13 (predefined_functions -> WRITE .)
    EQUALS_EQUALS   reduce using rule 13 (predefined_functions -> WRITE .)
    NOT_EQUALS      reduce using rule 13 (predefined_functions -> WRITE .)
    AND             reduce using rule 13 (predefined_functions -> WRITE .)
    XOR             reduce using rule 13 (predefined_functions -> WRITE .)
    OR              reduce using rule 13 (predefined_functions -> WRITE .)
    AND_AND         reduce using rule 13 (predefined_functions -> WRITE .)
    QUESTION_MARK   reduce using rule 13 (predefined_functions -> WRITE .)
    OR_OR           reduce using rule 13 (predefined_functions -> WRITE .)
    SEMICOLON       reduce using rule 13 (predefined_functions -> WRITE .)
    COMMA           reduce using rule 13 (predefined_functions -> WRITE .)
    RIGHT_SQUARE_BRACKET reduce using rule 13 (predefined_functions -> WRITE .)
    RIGHT_PARENTHESIS reduce using rule 13 (predefined_functions -> WRITE .)
    RIGHT_CURLY_BRACKET reduce using rule 13 (predefined_functions -> WRITE .)
    COLON           reduce using rule 13 (predefined_functions -> WRITE .)


state 120

    (14) predefined_functions -> READ .

    LEFT_SQUARE_BRACKET reduce using rule 14 (predefined_functions -> READ .)
    LEFT_PARENTHESIS reduce using rule 14 (predefined_functions -> READ .)
    DOT             reduce using rule 14 (predefined_functions -> READ .)
    ARROW           reduce using rule 14 (predefined_functions -> READ .)
    PLUS_PLUS       reduce using rule 14 (predefined_functions -> READ .)
    MINUS_MINUS     reduce using rule 14 (predefined_functions -> READ .)
    EQUALS          reduce using rule 14 (predefined_functions -> READ .)
    DIVIDE_EQUALS   reduce using rule 14 (predefined_functions -> READ .)
    MULTIPLY_EQUALS reduce using rule 14 (predefined_functions -> READ .)
    MODULUS_EQUALS  reduce using rule 14 (predefined_functions -> READ .)
    PLUS_EQUALS     reduce using rule 14 (predefined_functions -> READ .)
    MINUS_EQUALS    reduce using rule 14 (predefined_functions -> READ .)
    LEFT_SHIFT_EQUALS reduce using rule 14 (predefined_functions -> READ .)
    RIGHT_SHIFT_EQUALS reduce using rule 14 (predefined_functions -> READ .)
    AND_EQUALS      reduce using rule 14 (predefined_functions -> READ .)
    OR_EQUALS       reduce using rule 14 (predefined_functions -> READ .)
    XOR_EQUALS      reduce using rule 14 (predefined_functions -> READ .)
    STAR            reduce using rule 14 (predefined_functions -> READ .)
    DIVIDE          reduce using rule 14 (predefined_functions -> READ .)
    MODULUS         reduce using rule 14 (predefined_functions -> READ .)
    PLUS            reduce using rule 14 (predefined_functions -> READ .)
    MINUS           reduce using rule 14 (predefined_functions -> READ .)
    LEFT_SHIFT      reduce using rule 14 (predefined_functions -> READ .)
    RIGHT_SHIFT     reduce using rule 14 (predefined_functions -> READ .)
    LESS_THAN       reduce using rule 14 (predefined_functions -> READ .)
    GREATER_THAN    reduce using rule 14 (predefined_functions -> READ .)
    LESS_THAN_EQUALS reduce using rule 14 (predefined_functions -> READ .)
    GREATER_THAN_EQUALS reduce using rule 14 (predefined_functions -> READ .)
    EQUALS_EQUALS   reduce using rule 14 (predefined_functions -> READ .)
    NOT_EQUALS      reduce using rule 14 (predefined_functions -> READ .)
    AND             reduce using rule 14 (predefined_functions -> READ .)
    XOR             reduce using rule 14 (predefined_functions -> READ .)
    OR              reduce using rule 14 (predefined_functions -> READ .)
    AND_AND         reduce using rule 14 (predefined_functions -> READ .)
    QUESTION_MARK   reduce using rule 14 (predefined_functions -> READ .)
    OR_OR           reduce using rule 14 (predefined_functions -> READ .)
    SEMICOLON       reduce using rule 14 (predefined_functions -> READ .)
    COMMA           reduce using rule 14 (predefined_functions -> READ .)
    RIGHT_SQUARE_BRACKET reduce using rule 14 (predefined_functions -> READ .)
    RIGHT_PARENTHESIS reduce using rule 14 (predefined_functions -> READ .)
    RIGHT_CURLY_BRACKET reduce using rule 14 (predefined_functions -> READ .)
    COLON           reduce using rule 14 (predefined_functions -> READ .)


state 121

    (15) predefined_functions -> OPEN .

    LEFT_SQUARE_BRACKET reduce using rule 15 (predefined_functions -> OPEN .)
    LEFT_PARENTHESIS reduce using rule 15 (predefined_functions -> OPEN .)
    DOT             reduce using rule 15 (predefined_functions -> OPEN .)
    ARROW           reduce using rule 15 (predefined_functions -> OPEN .)
    PLUS_PLUS       reduce using rule 15 (predefined_functions -> OPEN .)
    MINUS_MINUS     reduce using rule 15 (predefined_functions -> OPEN .)
    EQUALS          reduce using rule 15 (predefined_functions -> OPEN .)
    DIVIDE_EQUALS   reduce using rule 15 (predefined_functions -> OPEN .)
    MULTIPLY_EQUALS reduce using rule 15 (predefined_functions -> OPEN .)
    MODULUS_EQUALS  reduce using rule 15 (predefined_functions -> OPEN .)
    PLUS_EQUALS     reduce using rule 15 (predefined_functions -> OPEN .)
    MINUS_EQUALS    reduce using rule 15 (predefined_functions -> OPEN .)
    LEFT_SHIFT_EQUALS reduce using rule 15 (predefined_functions -> OPEN .)
    RIGHT_SHIFT_EQUALS reduce using rule 15 (predefined_functions -> OPEN .)
    AND_EQUALS      reduce using rule 15 (predefined_functions -> OPEN .)
    OR_EQUALS       reduce using rule 15 (predefined_functions -> OPEN .)
    XOR_EQUALS      reduce using rule 15 (predefined_functions -> OPEN .)
    STAR            reduce using rule 15 (predefined_functions -> OPEN .)
    DIVIDE          reduce using rule 15 (predefined_functions -> OPEN .)
    MODULUS         reduce using rule 15 (predefined_functions -> OPEN .)
    PLUS            reduce using rule 15 (predefined_functions -> OPEN .)
    MINUS           reduce using rule 15 (predefined_functions -> OPEN .)
    LEFT_SHIFT      reduce using rule 15 (predefined_functions -> OPEN .)
    RIGHT_SHIFT     reduce using rule 15 (predefined_functions -> OPEN .)
    LESS_THAN       reduce using rule 15 (predefined_functions -> OPEN .)
    GREATER_THAN    reduce using rule 15 (predefined_functions -> OPEN .)
    LESS_THAN_EQUALS reduce using rule 15 (predefined_functions -> OPEN .)
    GREATER_THAN_EQUALS reduce using rule 15 (predefined_functions -> OPEN .)
    EQUALS_EQUALS   reduce using rule 15 (predefined_functions -> OPEN .)
    NOT_EQUALS      reduce using rule 15 (predefined_functions -> OPEN .)
    AND             reduce using rule 15 (predefined_functions -> OPEN .)
    XOR             reduce using rule 15 (predefined_functions -> OPEN .)
    OR              reduce using rule 15 (predefined_functions -> OPEN .)
    AND_AND         reduce using rule 15 (predefined_functions -> OPEN .)
    QUESTION_MARK   reduce using rule 15 (predefined_functions -> OPEN .)
    OR_OR           reduce using rule 15 (predefined_functions -> OPEN .)
    SEMICOLON       reduce using rule 15 (predefined_functions -> OPEN .)
    COMMA           reduce using rule 15 (predefined_functions -> OPEN .)
    RIGHT_SQUARE_BRACKET reduce using rule 15 (predefined_functions -> OPEN .)
    RIGHT_PARENTHESIS reduce using rule 15 (predefined_functions -> OPEN .)
    RIGHT_CURLY_BRACKET reduce using rule 15 (predefined_functions -> OPEN .)
    COLON           reduce using rule 15 (predefined_functions -> OPEN .)


state 122

    (73) xor_expression -> and_expression .
    (72) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 73 (xor_expression -> and_expression .)
    OR              reduce using rule 73 (xor_expression -> and_expression .)
    AND_AND         reduce using rule 73 (xor_expression -> and_expression .)
    QUESTION_MARK   reduce using rule 73 (xor_expression -> and_expression .)
    OR_OR           reduce using rule 73 (xor_expression -> and_expression .)
    SEMICOLON       reduce using rule 73 (xor_expression -> and_expression .)
    COMMA           reduce using rule 73 (xor_expression -> and_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 73 (xor_expression -> and_expression .)
    RIGHT_PARENTHESIS reduce using rule 73 (xor_expression -> and_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 73 (xor_expression -> and_expression .)
    COLON           reduce using rule 73 (xor_expression -> and_expression .)
    AND             shift and go to state 223


state 123

    (16) output -> OUTPUT . LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 224


state 124

    (71) and_expression -> equality_expression .
    (69) equality_expression -> equality_expression . EQUALS_EQUALS relational_expression
    (70) equality_expression -> equality_expression . NOT_EQUALS relational_expression

    AND             reduce using rule 71 (and_expression -> equality_expression .)
    XOR             reduce using rule 71 (and_expression -> equality_expression .)
    OR              reduce using rule 71 (and_expression -> equality_expression .)
    AND_AND         reduce using rule 71 (and_expression -> equality_expression .)
    QUESTION_MARK   reduce using rule 71 (and_expression -> equality_expression .)
    OR_OR           reduce using rule 71 (and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 71 (and_expression -> equality_expression .)
    COMMA           reduce using rule 71 (and_expression -> equality_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 71 (and_expression -> equality_expression .)
    RIGHT_PARENTHESIS reduce using rule 71 (and_expression -> equality_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 71 (and_expression -> equality_expression .)
    COLON           reduce using rule 71 (and_expression -> equality_expression .)
    EQUALS_EQUALS   shift and go to state 225
    NOT_EQUALS      shift and go to state 226


state 125

    (68) equality_expression -> relational_expression .
    (64) relational_expression -> relational_expression . LESS_THAN shift_expression
    (65) relational_expression -> relational_expression . GREATER_THAN shift_expression
    (66) relational_expression -> relational_expression . LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> relational_expression . GREATER_THAN_EQUALS shift_expression

    EQUALS_EQUALS   reduce using rule 68 (equality_expression -> relational_expression .)
    NOT_EQUALS      reduce using rule 68 (equality_expression -> relational_expression .)
    AND             reduce using rule 68 (equality_expression -> relational_expression .)
    XOR             reduce using rule 68 (equality_expression -> relational_expression .)
    OR              reduce using rule 68 (equality_expression -> relational_expression .)
    AND_AND         reduce using rule 68 (equality_expression -> relational_expression .)
    QUESTION_MARK   reduce using rule 68 (equality_expression -> relational_expression .)
    OR_OR           reduce using rule 68 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 68 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 68 (equality_expression -> relational_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 68 (equality_expression -> relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 68 (equality_expression -> relational_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 68 (equality_expression -> relational_expression .)
    COLON           reduce using rule 68 (equality_expression -> relational_expression .)
    LESS_THAN       shift and go to state 227
    GREATER_THAN    shift and go to state 228
    LESS_THAN_EQUALS shift and go to state 229
    GREATER_THAN_EQUALS shift and go to state 230


state 126

    (63) relational_expression -> shift_expression .
    (61) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (62) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS_THAN       reduce using rule 63 (relational_expression -> shift_expression .)
    GREATER_THAN    reduce using rule 63 (relational_expression -> shift_expression .)
    LESS_THAN_EQUALS reduce using rule 63 (relational_expression -> shift_expression .)
    GREATER_THAN_EQUALS reduce using rule 63 (relational_expression -> shift_expression .)
    EQUALS_EQUALS   reduce using rule 63 (relational_expression -> shift_expression .)
    NOT_EQUALS      reduce using rule 63 (relational_expression -> shift_expression .)
    AND             reduce using rule 63 (relational_expression -> shift_expression .)
    XOR             reduce using rule 63 (relational_expression -> shift_expression .)
    OR              reduce using rule 63 (relational_expression -> shift_expression .)
    AND_AND         reduce using rule 63 (relational_expression -> shift_expression .)
    QUESTION_MARK   reduce using rule 63 (relational_expression -> shift_expression .)
    OR_OR           reduce using rule 63 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 63 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 63 (relational_expression -> shift_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 63 (relational_expression -> shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 63 (relational_expression -> shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 63 (relational_expression -> shift_expression .)
    COLON           reduce using rule 63 (relational_expression -> shift_expression .)
    LEFT_SHIFT      shift and go to state 231
    RIGHT_SHIFT     shift and go to state 232


state 127

    (60) shift_expression -> additive_expression .
    (58) additive_expression -> additive_expression . PLUS multiplicative_expression
    (59) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_SHIFT      reduce using rule 60 (shift_expression -> additive_expression .)
    RIGHT_SHIFT     reduce using rule 60 (shift_expression -> additive_expression .)
    LESS_THAN       reduce using rule 60 (shift_expression -> additive_expression .)
    GREATER_THAN    reduce using rule 60 (shift_expression -> additive_expression .)
    LESS_THAN_EQUALS reduce using rule 60 (shift_expression -> additive_expression .)
    GREATER_THAN_EQUALS reduce using rule 60 (shift_expression -> additive_expression .)
    EQUALS_EQUALS   reduce using rule 60 (shift_expression -> additive_expression .)
    NOT_EQUALS      reduce using rule 60 (shift_expression -> additive_expression .)
    AND             reduce using rule 60 (shift_expression -> additive_expression .)
    XOR             reduce using rule 60 (shift_expression -> additive_expression .)
    OR              reduce using rule 60 (shift_expression -> additive_expression .)
    AND_AND         reduce using rule 60 (shift_expression -> additive_expression .)
    QUESTION_MARK   reduce using rule 60 (shift_expression -> additive_expression .)
    OR_OR           reduce using rule 60 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 60 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 60 (shift_expression -> additive_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 60 (shift_expression -> additive_expression .)
    RIGHT_PARENTHESIS reduce using rule 60 (shift_expression -> additive_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 60 (shift_expression -> additive_expression .)
    COLON           reduce using rule 60 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 233
    MINUS           shift and go to state 234


state 128

    (57) additive_expression -> multiplicative_expression .
    (54) multiplicative_expression -> multiplicative_expression . STAR cast_expression
    (55) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (56) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    PLUS            reduce using rule 57 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 57 (additive_expression -> multiplicative_expression .)
    LEFT_SHIFT      reduce using rule 57 (additive_expression -> multiplicative_expression .)
    RIGHT_SHIFT     reduce using rule 57 (additive_expression -> multiplicative_expression .)
    LESS_THAN       reduce using rule 57 (additive_expression -> multiplicative_expression .)
    GREATER_THAN    reduce using rule 57 (additive_expression -> multiplicative_expression .)
    LESS_THAN_EQUALS reduce using rule 57 (additive_expression -> multiplicative_expression .)
    GREATER_THAN_EQUALS reduce using rule 57 (additive_expression -> multiplicative_expression .)
    EQUALS_EQUALS   reduce using rule 57 (additive_expression -> multiplicative_expression .)
    NOT_EQUALS      reduce using rule 57 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 57 (additive_expression -> multiplicative_expression .)
    XOR             reduce using rule 57 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 57 (additive_expression -> multiplicative_expression .)
    AND_AND         reduce using rule 57 (additive_expression -> multiplicative_expression .)
    QUESTION_MARK   reduce using rule 57 (additive_expression -> multiplicative_expression .)
    OR_OR           reduce using rule 57 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 57 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 57 (additive_expression -> multiplicative_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 57 (additive_expression -> multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 57 (additive_expression -> multiplicative_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 57 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 57 (additive_expression -> multiplicative_expression .)
    STAR            shift and go to state 235
    DIVIDE          shift and go to state 236
    MODULUS         shift and go to state 237


state 129

    (103) init_declarator -> declarator . EQUALS initializer
    (104) init_declarator -> declarator .

    EQUALS          shift and go to state 51
    SEMICOLON       reduce using rule 104 (init_declarator -> declarator .)
    COMMA           reduce using rule 104 (init_declarator -> declarator .)


state 130

    (152) class_head -> CLASS IDENTIFIER base_clause .

    LEFT_CURLY_BRACKET reduce using rule 152 (class_head -> CLASS IDENTIFIER base_clause .)


state 131

    (172) base_clause -> COLON base_specifier_list .
    (174) base_specifier_list -> base_specifier_list . COMMA base_specifier

    LEFT_CURLY_BRACKET reduce using rule 172 (base_clause -> COLON base_specifier_list .)
    COMMA           shift and go to state 238


state 132

    (173) base_specifier_list -> base_specifier .

    COMMA           reduce using rule 173 (base_specifier_list -> base_specifier .)
    LEFT_CURLY_BRACKET reduce using rule 173 (base_specifier_list -> base_specifier .)


state 133

    (175) base_specifier -> CLASS . IDENTIFIER

    IDENTIFIER      shift and go to state 239


state 134

    (177) base_specifier -> IDENTIFIER .

    COMMA           reduce using rule 177 (base_specifier -> IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 177 (base_specifier -> IDENTIFIER .)


state 135

    (176) base_specifier -> access_specifier . CLASS IDENTIFIER
    (178) base_specifier -> access_specifier . IDENTIFIER

    CLASS           shift and go to state 240
    IDENTIFIER      shift and go to state 241


state 136

    (179) access_specifier -> PRIVATE .

    CLASS           reduce using rule 179 (access_specifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 179 (access_specifier -> PRIVATE .)
    COLON           reduce using rule 179 (access_specifier -> PRIVATE .)


state 137

    (180) access_specifier -> PUBLIC .

    CLASS           reduce using rule 180 (access_specifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 180 (access_specifier -> PUBLIC .)
    COLON           reduce using rule 180 (access_specifier -> PUBLIC .)


state 138

    (125) direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET shift and go to state 242


state 139

    (126) direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    VOID            reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    CHAR            reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    INT             reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    FLOAT           reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    DOUBLE          reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    STRING          reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    BOOL            reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    LONG_LONG_INT   reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    UNSIGNED_INT    reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    CLASS           reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    STRUCT          reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    EQUALS          reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    COLON           reduce using rule 126 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)


state 140

    (51) cast_expression -> unary_expression .

    STAR            reduce using rule 51 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 51 (cast_expression -> unary_expression .)
    MODULUS         reduce using rule 51 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 51 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 51 (cast_expression -> unary_expression .)
    LEFT_SHIFT      reduce using rule 51 (cast_expression -> unary_expression .)
    RIGHT_SHIFT     reduce using rule 51 (cast_expression -> unary_expression .)
    LESS_THAN       reduce using rule 51 (cast_expression -> unary_expression .)
    GREATER_THAN    reduce using rule 51 (cast_expression -> unary_expression .)
    LESS_THAN_EQUALS reduce using rule 51 (cast_expression -> unary_expression .)
    GREATER_THAN_EQUALS reduce using rule 51 (cast_expression -> unary_expression .)
    EQUALS_EQUALS   reduce using rule 51 (cast_expression -> unary_expression .)
    NOT_EQUALS      reduce using rule 51 (cast_expression -> unary_expression .)
    AND             reduce using rule 51 (cast_expression -> unary_expression .)
    XOR             reduce using rule 51 (cast_expression -> unary_expression .)
    OR              reduce using rule 51 (cast_expression -> unary_expression .)
    AND_AND         reduce using rule 51 (cast_expression -> unary_expression .)
    QUESTION_MARK   reduce using rule 51 (cast_expression -> unary_expression .)
    OR_OR           reduce using rule 51 (cast_expression -> unary_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 51 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 51 (cast_expression -> unary_expression .)
    DIVIDE_EQUALS   reduce using rule 51 (cast_expression -> unary_expression .)
    MULTIPLY_EQUALS reduce using rule 51 (cast_expression -> unary_expression .)
    MODULUS_EQUALS  reduce using rule 51 (cast_expression -> unary_expression .)
    PLUS_EQUALS     reduce using rule 51 (cast_expression -> unary_expression .)
    MINUS_EQUALS    reduce using rule 51 (cast_expression -> unary_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 51 (cast_expression -> unary_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 51 (cast_expression -> unary_expression .)
    AND_EQUALS      reduce using rule 51 (cast_expression -> unary_expression .)
    OR_EQUALS       reduce using rule 51 (cast_expression -> unary_expression .)
    XOR_EQUALS      reduce using rule 51 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 51 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 51 (cast_expression -> unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 51 (cast_expression -> unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 51 (cast_expression -> unary_expression .)
    COLON           reduce using rule 51 (cast_expression -> unary_expression .)


state 141

    (52) cast_expression -> LEFT_PARENTHESIS . type_specifier RIGHT_PARENTHESIS cast_expression
    (21) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 149
    STRUCT          shift and go to state 24
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    type_specifier                 shift and go to state 185
    cast_expression                shift and go to state 86
    expression                     shift and go to state 184
    struct_specifier               shift and go to state 18
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 142

    (18) primary_expression -> IDENTIFIER .

    LEFT_SQUARE_BRACKET reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 18 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 18 (primary_expression -> IDENTIFIER .)
    ARROW           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 18 (primary_expression -> IDENTIFIER .)
    STAR            reduce using rule 18 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MODULUS         reduce using rule 18 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 18 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LESS_THAN       reduce using rule 18 (primary_expression -> IDENTIFIER .)
    GREATER_THAN    reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 18 (primary_expression -> IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 18 (primary_expression -> IDENTIFIER .)
    EQUALS_EQUALS   reduce using rule 18 (primary_expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 18 (primary_expression -> IDENTIFIER .)
    AND             reduce using rule 18 (primary_expression -> IDENTIFIER .)
    XOR             reduce using rule 18 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 18 (primary_expression -> IDENTIFIER .)
    AND_AND         reduce using rule 18 (primary_expression -> IDENTIFIER .)
    QUESTION_MARK   reduce using rule 18 (primary_expression -> IDENTIFIER .)
    OR_OR           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    RIGHT_SQUARE_BRACKET reduce using rule 18 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 18 (primary_expression -> IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MODULUS_EQUALS  reduce using rule 18 (primary_expression -> IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 18 (primary_expression -> IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 18 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 18 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 18 (primary_expression -> IDENTIFIER .)
    AND_EQUALS      reduce using rule 18 (primary_expression -> IDENTIFIER .)
    OR_EQUALS       reduce using rule 18 (primary_expression -> IDENTIFIER .)
    XOR_EQUALS      reduce using rule 18 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 18 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 18 (primary_expression -> IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 18 (primary_expression -> IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 18 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 18 (primary_expression -> IDENTIFIER .)


state 143

    (127) direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list . RIGHT_PARENTHESIS
    (133) parameter_list -> parameter_list . COMMA parameter_declaration

    RIGHT_PARENTHESIS shift and go to state 243
    COMMA           shift and go to state 244


state 144

    (129) direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_CURLY_BRACKET reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    VOID            reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    CHAR            reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    INT             reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DOUBLE          reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    STRING          reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LONG_LONG_INT   reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    UNSIGNED_INT    reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    CLASS           reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    STRUCT          reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COLON           reduce using rule 129 (direct_declarator -> direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 145

    (128) direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list . RIGHT_PARENTHESIS
    (119) identifier_list -> identifier_list . COMMA IDENTIFIER

    RIGHT_PARENTHESIS shift and go to state 245
    COMMA           shift and go to state 246


state 146

    (132) parameter_list -> parameter_declaration .

    RIGHT_PARENTHESIS reduce using rule 132 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 132 (parameter_list -> parameter_declaration .)


state 147

    (118) identifier_list -> IDENTIFIER .

    RIGHT_PARENTHESIS reduce using rule 118 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 118 (identifier_list -> IDENTIFIER .)


state 148

    (134) parameter_declaration -> type_specifier . declarator
    (135) parameter_declaration -> type_specifier . abstract_declarator
    (136) parameter_declaration -> type_specifier .
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (181) abstract_declarator -> . pointer
    (182) abstract_declarator -> . direct_abstract_declarator
    (183) abstract_declarator -> . pointer direct_abstract_declarator
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (184) direct_abstract_declarator -> . LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS
    (185) direct_abstract_declarator -> . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (186) direct_abstract_declarator -> . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (187) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (188) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (189) direct_abstract_declarator -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (190) direct_abstract_declarator -> . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (191) direct_abstract_declarator -> . direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (192) direct_abstract_declarator -> . direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS reduce using rule 136 (parameter_declaration -> type_specifier .)
    COMMA           reduce using rule 136 (parameter_declaration -> type_specifier .)
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 251
    LEFT_SQUARE_BRACKET shift and go to state 252

    declarator                     shift and go to state 247
    abstract_declarator            shift and go to state 248
    pointer                        shift and go to state 249
    direct_declarator              shift and go to state 22
    direct_abstract_declarator     shift and go to state 250

state 149

    (115) type_specifier -> CLASS . IDENTIFIER

    IDENTIFIER      shift and go to state 253


state 150

    (154) class_specifier -> class_head LEFT_CURLY_BRACKET member_list . RIGHT_CURLY_BRACKET SEMICOLON
    (158) member_list -> member_list . access_list
    (168) access_list -> . access_specifier COLON member_access_list
    (169) access_list -> . access_specifier COLON
    (179) access_specifier -> . PRIVATE
    (180) access_specifier -> . PUBLIC

    RIGHT_CURLY_BRACKET shift and go to state 254
    PRIVATE         shift and go to state 136
    PUBLIC          shift and go to state 137

    access_list                    shift and go to state 255
    access_specifier               shift and go to state 156

state 151

    (155) class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 256


state 152

    (165) member_declaration -> SEMICOLON .

    SEMICOLON       reduce using rule 165 (member_declaration -> SEMICOLON .)
    VOID            reduce using rule 165 (member_declaration -> SEMICOLON .)
    CHAR            reduce using rule 165 (member_declaration -> SEMICOLON .)
    INT             reduce using rule 165 (member_declaration -> SEMICOLON .)
    FLOAT           reduce using rule 165 (member_declaration -> SEMICOLON .)
    DOUBLE          reduce using rule 165 (member_declaration -> SEMICOLON .)
    STRING          reduce using rule 165 (member_declaration -> SEMICOLON .)
    BOOL            reduce using rule 165 (member_declaration -> SEMICOLON .)
    LONG_LONG_INT   reduce using rule 165 (member_declaration -> SEMICOLON .)
    UNSIGNED_INT    reduce using rule 165 (member_declaration -> SEMICOLON .)
    CLASS           reduce using rule 165 (member_declaration -> SEMICOLON .)
    STRUCT          reduce using rule 165 (member_declaration -> SEMICOLON .)
    STAR            reduce using rule 165 (member_declaration -> SEMICOLON .)
    IDENTIFIER      reduce using rule 165 (member_declaration -> SEMICOLON .)
    MAIN            reduce using rule 165 (member_declaration -> SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 165 (member_declaration -> SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 165 (member_declaration -> SEMICOLON .)
    PRIVATE         reduce using rule 165 (member_declaration -> SEMICOLON .)
    PUBLIC          reduce using rule 165 (member_declaration -> SEMICOLON .)


state 153

    (156) member_list -> member_access_list .

    RIGHT_CURLY_BRACKET reduce using rule 156 (member_list -> member_access_list .)
    PRIVATE         reduce using rule 156 (member_list -> member_access_list .)
    PUBLIC          reduce using rule 156 (member_list -> member_access_list .)


state 154

    (157) member_list -> access_list .

    RIGHT_CURLY_BRACKET reduce using rule 157 (member_list -> access_list .)
    PRIVATE         reduce using rule 157 (member_list -> access_list .)
    PUBLIC          reduce using rule 157 (member_list -> access_list .)


state 155

    (170) member_access_list -> member_declaration . member_access_list
    (171) member_access_list -> member_declaration .
    (170) member_access_list -> . member_declaration member_access_list
    (171) member_access_list -> . member_declaration
    (162) member_declaration -> . type_specifier member_declarator_list SEMICOLON
    (163) member_declaration -> . member_declarator_list SEMICOLON
    (164) member_declaration -> . type_specifier SEMICOLON
    (165) member_declaration -> . SEMICOLON
    (166) member_declaration -> . function_definition
    (167) member_declaration -> . class_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (160) member_declarator_list -> . member_declarator
    (161) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (231) function_definition -> . type_specifier declarator declaration_list compound_statement
    (232) function_definition -> . type_specifier declarator compound_statement
    (233) function_definition -> . declarator declaration_list compound_statement
    (234) function_definition -> . declarator compound_statement
    (154) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (159) member_declarator -> . init_declarator
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (150) class_head -> . CLASS base_clause
    (151) class_head -> . CLASS
    (152) class_head -> . CLASS IDENTIFIER base_clause
    (153) class_head -> . CLASS IDENTIFIER
    (103) init_declarator -> . declarator EQUALS initializer
    (104) init_declarator -> . declarator
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    RIGHT_CURLY_BRACKET reduce using rule 171 (member_access_list -> member_declaration .)
    PRIVATE         reduce using rule 171 (member_access_list -> member_declaration .)
    PUBLIC          reduce using rule 171 (member_access_list -> member_declaration .)
    SEMICOLON       shift and go to state 152
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    member_declaration             shift and go to state 155
    member_access_list             shift and go to state 257
    type_specifier                 shift and go to state 157
    member_declarator_list         shift and go to state 158
    function_definition            shift and go to state 159
    class_specifier                shift and go to state 160
    struct_specifier               shift and go to state 18
    member_declarator              shift and go to state 161
    declarator                     shift and go to state 162
    class_head                     shift and go to state 23
    init_declarator                shift and go to state 163
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 156

    (168) access_list -> access_specifier . COLON member_access_list
    (169) access_list -> access_specifier . COLON

    COLON           shift and go to state 258


state 157

    (162) member_declaration -> type_specifier . member_declarator_list SEMICOLON
    (164) member_declaration -> type_specifier . SEMICOLON
    (231) function_definition -> type_specifier . declarator declaration_list compound_statement
    (232) function_definition -> type_specifier . declarator compound_statement
    (160) member_declarator_list -> . member_declarator
    (161) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (159) member_declarator -> . init_declarator
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (103) init_declarator -> . declarator EQUALS initializer
    (104) init_declarator -> . declarator

    SEMICOLON       shift and go to state 260
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    member_declarator_list         shift and go to state 259
    declarator                     shift and go to state 29
    member_declarator              shift and go to state 161
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22
    init_declarator                shift and go to state 163

state 158

    (163) member_declaration -> member_declarator_list . SEMICOLON
    (161) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 261
    COMMA           shift and go to state 262


state 159

    (166) member_declaration -> function_definition .

    SEMICOLON       reduce using rule 166 (member_declaration -> function_definition .)
    VOID            reduce using rule 166 (member_declaration -> function_definition .)
    CHAR            reduce using rule 166 (member_declaration -> function_definition .)
    INT             reduce using rule 166 (member_declaration -> function_definition .)
    FLOAT           reduce using rule 166 (member_declaration -> function_definition .)
    DOUBLE          reduce using rule 166 (member_declaration -> function_definition .)
    STRING          reduce using rule 166 (member_declaration -> function_definition .)
    BOOL            reduce using rule 166 (member_declaration -> function_definition .)
    LONG_LONG_INT   reduce using rule 166 (member_declaration -> function_definition .)
    UNSIGNED_INT    reduce using rule 166 (member_declaration -> function_definition .)
    CLASS           reduce using rule 166 (member_declaration -> function_definition .)
    STRUCT          reduce using rule 166 (member_declaration -> function_definition .)
    STAR            reduce using rule 166 (member_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 166 (member_declaration -> function_definition .)
    MAIN            reduce using rule 166 (member_declaration -> function_definition .)
    LEFT_PARENTHESIS reduce using rule 166 (member_declaration -> function_definition .)
    RIGHT_CURLY_BRACKET reduce using rule 166 (member_declaration -> function_definition .)
    PRIVATE         reduce using rule 166 (member_declaration -> function_definition .)
    PUBLIC          reduce using rule 166 (member_declaration -> function_definition .)


state 160

    (167) member_declaration -> class_specifier .

    SEMICOLON       reduce using rule 167 (member_declaration -> class_specifier .)
    VOID            reduce using rule 167 (member_declaration -> class_specifier .)
    CHAR            reduce using rule 167 (member_declaration -> class_specifier .)
    INT             reduce using rule 167 (member_declaration -> class_specifier .)
    FLOAT           reduce using rule 167 (member_declaration -> class_specifier .)
    DOUBLE          reduce using rule 167 (member_declaration -> class_specifier .)
    STRING          reduce using rule 167 (member_declaration -> class_specifier .)
    BOOL            reduce using rule 167 (member_declaration -> class_specifier .)
    LONG_LONG_INT   reduce using rule 167 (member_declaration -> class_specifier .)
    UNSIGNED_INT    reduce using rule 167 (member_declaration -> class_specifier .)
    CLASS           reduce using rule 167 (member_declaration -> class_specifier .)
    STRUCT          reduce using rule 167 (member_declaration -> class_specifier .)
    STAR            reduce using rule 167 (member_declaration -> class_specifier .)
    IDENTIFIER      reduce using rule 167 (member_declaration -> class_specifier .)
    MAIN            reduce using rule 167 (member_declaration -> class_specifier .)
    LEFT_PARENTHESIS reduce using rule 167 (member_declaration -> class_specifier .)
    RIGHT_CURLY_BRACKET reduce using rule 167 (member_declaration -> class_specifier .)
    PRIVATE         reduce using rule 167 (member_declaration -> class_specifier .)
    PUBLIC          reduce using rule 167 (member_declaration -> class_specifier .)


state 161

    (160) member_declarator_list -> member_declarator .

    SEMICOLON       reduce using rule 160 (member_declarator_list -> member_declarator .)
    COMMA           reduce using rule 160 (member_declarator_list -> member_declarator .)


state 162

    (233) function_definition -> declarator . declaration_list compound_statement
    (234) function_definition -> declarator . compound_statement
    (103) init_declarator -> declarator . EQUALS initializer
    (104) init_declarator -> declarator .
    (208) declaration_list -> . declaration_list declaration
    (209) declaration_list -> . declaration
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (98) declaration -> . type_specifier SEMICOLON
    (99) declaration -> . type_specifier init_declarators_list SEMICOLON
    (100) declaration -> . class_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (154) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (150) class_head -> . CLASS base_clause
    (151) class_head -> . CLASS
    (152) class_head -> . CLASS IDENTIFIER base_clause
    (153) class_head -> . CLASS IDENTIFIER

    EQUALS          shift and go to state 51
    SEMICOLON       reduce using rule 104 (init_declarator -> declarator .)
    COMMA           reduce using rule 104 (init_declarator -> declarator .)
    LEFT_CURLY_BRACKET shift and go to state 36
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24

    declaration_list               shift and go to state 33
    compound_statement             shift and go to state 34
    declaration                    shift and go to state 35
    type_specifier                 shift and go to state 37
    class_specifier                shift and go to state 8
    struct_specifier               shift and go to state 18
    class_head                     shift and go to state 23

state 163

    (159) member_declarator -> init_declarator .

    SEMICOLON       reduce using rule 159 (member_declarator -> init_declarator .)
    COMMA           reduce using rule 159 (member_declarator -> init_declarator .)


state 164

    (137) struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET . struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET . RIGHT_CURLY_BRACKET
    (148) struct_declaration_list -> . struct_declaration
    (149) struct_declaration_list -> . struct_declaration_list struct_declaration
    (147) struct_declaration -> . specifier_list struct_declarator_list SEMICOLON
    (120) specifier_list -> . type_specifier specifier_list
    (121) specifier_list -> . type_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_CURLY_BRACKET shift and go to state 264
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 149
    STRUCT          shift and go to state 24

    struct_declaration_list        shift and go to state 263
    struct_declaration             shift and go to state 167
    specifier_list                 shift and go to state 168
    type_specifier                 shift and go to state 169
    struct_specifier               shift and go to state 18

state 165

    (138) struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list . RIGHT_CURLY_BRACKET
    (149) struct_declaration_list -> struct_declaration_list . struct_declaration
    (147) struct_declaration -> . specifier_list struct_declarator_list SEMICOLON
    (120) specifier_list -> . type_specifier specifier_list
    (121) specifier_list -> . type_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_CURLY_BRACKET shift and go to state 265
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 149
    STRUCT          shift and go to state 24

    struct_declaration             shift and go to state 266
    specifier_list                 shift and go to state 168
    type_specifier                 shift and go to state 169
    struct_specifier               shift and go to state 18

state 166

    (140) struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .

    SEMICOLON       reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_SQUARE_BRACKET reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    VOID            reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 140 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)


state 167

    (148) struct_declaration_list -> struct_declaration .

    RIGHT_CURLY_BRACKET reduce using rule 148 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 148 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 148 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 148 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 148 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 148 (struct_declaration_list -> struct_declaration .)
    STRING          reduce using rule 148 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 148 (struct_declaration_list -> struct_declaration .)
    LONG_LONG_INT   reduce using rule 148 (struct_declaration_list -> struct_declaration .)
    UNSIGNED_INT    reduce using rule 148 (struct_declaration_list -> struct_declaration .)
    CLASS           reduce using rule 148 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 148 (struct_declaration_list -> struct_declaration .)


state 168

    (147) struct_declaration -> specifier_list . struct_declarator_list SEMICOLON
    (145) struct_declarator_list -> . struct_declarator
    (146) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (142) struct_declarator -> . declarator
    (143) struct_declarator -> . COLON conditional_expression
    (144) struct_declarator -> . declarator COLON conditional_expression
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    COLON           shift and go to state 270
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    struct_declarator_list         shift and go to state 267
    struct_declarator              shift and go to state 268
    declarator                     shift and go to state 269
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 169

    (120) specifier_list -> type_specifier . specifier_list
    (121) specifier_list -> type_specifier .
    (120) specifier_list -> . type_specifier specifier_list
    (121) specifier_list -> . type_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER

    COLON           reduce using rule 121 (specifier_list -> type_specifier .)
    STAR            reduce using rule 121 (specifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 121 (specifier_list -> type_specifier .)
    MAIN            reduce using rule 121 (specifier_list -> type_specifier .)
    LEFT_PARENTHESIS reduce using rule 121 (specifier_list -> type_specifier .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 149
    STRUCT          shift and go to state 24

    type_specifier                 shift and go to state 169
    specifier_list                 shift and go to state 271
    struct_specifier               shift and go to state 18

state 170

    (124) direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    LEFT_CURLY_BRACKET reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    VOID            reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    CHAR            reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    INT             reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    DOUBLE          reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    STRING          reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    LONG_LONG_INT   reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    UNSIGNED_INT    reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    CLASS           reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    STRUCT          reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)
    COLON           reduce using rule 124 (direct_declarator -> LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS .)


state 171

    (231) function_definition -> type_specifier declarator declaration_list compound_statement .

    VOID            reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    CHAR            reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    INT             reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    STRING          reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    BOOL            reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    LONG_LONG_INT   reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    UNSIGNED_INT    reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    CLASS           reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    STAR            reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    MAIN            reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    LEFT_PARENTHESIS reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    $end            reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    SEMICOLON       reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    RIGHT_CURLY_BRACKET reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    PRIVATE         reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)
    PUBLIC          reduce using rule 231 (function_definition -> type_specifier declarator declaration_list compound_statement .)


state 172

    (103) init_declarator -> declarator EQUALS initializer .

    SEMICOLON       reduce using rule 103 (init_declarator -> declarator EQUALS initializer .)
    COMMA           reduce using rule 103 (init_declarator -> declarator EQUALS initializer .)


state 173

    (193) initializer -> LEFT_CURLY_BRACKET . initializer_list RIGHT_CURLY_BRACKET
    (195) initializer_list -> . initializer_list COMMA initializer
    (196) initializer_list -> . initializer
    (193) initializer -> . LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET
    (194) initializer -> . assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    LEFT_CURLY_BRACKET shift and go to state 173
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    initializer_list               shift and go to state 272
    initializer                    shift and go to state 273
    assignment_expression          shift and go to state 174
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 174

    (194) initializer -> assignment_expression .

    SEMICOLON       reduce using rule 194 (initializer -> assignment_expression .)
    COMMA           reduce using rule 194 (initializer -> assignment_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 194 (initializer -> assignment_expression .)


state 175

    (102) init_declarators_list -> init_declarators_list COMMA init_declarator .

    SEMICOLON       reduce using rule 102 (init_declarators_list -> init_declarators_list COMMA init_declarator .)
    COMMA           reduce using rule 102 (init_declarators_list -> init_declarators_list COMMA init_declarator .)


state 176

    (204) compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list . RIGHT_CURLY_BRACKET
    (211) statement_list -> statement_list . statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) statement -> . labeled_statement
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (212) expression_statement -> . expression SEMICOLON
    (213) expression_statement -> . SEMICOLON
    (214) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (215) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (216) selection_statement -> . ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (217) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (219) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (220) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (221) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (222) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (223) jump_statement -> . BREAK SEMICOLON
    (224) jump_statement -> . CONTINUE SEMICOLON
    (225) jump_statement -> . RETURN SEMICOLON
    (226) jump_statement -> . RETURN expression SEMICOLON
    (203) labeled_statement -> . IDENTIFIER COLON statement
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_CURLY_BRACKET shift and go to state 274
    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    ASSERT          shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    GOTO            shift and go to state 74
    BREAK           shift and go to state 75
    CONTINUE        shift and go to state 76
    RETURN          shift and go to state 77
    IDENTIFIER      shift and go to state 67
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    statement                      shift and go to state 179
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 177

    (205) compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .

    VOID            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    PRIVATE         reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    PUBLIC          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    ASSERT          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    GOTO            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 205 (compound_statement -> LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET .)


state 178

    (206) compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .

    VOID            reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    PRIVATE         reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    PUBLIC          reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    ASSERT          reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    GOTO            reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 206 (compound_statement -> LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET .)


state 179

    (211) statement_list -> statement_list statement .

    RIGHT_CURLY_BRACKET reduce using rule 211 (statement_list -> statement_list statement .)
    LEFT_CURLY_BRACKET reduce using rule 211 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 211 (statement_list -> statement_list statement .)
    IF              reduce using rule 211 (statement_list -> statement_list statement .)
    ASSERT          reduce using rule 211 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 211 (statement_list -> statement_list statement .)
    FOR             reduce using rule 211 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 211 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 211 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 211 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 211 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 211 (statement_list -> statement_list statement .)
    PLUS_PLUS       reduce using rule 211 (statement_list -> statement_list statement .)
    MINUS_MINUS     reduce using rule 211 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 211 (statement_list -> statement_list statement .)
    AND             reduce using rule 211 (statement_list -> statement_list statement .)
    STAR            reduce using rule 211 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 211 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 211 (statement_list -> statement_list statement .)
    NOT             reduce using rule 211 (statement_list -> statement_list statement .)
    TILDE           reduce using rule 211 (statement_list -> statement_list statement .)
    LEFT_PARENTHESIS reduce using rule 211 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 211 (statement_list -> statement_list statement .)
    DECIMAL_NUMBER  reduce using rule 211 (statement_list -> statement_list statement .)
    CHARACTER       reduce using rule 211 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 211 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 211 (statement_list -> statement_list statement .)
    NULL            reduce using rule 211 (statement_list -> statement_list statement .)
    STRING_LITERAL  reduce using rule 211 (statement_list -> statement_list statement .)
    INPUT           reduce using rule 211 (statement_list -> statement_list statement .)
    SQUARE_ROOT     reduce using rule 211 (statement_list -> statement_list statement .)
    SIN             reduce using rule 211 (statement_list -> statement_list statement .)
    COS             reduce using rule 211 (statement_list -> statement_list statement .)
    TAN             reduce using rule 211 (statement_list -> statement_list statement .)
    STRING_COPY     reduce using rule 211 (statement_list -> statement_list statement .)
    STRING_REVERSE  reduce using rule 211 (statement_list -> statement_list statement .)
    STRING_LENGTH   reduce using rule 211 (statement_list -> statement_list statement .)
    STRING_COMPARE  reduce using rule 211 (statement_list -> statement_list statement .)
    WRITE           reduce using rule 211 (statement_list -> statement_list statement .)
    READ            reduce using rule 211 (statement_list -> statement_list statement .)
    OPEN            reduce using rule 211 (statement_list -> statement_list statement .)
    OUTPUT          reduce using rule 211 (statement_list -> statement_list statement .)


state 180

    (203) labeled_statement -> IDENTIFIER COLON . statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) statement -> . labeled_statement
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (212) expression_statement -> . expression SEMICOLON
    (213) expression_statement -> . SEMICOLON
    (214) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (215) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (216) selection_statement -> . ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (217) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (219) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (220) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (221) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (222) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (223) jump_statement -> . BREAK SEMICOLON
    (224) jump_statement -> . CONTINUE SEMICOLON
    (225) jump_statement -> . RETURN SEMICOLON
    (226) jump_statement -> . RETURN expression SEMICOLON
    (203) labeled_statement -> . IDENTIFIER COLON statement
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    ASSERT          shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    GOTO            shift and go to state 74
    BREAK           shift and go to state 75
    CONTINUE        shift and go to state 76
    RETURN          shift and go to state 77
    IDENTIFIER      shift and go to state 67
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    statement                      shift and go to state 275
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 181

    (212) expression_statement -> expression SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    ASSERT          reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    GOTO            reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    BREAK           reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    SIZEOF          reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    AND             reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    STAR            reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    PLUS            reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    NOT             reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    TILDE           reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    CHARACTER       reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    TRUE            reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    FALSE           reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    NULL            reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    INPUT           reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    SQUARE_ROOT     reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    SIN             reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    COS             reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    TAN             reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    STRING_COPY     reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    STRING_REVERSE  reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    STRING_LENGTH   reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    STRING_COMPARE  reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    WRITE           reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    READ            reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    OPEN            reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    OUTPUT          reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    ELSE            reduce using rule 212 (expression_statement -> expression SEMICOLON .)
    RIGHT_PARENTHESIS reduce using rule 212 (expression_statement -> expression SEMICOLON .)


state 182

    (97) expression -> expression COMMA . assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    assignment_expression          shift and go to state 276
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 183

    (214) selection_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement
    (215) selection_statement -> IF LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS statement ELSE statement
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression                     shift and go to state 277
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 184

    (21) primary_expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (97) expression -> expression . COMMA assignment_expression

    RIGHT_PARENTHESIS shift and go to state 278
    COMMA           shift and go to state 182


state 185

    (52) cast_expression -> LEFT_PARENTHESIS type_specifier . RIGHT_PARENTHESIS cast_expression

    RIGHT_PARENTHESIS shift and go to state 279


state 186

    (216) selection_statement -> ASSERT LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS SEMICOLON
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression                     shift and go to state 280
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 187

    (217) iteration_statement -> WHILE LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS compound_statement
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression                     shift and go to state 281
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 188

    (218) iteration_statement -> FOR LEFT_PARENTHESIS . expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (219) iteration_statement -> FOR LEFT_PARENTHESIS . type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (220) iteration_statement -> FOR LEFT_PARENTHESIS . expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (221) iteration_statement -> FOR LEFT_PARENTHESIS . type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (212) expression_statement -> . expression SEMICOLON
    (213) expression_statement -> . SEMICOLON
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    SEMICOLON       shift and go to state 60
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 149
    STRUCT          shift and go to state 24
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression_statement           shift and go to state 282
    expression                     shift and go to state 68
    type_specifier                 shift and go to state 283
    struct_specifier               shift and go to state 18
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 189

    (222) jump_statement -> GOTO IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 284


state 190

    (223) jump_statement -> BREAK SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    ASSERT          reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    GOTO            reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    PLUS_PLUS       reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    MINUS_MINUS     reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    SIZEOF          reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    AND             reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    STAR            reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    TILDE           reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    CHARACTER       reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    TRUE            reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    FALSE           reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    NULL            reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    STRING_LITERAL  reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    INPUT           reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    SQUARE_ROOT     reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    SIN             reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    COS             reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    TAN             reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    STRING_COPY     reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    STRING_REVERSE  reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    STRING_LENGTH   reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    STRING_COMPARE  reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    WRITE           reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    READ            reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    OPEN            reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    OUTPUT          reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 223 (jump_statement -> BREAK SEMICOLON .)


state 191

    (224) jump_statement -> CONTINUE SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    ASSERT          reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS_PLUS       reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS_MINUS     reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    SIZEOF          reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    AND             reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    STAR            reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    TILDE           reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    CHARACTER       reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    TRUE            reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    FALSE           reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    NULL            reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_LITERAL  reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    INPUT           reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    SQUARE_ROOT     reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    SIN             reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    COS             reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    TAN             reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_COPY     reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_REVERSE  reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_LENGTH   reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    STRING_COMPARE  reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    WRITE           reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    READ            reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    OPEN            reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    OUTPUT          reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 224 (jump_statement -> CONTINUE SEMICOLON .)


state 192

    (225) jump_statement -> RETURN SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    IF              reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    ASSERT          reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    FOR             reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    GOTO            reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    PLUS_PLUS       reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    MINUS_MINUS     reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    SIZEOF          reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    AND             reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    STAR            reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    NOT             reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    TILDE           reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    CHARACTER       reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    TRUE            reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    FALSE           reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    NULL            reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    STRING_LITERAL  reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    INPUT           reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    SQUARE_ROOT     reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    SIN             reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    COS             reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    TAN             reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    STRING_COPY     reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    STRING_REVERSE  reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    STRING_LENGTH   reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    STRING_COMPARE  reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    WRITE           reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    READ            reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    OPEN            reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    OUTPUT          reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 225 (jump_statement -> RETURN SEMICOLON .)


state 193

    (226) jump_statement -> RETURN expression . SEMICOLON
    (97) expression -> expression . COMMA assignment_expression

    SEMICOLON       shift and go to state 285
    COMMA           shift and go to state 182


state 194

    (84) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    unary_expression               shift and go to state 80
    assignment_expression          shift and go to state 286
    conditional_expression         shift and go to state 79
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 195

    (85) assignment_operator -> EQUALS .

    PLUS_PLUS       reduce using rule 85 (assignment_operator -> EQUALS .)
    MINUS_MINUS     reduce using rule 85 (assignment_operator -> EQUALS .)
    SIZEOF          reduce using rule 85 (assignment_operator -> EQUALS .)
    AND             reduce using rule 85 (assignment_operator -> EQUALS .)
    STAR            reduce using rule 85 (assignment_operator -> EQUALS .)
    PLUS            reduce using rule 85 (assignment_operator -> EQUALS .)
    MINUS           reduce using rule 85 (assignment_operator -> EQUALS .)
    NOT             reduce using rule 85 (assignment_operator -> EQUALS .)
    TILDE           reduce using rule 85 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 85 (assignment_operator -> EQUALS .)
    LEFT_PARENTHESIS reduce using rule 85 (assignment_operator -> EQUALS .)
    NUMBER          reduce using rule 85 (assignment_operator -> EQUALS .)
    DECIMAL_NUMBER  reduce using rule 85 (assignment_operator -> EQUALS .)
    CHARACTER       reduce using rule 85 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 85 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 85 (assignment_operator -> EQUALS .)
    NULL            reduce using rule 85 (assignment_operator -> EQUALS .)
    STRING_LITERAL  reduce using rule 85 (assignment_operator -> EQUALS .)
    INPUT           reduce using rule 85 (assignment_operator -> EQUALS .)
    SQUARE_ROOT     reduce using rule 85 (assignment_operator -> EQUALS .)
    SIN             reduce using rule 85 (assignment_operator -> EQUALS .)
    COS             reduce using rule 85 (assignment_operator -> EQUALS .)
    TAN             reduce using rule 85 (assignment_operator -> EQUALS .)
    STRING_COPY     reduce using rule 85 (assignment_operator -> EQUALS .)
    STRING_REVERSE  reduce using rule 85 (assignment_operator -> EQUALS .)
    STRING_LENGTH   reduce using rule 85 (assignment_operator -> EQUALS .)
    STRING_COMPARE  reduce using rule 85 (assignment_operator -> EQUALS .)
    WRITE           reduce using rule 85 (assignment_operator -> EQUALS .)
    READ            reduce using rule 85 (assignment_operator -> EQUALS .)
    OPEN            reduce using rule 85 (assignment_operator -> EQUALS .)
    OUTPUT          reduce using rule 85 (assignment_operator -> EQUALS .)


state 196

    (86) assignment_operator -> DIVIDE_EQUALS .

    PLUS_PLUS       reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    MINUS_MINUS     reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    SIZEOF          reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    AND             reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    STAR            reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    PLUS            reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    MINUS           reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    NOT             reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    TILDE           reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    IDENTIFIER      reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    NUMBER          reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    CHARACTER       reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    TRUE            reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    FALSE           reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    NULL            reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    STRING_LITERAL  reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    INPUT           reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    SQUARE_ROOT     reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    SIN             reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    COS             reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    TAN             reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    STRING_COPY     reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    STRING_REVERSE  reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    STRING_LENGTH   reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    STRING_COMPARE  reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    WRITE           reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    READ            reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    OPEN            reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)
    OUTPUT          reduce using rule 86 (assignment_operator -> DIVIDE_EQUALS .)


state 197

    (87) assignment_operator -> MULTIPLY_EQUALS .

    PLUS_PLUS       reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    MINUS_MINUS     reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    SIZEOF          reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    AND             reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    STAR            reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    PLUS            reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    MINUS           reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    NOT             reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    TILDE           reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    IDENTIFIER      reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    NUMBER          reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    CHARACTER       reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    TRUE            reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    FALSE           reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    NULL            reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    STRING_LITERAL  reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    INPUT           reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    SQUARE_ROOT     reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    SIN             reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    COS             reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    TAN             reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    STRING_COPY     reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    STRING_REVERSE  reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    STRING_LENGTH   reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    STRING_COMPARE  reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    WRITE           reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    READ            reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    OPEN            reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)
    OUTPUT          reduce using rule 87 (assignment_operator -> MULTIPLY_EQUALS .)


state 198

    (88) assignment_operator -> MODULUS_EQUALS .

    PLUS_PLUS       reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    MINUS_MINUS     reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    SIZEOF          reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    AND             reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    STAR            reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    PLUS            reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    MINUS           reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    NOT             reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    TILDE           reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    IDENTIFIER      reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    NUMBER          reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    CHARACTER       reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    TRUE            reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    FALSE           reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    NULL            reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    STRING_LITERAL  reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    INPUT           reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    SQUARE_ROOT     reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    SIN             reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    COS             reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    TAN             reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    STRING_COPY     reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    STRING_REVERSE  reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    STRING_LENGTH   reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    STRING_COMPARE  reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    WRITE           reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    READ            reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    OPEN            reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)
    OUTPUT          reduce using rule 88 (assignment_operator -> MODULUS_EQUALS .)


state 199

    (89) assignment_operator -> PLUS_EQUALS .

    PLUS_PLUS       reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    MINUS_MINUS     reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    SIZEOF          reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    AND             reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    STAR            reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    PLUS            reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    MINUS           reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    NOT             reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    TILDE           reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    NUMBER          reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    CHARACTER       reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    NULL            reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    STRING_LITERAL  reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    INPUT           reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    SQUARE_ROOT     reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    SIN             reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    COS             reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    TAN             reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    STRING_COPY     reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    STRING_REVERSE  reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    STRING_LENGTH   reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    STRING_COMPARE  reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    WRITE           reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    READ            reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    OPEN            reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)
    OUTPUT          reduce using rule 89 (assignment_operator -> PLUS_EQUALS .)


state 200

    (90) assignment_operator -> MINUS_EQUALS .

    PLUS_PLUS       reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    MINUS_MINUS     reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    SIZEOF          reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    AND             reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    STAR            reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    PLUS            reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    MINUS           reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    NOT             reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    TILDE           reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    IDENTIFIER      reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    NUMBER          reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    CHARACTER       reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    TRUE            reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    FALSE           reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    NULL            reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    STRING_LITERAL  reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    INPUT           reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    SQUARE_ROOT     reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    SIN             reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    COS             reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    TAN             reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    STRING_COPY     reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    STRING_REVERSE  reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    STRING_LENGTH   reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    STRING_COMPARE  reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    WRITE           reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    READ            reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    OPEN            reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)
    OUTPUT          reduce using rule 90 (assignment_operator -> MINUS_EQUALS .)


state 201

    (91) assignment_operator -> LEFT_SHIFT_EQUALS .

    PLUS_PLUS       reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    MINUS_MINUS     reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    SIZEOF          reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    AND             reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STAR            reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    PLUS            reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    MINUS           reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    NOT             reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    TILDE           reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    IDENTIFIER      reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    CHARACTER       reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    TRUE            reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    FALSE           reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    NULL            reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STRING_LITERAL  reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    INPUT           reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    SQUARE_ROOT     reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    SIN             reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    COS             reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    TAN             reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STRING_COPY     reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STRING_REVERSE  reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STRING_LENGTH   reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    STRING_COMPARE  reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    WRITE           reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    READ            reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    OPEN            reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)
    OUTPUT          reduce using rule 91 (assignment_operator -> LEFT_SHIFT_EQUALS .)


state 202

    (92) assignment_operator -> RIGHT_SHIFT_EQUALS .

    PLUS_PLUS       reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    MINUS_MINUS     reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    SIZEOF          reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    AND             reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STAR            reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    PLUS            reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    MINUS           reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    NOT             reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    TILDE           reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    IDENTIFIER      reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    NUMBER          reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    CHARACTER       reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    TRUE            reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    FALSE           reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    NULL            reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STRING_LITERAL  reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    INPUT           reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    SQUARE_ROOT     reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    SIN             reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    COS             reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    TAN             reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STRING_COPY     reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STRING_REVERSE  reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STRING_LENGTH   reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    STRING_COMPARE  reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    WRITE           reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    READ            reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    OPEN            reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)
    OUTPUT          reduce using rule 92 (assignment_operator -> RIGHT_SHIFT_EQUALS .)


state 203

    (93) assignment_operator -> AND_EQUALS .

    PLUS_PLUS       reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    MINUS_MINUS     reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    SIZEOF          reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    AND             reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    STAR            reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    PLUS            reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    MINUS           reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    NOT             reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    TILDE           reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    IDENTIFIER      reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    NUMBER          reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    CHARACTER       reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    TRUE            reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    FALSE           reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    NULL            reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    STRING_LITERAL  reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    INPUT           reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    SQUARE_ROOT     reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    SIN             reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    COS             reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    TAN             reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    STRING_COPY     reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    STRING_REVERSE  reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    STRING_LENGTH   reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    STRING_COMPARE  reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    WRITE           reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    READ            reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    OPEN            reduce using rule 93 (assignment_operator -> AND_EQUALS .)
    OUTPUT          reduce using rule 93 (assignment_operator -> AND_EQUALS .)


state 204

    (94) assignment_operator -> OR_EQUALS .

    PLUS_PLUS       reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    MINUS_MINUS     reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    SIZEOF          reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    AND             reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    STAR            reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    PLUS            reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    MINUS           reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    NOT             reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    TILDE           reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    IDENTIFIER      reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    NUMBER          reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    CHARACTER       reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    TRUE            reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    FALSE           reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    NULL            reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    STRING_LITERAL  reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    INPUT           reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    SQUARE_ROOT     reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    SIN             reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    COS             reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    TAN             reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    STRING_COPY     reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    STRING_REVERSE  reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    STRING_LENGTH   reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    STRING_COMPARE  reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    WRITE           reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    READ            reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    OPEN            reduce using rule 94 (assignment_operator -> OR_EQUALS .)
    OUTPUT          reduce using rule 94 (assignment_operator -> OR_EQUALS .)


state 205

    (95) assignment_operator -> XOR_EQUALS .

    PLUS_PLUS       reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    MINUS_MINUS     reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    SIZEOF          reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    AND             reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    STAR            reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    PLUS            reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    MINUS           reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    NOT             reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    TILDE           reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    IDENTIFIER      reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    LEFT_PARENTHESIS reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    NUMBER          reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    DECIMAL_NUMBER  reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    CHARACTER       reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    TRUE            reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    FALSE           reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    NULL            reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    STRING_LITERAL  reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    INPUT           reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    SQUARE_ROOT     reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    SIN             reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    COS             reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    TAN             reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    STRING_COPY     reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    STRING_REVERSE  reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    STRING_LENGTH   reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    STRING_COMPARE  reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    WRITE           reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    READ            reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    OPEN            reduce using rule 95 (assignment_operator -> XOR_EQUALS .)
    OUTPUT          reduce using rule 95 (assignment_operator -> XOR_EQUALS .)


state 206

    (82) conditional_expression -> logical_or_expression QUESTION_MARK . expression COLON conditional_expression
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    logical_or_expression          shift and go to state 81
    expression                     shift and go to state 287
    conditional_expression         shift and go to state 79
    assignment_expression          shift and go to state 78
    unary_expression               shift and go to state 80
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 207

    (80) logical_or_expression -> logical_or_expression OR_OR . logical_and_expression
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    logical_and_expression         shift and go to state 288
    or_expression                  shift and go to state 96
    xor_expression                 shift and go to state 100
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 208

    (31) postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET . expression RIGHT_SQUARE_BRACKET
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    postfix_expression             shift and go to state 82
    expression                     shift and go to state 289
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 209

    (32) postfix_expression -> postfix_expression LEFT_PARENTHESIS . RIGHT_PARENTHESIS
    (33) postfix_expression -> postfix_expression LEFT_PARENTHESIS . argument_expression_list RIGHT_PARENTHESIS
    (38) argument_expression_list -> . assignment_expression
    (39) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_PARENTHESIS shift and go to state 290
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    postfix_expression             shift and go to state 82
    argument_expression_list       shift and go to state 291
    assignment_expression          shift and go to state 292
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 210

    (34) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 293


state 211

    (35) postfix_expression -> postfix_expression ARROW . IDENTIFIER

    IDENTIFIER      shift and go to state 294


state 212

    (36) postfix_expression -> postfix_expression PLUS_PLUS .

    LEFT_SQUARE_BRACKET reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LEFT_PARENTHESIS reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DOT             reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ARROW           reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS_PLUS       reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQUALS          reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DIVIDE_EQUALS   reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MULTIPLY_EQUALS reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MODULUS_EQUALS  reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS_EQUALS     reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS_EQUALS    reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LEFT_SHIFT_EQUALS reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RIGHT_SHIFT_EQUALS reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    AND_EQUALS      reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    OR_EQUALS       reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    XOR_EQUALS      reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    STAR            reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DIVIDE          reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MODULUS         reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS            reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS           reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LEFT_SHIFT      reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RIGHT_SHIFT     reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LESS_THAN       reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    GREATER_THAN    reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LESS_THAN_EQUALS reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    GREATER_THAN_EQUALS reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQUALS_EQUALS   reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    NOT_EQUALS      reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    AND             reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    XOR             reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    OR              reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    AND_AND         reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    QUESTION_MARK   reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    OR_OR           reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    SEMICOLON       reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    COMMA           reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RIGHT_SQUARE_BRACKET reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RIGHT_PARENTHESIS reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RIGHT_CURLY_BRACKET reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)
    COLON           reduce using rule 36 (postfix_expression -> postfix_expression PLUS_PLUS .)


state 213

    (37) postfix_expression -> postfix_expression MINUS_MINUS .

    LEFT_SQUARE_BRACKET reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LEFT_PARENTHESIS reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DOT             reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ARROW           reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS_PLUS       reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQUALS          reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DIVIDE_EQUALS   reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MULTIPLY_EQUALS reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MODULUS_EQUALS  reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS_EQUALS     reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS_EQUALS    reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LEFT_SHIFT_EQUALS reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RIGHT_SHIFT_EQUALS reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    AND_EQUALS      reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    OR_EQUALS       reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    XOR_EQUALS      reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    STAR            reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DIVIDE          reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MODULUS         reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS            reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS           reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LEFT_SHIFT      reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RIGHT_SHIFT     reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LESS_THAN       reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    GREATER_THAN    reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LESS_THAN_EQUALS reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    GREATER_THAN_EQUALS reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQUALS_EQUALS   reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    NOT_EQUALS      reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    AND             reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    XOR             reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    OR              reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    AND_AND         reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    QUESTION_MARK   reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    OR_OR           reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    SEMICOLON       reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    COMMA           reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RIGHT_SQUARE_BRACKET reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RIGHT_PARENTHESIS reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RIGHT_CURLY_BRACKET reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)
    COLON           reduce using rule 37 (postfix_expression -> postfix_expression MINUS_MINUS .)


state 214

    (41) unary_expression -> PLUS_PLUS unary_expression .

    EQUALS          reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    DIVIDE_EQUALS   reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    MULTIPLY_EQUALS reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    MODULUS_EQUALS  reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    PLUS_EQUALS     reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    MINUS_EQUALS    reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    AND_EQUALS      reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    OR_EQUALS       reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    XOR_EQUALS      reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    STAR            reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    DIVIDE          reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    MODULUS         reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    PLUS            reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    MINUS           reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    LEFT_SHIFT      reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    RIGHT_SHIFT     reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    LESS_THAN       reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    GREATER_THAN    reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    LESS_THAN_EQUALS reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    GREATER_THAN_EQUALS reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    EQUALS_EQUALS   reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    NOT_EQUALS      reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    AND             reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    XOR             reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    OR              reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    AND_AND         reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    QUESTION_MARK   reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    OR_OR           reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    SEMICOLON       reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    COMMA           reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)
    COLON           reduce using rule 41 (unary_expression -> PLUS_PLUS unary_expression .)


state 215

    (21) primary_expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression                     shift and go to state 184
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 216

    (42) unary_expression -> MINUS_MINUS unary_expression .

    EQUALS          reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    DIVIDE_EQUALS   reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    MULTIPLY_EQUALS reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    MODULUS_EQUALS  reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    PLUS_EQUALS     reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    MINUS_EQUALS    reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    AND_EQUALS      reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    OR_EQUALS       reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    XOR_EQUALS      reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    STAR            reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    DIVIDE          reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    MODULUS         reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    PLUS            reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    MINUS           reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    LEFT_SHIFT      reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    RIGHT_SHIFT     reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    LESS_THAN       reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    GREATER_THAN    reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    LESS_THAN_EQUALS reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    GREATER_THAN_EQUALS reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    EQUALS_EQUALS   reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    NOT_EQUALS      reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    AND             reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    XOR             reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    OR              reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    AND_AND         reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    QUESTION_MARK   reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    OR_OR           reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    SEMICOLON       reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    COMMA           reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    RIGHT_PARENTHESIS reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)
    COLON           reduce using rule 42 (unary_expression -> MINUS_MINUS unary_expression .)


state 217

    (43) unary_expression -> unary_operator cast_expression .

    EQUALS          reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    DIVIDE_EQUALS   reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    MULTIPLY_EQUALS reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    MODULUS_EQUALS  reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    PLUS_EQUALS     reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    MINUS_EQUALS    reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    AND_EQUALS      reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    OR_EQUALS       reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    XOR_EQUALS      reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    STAR            reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    MODULUS         reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    LEFT_SHIFT      reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    RIGHT_SHIFT     reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    LESS_THAN       reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    GREATER_THAN    reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    LESS_THAN_EQUALS reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    GREATER_THAN_EQUALS reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    EQUALS_EQUALS   reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    NOT_EQUALS      reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    XOR             reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    AND_AND         reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    QUESTION_MARK   reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    OR_OR           reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 43 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 43 (unary_expression -> unary_operator cast_expression .)


state 218

    (44) unary_expression -> SIZEOF LEFT_PARENTHESIS . type_specifier RIGHT_PARENTHESIS
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 149
    STRUCT          shift and go to state 24

    type_specifier                 shift and go to state 295
    struct_specifier               shift and go to state 18

state 219

    (78) logical_and_expression -> logical_and_expression AND_AND . or_expression
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    or_expression                  shift and go to state 296
    xor_expression                 shift and go to state 100
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 220

    (76) or_expression -> or_expression OR . xor_expression
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    xor_expression                 shift and go to state 297
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 221

    (74) xor_expression -> xor_expression XOR . and_expression
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    and_expression                 shift and go to state 298
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 222

    (17) input -> INPUT LEFT_PARENTHESIS . primary_expression RIGHT_PARENTHESIS
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 215
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    primary_expression             shift and go to state 299
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 223

    (72) and_expression -> and_expression AND . equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    equality_expression            shift and go to state 300
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 224

    (16) output -> OUTPUT LEFT_PARENTHESIS . primary_expression RIGHT_PARENTHESIS
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 215
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    primary_expression             shift and go to state 301
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 225

    (69) equality_expression -> equality_expression EQUALS_EQUALS . relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    relational_expression          shift and go to state 302
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 226

    (70) equality_expression -> equality_expression NOT_EQUALS . relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    relational_expression          shift and go to state 303
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 227

    (64) relational_expression -> relational_expression LESS_THAN . shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    shift_expression               shift and go to state 304
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 228

    (65) relational_expression -> relational_expression GREATER_THAN . shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    shift_expression               shift and go to state 305
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 229

    (66) relational_expression -> relational_expression LESS_THAN_EQUALS . shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    shift_expression               shift and go to state 306
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 230

    (67) relational_expression -> relational_expression GREATER_THAN_EQUALS . shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    shift_expression               shift and go to state 307
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 231

    (61) shift_expression -> shift_expression LEFT_SHIFT . additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    additive_expression            shift and go to state 308
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 232

    (62) shift_expression -> shift_expression RIGHT_SHIFT . additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    additive_expression            shift and go to state 309
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 233

    (58) additive_expression -> additive_expression PLUS . multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    multiplicative_expression      shift and go to state 310
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 234

    (59) additive_expression -> additive_expression MINUS . multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    multiplicative_expression      shift and go to state 311
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 235

    (54) multiplicative_expression -> multiplicative_expression STAR . cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    cast_expression                shift and go to state 312
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 236

    (55) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    cast_expression                shift and go to state 313
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 237

    (56) multiplicative_expression -> multiplicative_expression MODULUS . cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    cast_expression                shift and go to state 314
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 238

    (174) base_specifier_list -> base_specifier_list COMMA . base_specifier
    (175) base_specifier -> . CLASS IDENTIFIER
    (176) base_specifier -> . access_specifier CLASS IDENTIFIER
    (177) base_specifier -> . IDENTIFIER
    (178) base_specifier -> . access_specifier IDENTIFIER
    (179) access_specifier -> . PRIVATE
    (180) access_specifier -> . PUBLIC

    CLASS           shift and go to state 133
    IDENTIFIER      shift and go to state 134
    PRIVATE         shift and go to state 136
    PUBLIC          shift and go to state 137

    base_specifier                 shift and go to state 315
    access_specifier               shift and go to state 135

state 239

    (175) base_specifier -> CLASS IDENTIFIER .

    COMMA           reduce using rule 175 (base_specifier -> CLASS IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 175 (base_specifier -> CLASS IDENTIFIER .)


state 240

    (176) base_specifier -> access_specifier CLASS . IDENTIFIER

    IDENTIFIER      shift and go to state 316


state 241

    (178) base_specifier -> access_specifier IDENTIFIER .

    COMMA           reduce using rule 178 (base_specifier -> access_specifier IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 178 (base_specifier -> access_specifier IDENTIFIER .)


state 242

    (125) direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    VOID            reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    CHAR            reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    INT             reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    FLOAT           reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    DOUBLE          reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    STRING          reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    BOOL            reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    LONG_LONG_INT   reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    UNSIGNED_INT    reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    CLASS           reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    STRUCT          reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    EQUALS          reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    COLON           reduce using rule 125 (direct_declarator -> direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)


state 243

    (127) direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    LEFT_CURLY_BRACKET reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    VOID            reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    CHAR            reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    INT             reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    DOUBLE          reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    STRING          reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    LONG_LONG_INT   reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    UNSIGNED_INT    reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    CLASS           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    STRUCT          reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 127 (direct_declarator -> direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)


state 244

    (133) parameter_list -> parameter_list COMMA . parameter_declaration
    (134) parameter_declaration -> . type_specifier declarator
    (135) parameter_declaration -> . type_specifier abstract_declarator
    (136) parameter_declaration -> . type_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 149
    STRUCT          shift and go to state 24

    parameter_declaration          shift and go to state 317
    type_specifier                 shift and go to state 148
    struct_specifier               shift and go to state 18

state 245

    (128) direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    LEFT_CURLY_BRACKET reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    VOID            reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    CHAR            reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    INT             reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    FLOAT           reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    DOUBLE          reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    STRING          reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    BOOL            reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    LONG_LONG_INT   reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    UNSIGNED_INT    reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    CLASS           reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    STRUCT          reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 128 (direct_declarator -> direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS .)


state 246

    (119) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 318


state 247

    (134) parameter_declaration -> type_specifier declarator .

    RIGHT_PARENTHESIS reduce using rule 134 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 134 (parameter_declaration -> type_specifier declarator .)


state 248

    (135) parameter_declaration -> type_specifier abstract_declarator .

    RIGHT_PARENTHESIS reduce using rule 135 (parameter_declaration -> type_specifier abstract_declarator .)
    COMMA           reduce using rule 135 (parameter_declaration -> type_specifier abstract_declarator .)


state 249

    (130) declarator -> pointer . direct_declarator
    (181) abstract_declarator -> pointer .
    (183) abstract_declarator -> pointer . direct_abstract_declarator
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (184) direct_abstract_declarator -> . LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS
    (185) direct_abstract_declarator -> . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (186) direct_abstract_declarator -> . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (187) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (188) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (189) direct_abstract_declarator -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (190) direct_abstract_declarator -> . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (191) direct_abstract_declarator -> . direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (192) direct_abstract_declarator -> . direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS reduce using rule 181 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 181 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 251
    LEFT_SQUARE_BRACKET shift and go to state 252

    direct_declarator              shift and go to state 41
    direct_abstract_declarator     shift and go to state 319

state 250

    (182) abstract_declarator -> direct_abstract_declarator .
    (187) direct_abstract_declarator -> direct_abstract_declarator . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (188) direct_abstract_declarator -> direct_abstract_declarator . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (191) direct_abstract_declarator -> direct_abstract_declarator . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (192) direct_abstract_declarator -> direct_abstract_declarator . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS reduce using rule 182 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 182 (abstract_declarator -> direct_abstract_declarator .)
    LEFT_SQUARE_BRACKET shift and go to state 320
    LEFT_PARENTHESIS shift and go to state 321


state 251

    (124) direct_declarator -> LEFT_PARENTHESIS . declarator RIGHT_PARENTHESIS
    (184) direct_abstract_declarator -> LEFT_PARENTHESIS . abstract_declarator RIGHT_PARENTHESIS
    (189) direct_abstract_declarator -> LEFT_PARENTHESIS . RIGHT_PARENTHESIS
    (190) direct_abstract_declarator -> LEFT_PARENTHESIS . parameter_list RIGHT_PARENTHESIS
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (181) abstract_declarator -> . pointer
    (182) abstract_declarator -> . direct_abstract_declarator
    (183) abstract_declarator -> . pointer direct_abstract_declarator
    (132) parameter_list -> . parameter_declaration
    (133) parameter_list -> . parameter_list COMMA parameter_declaration
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (184) direct_abstract_declarator -> . LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS
    (185) direct_abstract_declarator -> . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (186) direct_abstract_declarator -> . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (187) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (188) direct_abstract_declarator -> . direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (189) direct_abstract_declarator -> . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (190) direct_abstract_declarator -> . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (191) direct_abstract_declarator -> . direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (192) direct_abstract_declarator -> . direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (134) parameter_declaration -> . type_specifier declarator
    (135) parameter_declaration -> . type_specifier abstract_declarator
    (136) parameter_declaration -> . type_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_PARENTHESIS shift and go to state 322
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 251
    LEFT_SQUARE_BRACKET shift and go to state 252
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 149
    STRUCT          shift and go to state 24

    declarator                     shift and go to state 48
    abstract_declarator            shift and go to state 323
    parameter_list                 shift and go to state 324
    pointer                        shift and go to state 249
    direct_declarator              shift and go to state 22
    direct_abstract_declarator     shift and go to state 250
    parameter_declaration          shift and go to state 146
    type_specifier                 shift and go to state 148
    struct_specifier               shift and go to state 18

state 252

    (185) direct_abstract_declarator -> LEFT_SQUARE_BRACKET . RIGHT_SQUARE_BRACKET
    (186) direct_abstract_declarator -> LEFT_SQUARE_BRACKET . conditional_expression RIGHT_SQUARE_BRACKET
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    RIGHT_SQUARE_BRACKET shift and go to state 325
    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    conditional_expression         shift and go to state 326
    logical_or_expression          shift and go to state 81
    logical_and_expression         shift and go to state 88
    or_expression                  shift and go to state 96
    xor_expression                 shift and go to state 100
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 253

    (115) type_specifier -> CLASS IDENTIFIER .

    STAR            reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    IDENTIFIER      reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    MAIN            reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    LEFT_SQUARE_BRACKET reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    COMMA           reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    VOID            reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    CHAR            reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    INT             reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    FLOAT           reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    DOUBLE          reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    STRING          reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    BOOL            reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    LONG_LONG_INT   reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    UNSIGNED_INT    reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    CLASS           reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    STRUCT          reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    COLON           reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    SEMICOLON       reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    PLUS_PLUS       reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    MINUS_MINUS     reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    SIZEOF          reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    AND             reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    PLUS            reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    MINUS           reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    NOT             reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    TILDE           reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    NUMBER          reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    DECIMAL_NUMBER  reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    CHARACTER       reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    TRUE            reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    FALSE           reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    NULL            reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    STRING_LITERAL  reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    INPUT           reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    SQUARE_ROOT     reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    SIN             reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    COS             reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    TAN             reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    STRING_COPY     reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    STRING_REVERSE  reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    STRING_LENGTH   reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    STRING_COMPARE  reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    WRITE           reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    READ            reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    OPEN            reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)
    OUTPUT          reduce using rule 115 (type_specifier -> CLASS IDENTIFIER .)


state 254

    (154) class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 327


state 255

    (158) member_list -> member_list access_list .

    RIGHT_CURLY_BRACKET reduce using rule 158 (member_list -> member_list access_list .)
    PRIVATE         reduce using rule 158 (member_list -> member_list access_list .)
    PUBLIC          reduce using rule 158 (member_list -> member_list access_list .)


state 256

    (155) class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .

    VOID            reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    CHAR            reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    INT             reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    FLOAT           reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    DOUBLE          reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING          reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    BOOL            reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    LONG_LONG_INT   reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    UNSIGNED_INT    reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    CLASS           reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRUCT          reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STAR            reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    MAIN            reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    $end            reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    IF              reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    ASSERT          reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    WHILE           reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    FOR             reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    GOTO            reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    BREAK           reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    CONTINUE        reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    RETURN          reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    PLUS_PLUS       reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    MINUS_MINUS     reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    SIZEOF          reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    AND             reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    PLUS            reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    MINUS           reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    NOT             reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    TILDE           reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    NUMBER          reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    CHARACTER       reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    TRUE            reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    FALSE           reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    NULL            reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    INPUT           reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    SQUARE_ROOT     reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    SIN             reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    COS             reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    TAN             reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_COPY     reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_REVERSE  reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_LENGTH   reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_COMPARE  reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    WRITE           reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    READ            reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    OPEN            reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    OUTPUT          reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    PRIVATE         reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)
    PUBLIC          reduce using rule 155 (class_specifier -> class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON .)


state 257

    (170) member_access_list -> member_declaration member_access_list .

    RIGHT_CURLY_BRACKET reduce using rule 170 (member_access_list -> member_declaration member_access_list .)
    PRIVATE         reduce using rule 170 (member_access_list -> member_declaration member_access_list .)
    PUBLIC          reduce using rule 170 (member_access_list -> member_declaration member_access_list .)


state 258

    (168) access_list -> access_specifier COLON . member_access_list
    (169) access_list -> access_specifier COLON .
    (170) member_access_list -> . member_declaration member_access_list
    (171) member_access_list -> . member_declaration
    (162) member_declaration -> . type_specifier member_declarator_list SEMICOLON
    (163) member_declaration -> . member_declarator_list SEMICOLON
    (164) member_declaration -> . type_specifier SEMICOLON
    (165) member_declaration -> . SEMICOLON
    (166) member_declaration -> . function_definition
    (167) member_declaration -> . class_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (160) member_declarator_list -> . member_declarator
    (161) member_declarator_list -> . member_declarator_list COMMA member_declarator
    (231) function_definition -> . type_specifier declarator declaration_list compound_statement
    (232) function_definition -> . type_specifier declarator compound_statement
    (233) function_definition -> . declarator declaration_list compound_statement
    (234) function_definition -> . declarator compound_statement
    (154) class_specifier -> . class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON
    (155) class_specifier -> . class_head LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET SEMICOLON
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER
    (159) member_declarator -> . init_declarator
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (150) class_head -> . CLASS base_clause
    (151) class_head -> . CLASS
    (152) class_head -> . CLASS IDENTIFIER base_clause
    (153) class_head -> . CLASS IDENTIFIER
    (103) init_declarator -> . declarator EQUALS initializer
    (104) init_declarator -> . declarator
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    RIGHT_CURLY_BRACKET reduce using rule 169 (access_list -> access_specifier COLON .)
    PRIVATE         reduce using rule 169 (access_list -> access_specifier COLON .)
    PUBLIC          reduce using rule 169 (access_list -> access_specifier COLON .)
    SEMICOLON       shift and go to state 152
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 19
    STRUCT          shift and go to state 24
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    member_access_list             shift and go to state 328
    member_declaration             shift and go to state 155
    type_specifier                 shift and go to state 157
    member_declarator_list         shift and go to state 158
    function_definition            shift and go to state 159
    class_specifier                shift and go to state 160
    struct_specifier               shift and go to state 18
    member_declarator              shift and go to state 161
    declarator                     shift and go to state 162
    class_head                     shift and go to state 23
    init_declarator                shift and go to state 163
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 259

    (162) member_declaration -> type_specifier member_declarator_list . SEMICOLON
    (161) member_declarator_list -> member_declarator_list . COMMA member_declarator

    SEMICOLON       shift and go to state 329
    COMMA           shift and go to state 262


state 260

    (164) member_declaration -> type_specifier SEMICOLON .

    SEMICOLON       reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    VOID            reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    CHAR            reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    INT             reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    FLOAT           reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    DOUBLE          reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    STRING          reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    BOOL            reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    LONG_LONG_INT   reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    UNSIGNED_INT    reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    CLASS           reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    STRUCT          reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    STAR            reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    IDENTIFIER      reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    MAIN            reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    PRIVATE         reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)
    PUBLIC          reduce using rule 164 (member_declaration -> type_specifier SEMICOLON .)


state 261

    (163) member_declaration -> member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    VOID            reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    INT             reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    STRING          reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    BOOL            reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    LONG_LONG_INT   reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    UNSIGNED_INT    reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    STAR            reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    MAIN            reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 163 (member_declaration -> member_declarator_list SEMICOLON .)


state 262

    (161) member_declarator_list -> member_declarator_list COMMA . member_declarator
    (159) member_declarator -> . init_declarator
    (103) init_declarator -> . declarator EQUALS initializer
    (104) init_declarator -> . declarator
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    member_declarator              shift and go to state 330
    init_declarator                shift and go to state 163
    declarator                     shift and go to state 129
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 263

    (137) struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list . RIGHT_CURLY_BRACKET
    (149) struct_declaration_list -> struct_declaration_list . struct_declaration
    (147) struct_declaration -> . specifier_list struct_declarator_list SEMICOLON
    (120) specifier_list -> . type_specifier specifier_list
    (121) specifier_list -> . type_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_CURLY_BRACKET shift and go to state 331
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 149
    STRUCT          shift and go to state 24

    struct_declaration             shift and go to state 266
    specifier_list                 shift and go to state 168
    type_specifier                 shift and go to state 169
    struct_specifier               shift and go to state 18

state 264

    (139) struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .

    SEMICOLON       reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LEFT_SQUARE_BRACKET reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    VOID            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 139 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET .)


state 265

    (138) struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .

    SEMICOLON       reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_SQUARE_BRACKET reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    VOID            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 138 (struct_specifier -> STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)


state 266

    (149) struct_declaration_list -> struct_declaration_list struct_declaration .

    RIGHT_CURLY_BRACKET reduce using rule 149 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 149 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 149 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 149 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 149 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 149 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRING          reduce using rule 149 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 149 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG_LONG_INT   reduce using rule 149 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED_INT    reduce using rule 149 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CLASS           reduce using rule 149 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 149 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 267

    (147) struct_declaration -> specifier_list struct_declarator_list . SEMICOLON
    (146) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMICOLON       shift and go to state 332
    COMMA           shift and go to state 333


state 268

    (145) struct_declarator_list -> struct_declarator .

    SEMICOLON       reduce using rule 145 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 145 (struct_declarator_list -> struct_declarator .)


state 269

    (142) struct_declarator -> declarator .
    (144) struct_declarator -> declarator . COLON conditional_expression

    SEMICOLON       reduce using rule 142 (struct_declarator -> declarator .)
    COMMA           reduce using rule 142 (struct_declarator -> declarator .)
    COLON           shift and go to state 334


state 270

    (143) struct_declarator -> COLON . conditional_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    conditional_expression         shift and go to state 335
    logical_or_expression          shift and go to state 81
    logical_and_expression         shift and go to state 88
    or_expression                  shift and go to state 96
    xor_expression                 shift and go to state 100
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 271

    (120) specifier_list -> type_specifier specifier_list .

    COLON           reduce using rule 120 (specifier_list -> type_specifier specifier_list .)
    STAR            reduce using rule 120 (specifier_list -> type_specifier specifier_list .)
    IDENTIFIER      reduce using rule 120 (specifier_list -> type_specifier specifier_list .)
    MAIN            reduce using rule 120 (specifier_list -> type_specifier specifier_list .)
    LEFT_PARENTHESIS reduce using rule 120 (specifier_list -> type_specifier specifier_list .)


state 272

    (193) initializer -> LEFT_CURLY_BRACKET initializer_list . RIGHT_CURLY_BRACKET
    (195) initializer_list -> initializer_list . COMMA initializer

    RIGHT_CURLY_BRACKET shift and go to state 336
    COMMA           shift and go to state 337


state 273

    (196) initializer_list -> initializer .

    RIGHT_CURLY_BRACKET reduce using rule 196 (initializer_list -> initializer .)
    COMMA           reduce using rule 196 (initializer_list -> initializer .)


state 274

    (204) compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .

    VOID            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    $end            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    SEMICOLON       reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    PRIVATE         reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    PUBLIC          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    LEFT_CURLY_BRACKET reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    IF              reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    ASSERT          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    WHILE           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    FOR             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    GOTO            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    BREAK           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    CONTINUE        reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    RETURN          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)
    ELSE            reduce using rule 204 (compound_statement -> LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET .)


state 275

    (203) labeled_statement -> IDENTIFIER COLON statement .

    RIGHT_CURLY_BRACKET reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    LEFT_CURLY_BRACKET reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMICOLON       reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    ASSERT          reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS_PLUS       reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS_MINUS     reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    AND             reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    STAR            reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    PLUS            reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    MINUS           reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    NOT             reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    TILDE           reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    LEFT_PARENTHESIS reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    NUMBER          reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    DECIMAL_NUMBER  reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    CHARACTER       reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    TRUE            reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    FALSE           reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    NULL            reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_LITERAL  reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    INPUT           reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    SQUARE_ROOT     reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    SIN             reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    COS             reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    TAN             reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_COPY     reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_REVERSE  reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_LENGTH   reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    STRING_COMPARE  reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    WRITE           reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    READ            reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    OPEN            reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    OUTPUT          reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 203 (labeled_statement -> IDENTIFIER COLON statement .)


state 276

    (97) expression -> expression COMMA assignment_expression .

    SEMICOLON       reduce using rule 97 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 97 (expression -> expression COMMA assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 97 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 97 (expression -> expression COMMA assignment_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 97 (expression -> expression COMMA assignment_expression .)


state 277

    (214) selection_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement
    (215) selection_statement -> IF LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS statement ELSE statement
    (97) expression -> expression . COMMA assignment_expression

    RIGHT_PARENTHESIS shift and go to state 338
    COMMA           shift and go to state 182


state 278

    (21) primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DOT             reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS_PLUS       reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MINUS_MINUS     reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE_EQUALS   reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MULTIPLY_EQUALS reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULUS_EQUALS  reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS_EQUALS     reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MINUS_EQUALS    reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_SHIFT_EQUALS reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_SHIFT_EQUALS reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND_EQUALS      reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR_EQUALS       reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    XOR_EQUALS      reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    STAR            reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_SHIFT      reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_SHIFT     reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LESS_THAN_EQUALS reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    GREATER_THAN_EQUALS reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    EQUALS_EQUALS   reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    AND_AND         reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    QUESTION_MARK   reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    OR_OR           reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_SQUARE_BRACKET reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_CURLY_BRACKET reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 21 (primary_expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 279

    (52) cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS . cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    cast_expression                shift and go to state 339
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 280

    (216) selection_statement -> ASSERT LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS SEMICOLON
    (97) expression -> expression . COMMA assignment_expression

    RIGHT_PARENTHESIS shift and go to state 340
    COMMA           shift and go to state 182


state 281

    (217) iteration_statement -> WHILE LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS compound_statement
    (97) expression -> expression . COMMA assignment_expression

    RIGHT_PARENTHESIS shift and go to state 341
    COMMA           shift and go to state 182


state 282

    (218) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement . expression_statement expression RIGHT_PARENTHESIS compound_statement
    (220) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement . expression_statement RIGHT_PARENTHESIS compound_statement
    (212) expression_statement -> . expression SEMICOLON
    (213) expression_statement -> . SEMICOLON
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    SEMICOLON       shift and go to state 60
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression_statement           shift and go to state 342
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 283

    (219) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier . expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (221) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier . expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (212) expression_statement -> . expression SEMICOLON
    (213) expression_statement -> . SEMICOLON
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    SEMICOLON       shift and go to state 60
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression_statement           shift and go to state 343
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 284

    (222) jump_statement -> GOTO IDENTIFIER SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IF              reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ASSERT          reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    GOTO            reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CONTINUE        reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUS_PLUS       reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUS_MINUS     reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIZEOF          reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    AND             reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STAR            reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    PLUS            reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    MINUS           reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NOT             reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TILDE           reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    CHARACTER       reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    NULL            reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_LITERAL  reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    INPUT           reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SQUARE_ROOT     reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    SIN             reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    COS             reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    TAN             reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_COPY     reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_REVERSE  reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_LENGTH   reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    STRING_COMPARE  reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    WRITE           reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    READ            reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    OPEN            reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    OUTPUT          reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)
    ELSE            reduce using rule 222 (jump_statement -> GOTO IDENTIFIER SEMICOLON .)


state 285

    (226) jump_statement -> RETURN expression SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    ASSERT          reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    GOTO            reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    SIZEOF          reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    AND             reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    STAR            reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    PLUS            reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    TILDE           reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    CHARACTER       reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    NULL            reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    INPUT           reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    SQUARE_ROOT     reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    SIN             reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    COS             reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    TAN             reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_COPY     reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_REVERSE  reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_LENGTH   reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    STRING_COMPARE  reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    WRITE           reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    READ            reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    OPEN            reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    OUTPUT          reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 226 (jump_statement -> RETURN expression SEMICOLON .)


state 286

    (84) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMICOLON       reduce using rule 84 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 84 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RIGHT_PARENTHESIS reduce using rule 84 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 84 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 84 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 84 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 287

    (82) conditional_expression -> logical_or_expression QUESTION_MARK expression . COLON conditional_expression
    (97) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 344
    COMMA           shift and go to state 182


state 288

    (80) logical_or_expression -> logical_or_expression OR_OR logical_and_expression .
    (78) logical_and_expression -> logical_and_expression . AND_AND or_expression

    QUESTION_MARK   reduce using rule 80 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    OR_OR           reduce using rule 80 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    SEMICOLON       reduce using rule 80 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    COMMA           reduce using rule 80 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 80 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    RIGHT_PARENTHESIS reduce using rule 80 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 80 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    COLON           reduce using rule 80 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    AND_AND         shift and go to state 219


state 289

    (31) postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression . RIGHT_SQUARE_BRACKET
    (97) expression -> expression . COMMA assignment_expression

    RIGHT_SQUARE_BRACKET shift and go to state 345
    COMMA           shift and go to state 182


state 290

    (32) postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DOT             reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PLUS_PLUS       reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MINUS_MINUS     reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DIVIDE_EQUALS   reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MULTIPLY_EQUALS reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MODULUS_EQUALS  reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PLUS_EQUALS     reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MINUS_EQUALS    reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_SHIFT_EQUALS reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_SHIFT_EQUALS reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    AND_EQUALS      reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    OR_EQUALS       reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    XOR_EQUALS      reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    STAR            reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_SHIFT      reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_SHIFT     reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LESS_THAN_EQUALS reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    GREATER_THAN_EQUALS reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    EQUALS_EQUALS   reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    AND             reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    XOR             reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    OR              reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    AND_AND         reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    QUESTION_MARK   reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    OR_OR           reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_SQUARE_BRACKET reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_CURLY_BRACKET reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COLON           reduce using rule 32 (postfix_expression -> postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 291

    (33) postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list . RIGHT_PARENTHESIS
    (39) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RIGHT_PARENTHESIS shift and go to state 346
    COMMA           shift and go to state 347


state 292

    (38) argument_expression_list -> assignment_expression .

    RIGHT_PARENTHESIS reduce using rule 38 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 38 (argument_expression_list -> assignment_expression .)


state 293

    (34) postfix_expression -> postfix_expression DOT IDENTIFIER .

    LEFT_SQUARE_BRACKET reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ARROW           reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQUALS          reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULUS_EQUALS  reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_EQUALS      reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_EQUALS       reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    XOR_EQUALS      reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    STAR            reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULUS         reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS            reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS           reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LESS_THAN       reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GREATER_THAN    reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQUALS_EQUALS   reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NOT_EQUALS      reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND             reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    XOR             reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR              reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AND_AND         reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    QUESTION_MARK   reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_OR           reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_SQUARE_BRACKET reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COLON           reduce using rule 34 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 294

    (35) postfix_expression -> postfix_expression ARROW IDENTIFIER .

    LEFT_SQUARE_BRACKET reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LEFT_PARENTHESIS reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DOT             reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ARROW           reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    PLUS_PLUS       reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MINUS_MINUS     reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    EQUALS          reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DIVIDE_EQUALS   reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MULTIPLY_EQUALS reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MODULUS_EQUALS  reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    PLUS_EQUALS     reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MINUS_EQUALS    reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LEFT_SHIFT_EQUALS reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_SHIFT_EQUALS reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    AND_EQUALS      reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    OR_EQUALS       reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    XOR_EQUALS      reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    STAR            reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DIVIDE          reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MODULUS         reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    PLUS            reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MINUS           reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LESS_THAN       reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GREATER_THAN    reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LESS_THAN_EQUALS reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GREATER_THAN_EQUALS reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    EQUALS_EQUALS   reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    NOT_EQUALS      reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    AND             reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    XOR             reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    OR              reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    AND_AND         reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    QUESTION_MARK   reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    OR_OR           reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    SEMICOLON       reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COMMA           reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_SQUARE_BRACKET reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_PARENTHESIS reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_CURLY_BRACKET reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COLON           reduce using rule 35 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)


state 295

    (44) unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 348


state 296

    (78) logical_and_expression -> logical_and_expression AND_AND or_expression .
    (76) or_expression -> or_expression . OR xor_expression

    AND_AND         reduce using rule 78 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    QUESTION_MARK   reduce using rule 78 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    OR_OR           reduce using rule 78 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    SEMICOLON       reduce using rule 78 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    COMMA           reduce using rule 78 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 78 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    RIGHT_PARENTHESIS reduce using rule 78 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 78 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    COLON           reduce using rule 78 (logical_and_expression -> logical_and_expression AND_AND or_expression .)
    OR              shift and go to state 220


state 297

    (76) or_expression -> or_expression OR xor_expression .
    (74) xor_expression -> xor_expression . XOR and_expression

    OR              reduce using rule 76 (or_expression -> or_expression OR xor_expression .)
    AND_AND         reduce using rule 76 (or_expression -> or_expression OR xor_expression .)
    QUESTION_MARK   reduce using rule 76 (or_expression -> or_expression OR xor_expression .)
    OR_OR           reduce using rule 76 (or_expression -> or_expression OR xor_expression .)
    SEMICOLON       reduce using rule 76 (or_expression -> or_expression OR xor_expression .)
    COMMA           reduce using rule 76 (or_expression -> or_expression OR xor_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 76 (or_expression -> or_expression OR xor_expression .)
    RIGHT_PARENTHESIS reduce using rule 76 (or_expression -> or_expression OR xor_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 76 (or_expression -> or_expression OR xor_expression .)
    COLON           reduce using rule 76 (or_expression -> or_expression OR xor_expression .)
    XOR             shift and go to state 221


state 298

    (74) xor_expression -> xor_expression XOR and_expression .
    (72) and_expression -> and_expression . AND equality_expression

    XOR             reduce using rule 74 (xor_expression -> xor_expression XOR and_expression .)
    OR              reduce using rule 74 (xor_expression -> xor_expression XOR and_expression .)
    AND_AND         reduce using rule 74 (xor_expression -> xor_expression XOR and_expression .)
    QUESTION_MARK   reduce using rule 74 (xor_expression -> xor_expression XOR and_expression .)
    OR_OR           reduce using rule 74 (xor_expression -> xor_expression XOR and_expression .)
    SEMICOLON       reduce using rule 74 (xor_expression -> xor_expression XOR and_expression .)
    COMMA           reduce using rule 74 (xor_expression -> xor_expression XOR and_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 74 (xor_expression -> xor_expression XOR and_expression .)
    RIGHT_PARENTHESIS reduce using rule 74 (xor_expression -> xor_expression XOR and_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 74 (xor_expression -> xor_expression XOR and_expression .)
    COLON           reduce using rule 74 (xor_expression -> xor_expression XOR and_expression .)
    AND             shift and go to state 223


state 299

    (17) input -> INPUT LEFT_PARENTHESIS primary_expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 349


state 300

    (72) and_expression -> and_expression AND equality_expression .
    (69) equality_expression -> equality_expression . EQUALS_EQUALS relational_expression
    (70) equality_expression -> equality_expression . NOT_EQUALS relational_expression

    AND             reduce using rule 72 (and_expression -> and_expression AND equality_expression .)
    XOR             reduce using rule 72 (and_expression -> and_expression AND equality_expression .)
    OR              reduce using rule 72 (and_expression -> and_expression AND equality_expression .)
    AND_AND         reduce using rule 72 (and_expression -> and_expression AND equality_expression .)
    QUESTION_MARK   reduce using rule 72 (and_expression -> and_expression AND equality_expression .)
    OR_OR           reduce using rule 72 (and_expression -> and_expression AND equality_expression .)
    SEMICOLON       reduce using rule 72 (and_expression -> and_expression AND equality_expression .)
    COMMA           reduce using rule 72 (and_expression -> and_expression AND equality_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 72 (and_expression -> and_expression AND equality_expression .)
    RIGHT_PARENTHESIS reduce using rule 72 (and_expression -> and_expression AND equality_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 72 (and_expression -> and_expression AND equality_expression .)
    COLON           reduce using rule 72 (and_expression -> and_expression AND equality_expression .)
    EQUALS_EQUALS   shift and go to state 225
    NOT_EQUALS      shift and go to state 226


state 301

    (16) output -> OUTPUT LEFT_PARENTHESIS primary_expression . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 350


state 302

    (69) equality_expression -> equality_expression EQUALS_EQUALS relational_expression .
    (64) relational_expression -> relational_expression . LESS_THAN shift_expression
    (65) relational_expression -> relational_expression . GREATER_THAN shift_expression
    (66) relational_expression -> relational_expression . LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> relational_expression . GREATER_THAN_EQUALS shift_expression

    EQUALS_EQUALS   reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    NOT_EQUALS      reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    AND             reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    XOR             reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    OR              reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    AND_AND         reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    QUESTION_MARK   reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    OR_OR           reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    SEMICOLON       reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    COMMA           reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    COLON           reduce using rule 69 (equality_expression -> equality_expression EQUALS_EQUALS relational_expression .)
    LESS_THAN       shift and go to state 227
    GREATER_THAN    shift and go to state 228
    LESS_THAN_EQUALS shift and go to state 229
    GREATER_THAN_EQUALS shift and go to state 230


state 303

    (70) equality_expression -> equality_expression NOT_EQUALS relational_expression .
    (64) relational_expression -> relational_expression . LESS_THAN shift_expression
    (65) relational_expression -> relational_expression . GREATER_THAN shift_expression
    (66) relational_expression -> relational_expression . LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> relational_expression . GREATER_THAN_EQUALS shift_expression

    EQUALS_EQUALS   reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    NOT_EQUALS      reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    AND             reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    XOR             reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    OR              reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    AND_AND         reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    QUESTION_MARK   reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    OR_OR           reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    SEMICOLON       reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    COMMA           reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    RIGHT_PARENTHESIS reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    COLON           reduce using rule 70 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    LESS_THAN       shift and go to state 227
    GREATER_THAN    shift and go to state 228
    LESS_THAN_EQUALS shift and go to state 229
    GREATER_THAN_EQUALS shift and go to state 230


state 304

    (64) relational_expression -> relational_expression LESS_THAN shift_expression .
    (61) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (62) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS_THAN       reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    GREATER_THAN    reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    LESS_THAN_EQUALS reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    GREATER_THAN_EQUALS reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    EQUALS_EQUALS   reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    NOT_EQUALS      reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    AND             reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    XOR             reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    OR              reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    AND_AND         reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    QUESTION_MARK   reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    OR_OR           reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    SEMICOLON       reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    COMMA           reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    COLON           reduce using rule 64 (relational_expression -> relational_expression LESS_THAN shift_expression .)
    LEFT_SHIFT      shift and go to state 231
    RIGHT_SHIFT     shift and go to state 232


state 305

    (65) relational_expression -> relational_expression GREATER_THAN shift_expression .
    (61) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (62) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS_THAN       reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    GREATER_THAN    reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    LESS_THAN_EQUALS reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    GREATER_THAN_EQUALS reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    EQUALS_EQUALS   reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    NOT_EQUALS      reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    AND             reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    XOR             reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    OR              reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    AND_AND         reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    QUESTION_MARK   reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    OR_OR           reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    SEMICOLON       reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    COMMA           reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    COLON           reduce using rule 65 (relational_expression -> relational_expression GREATER_THAN shift_expression .)
    LEFT_SHIFT      shift and go to state 231
    RIGHT_SHIFT     shift and go to state 232


state 306

    (66) relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .
    (61) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (62) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS_THAN       reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    GREATER_THAN    reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    LESS_THAN_EQUALS reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    GREATER_THAN_EQUALS reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    EQUALS_EQUALS   reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    NOT_EQUALS      reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    AND             reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    XOR             reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    OR              reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    AND_AND         reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    QUESTION_MARK   reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    OR_OR           reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    SEMICOLON       reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    COMMA           reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    COLON           reduce using rule 66 (relational_expression -> relational_expression LESS_THAN_EQUALS shift_expression .)
    LEFT_SHIFT      shift and go to state 231
    RIGHT_SHIFT     shift and go to state 232


state 307

    (67) relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .
    (61) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (62) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS_THAN       reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    GREATER_THAN    reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    LESS_THAN_EQUALS reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    GREATER_THAN_EQUALS reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    EQUALS_EQUALS   reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    NOT_EQUALS      reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    AND             reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    XOR             reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    OR              reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    AND_AND         reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    QUESTION_MARK   reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    OR_OR           reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    SEMICOLON       reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    COMMA           reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    RIGHT_PARENTHESIS reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    COLON           reduce using rule 67 (relational_expression -> relational_expression GREATER_THAN_EQUALS shift_expression .)
    LEFT_SHIFT      shift and go to state 231
    RIGHT_SHIFT     shift and go to state 232


state 308

    (61) shift_expression -> shift_expression LEFT_SHIFT additive_expression .
    (58) additive_expression -> additive_expression . PLUS multiplicative_expression
    (59) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_SHIFT      reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    RIGHT_SHIFT     reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    LESS_THAN       reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    GREATER_THAN    reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    LESS_THAN_EQUALS reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    GREATER_THAN_EQUALS reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    EQUALS_EQUALS   reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    NOT_EQUALS      reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    AND             reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    XOR             reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    OR              reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    AND_AND         reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    QUESTION_MARK   reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    OR_OR           reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    SEMICOLON       reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    COMMA           reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    RIGHT_PARENTHESIS reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    COLON           reduce using rule 61 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    PLUS            shift and go to state 233
    MINUS           shift and go to state 234


state 309

    (62) shift_expression -> shift_expression RIGHT_SHIFT additive_expression .
    (58) additive_expression -> additive_expression . PLUS multiplicative_expression
    (59) additive_expression -> additive_expression . MINUS multiplicative_expression

    LEFT_SHIFT      reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    RIGHT_SHIFT     reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    LESS_THAN       reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    GREATER_THAN    reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    LESS_THAN_EQUALS reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    GREATER_THAN_EQUALS reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    EQUALS_EQUALS   reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    NOT_EQUALS      reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    AND             reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    XOR             reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    OR              reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    AND_AND         reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    QUESTION_MARK   reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    OR_OR           reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    SEMICOLON       reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    COMMA           reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    RIGHT_PARENTHESIS reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    COLON           reduce using rule 62 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    PLUS            shift and go to state 233
    MINUS           shift and go to state 234


state 310

    (58) additive_expression -> additive_expression PLUS multiplicative_expression .
    (54) multiplicative_expression -> multiplicative_expression . STAR cast_expression
    (55) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (56) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    PLUS            reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LEFT_SHIFT      reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_SHIFT     reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_THAN       reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_THAN_EQUALS reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_THAN_EQUALS reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUALS_EQUALS   reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOT_EQUALS      reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    XOR             reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND_AND         reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QUESTION_MARK   reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_OR           reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COLON           reduce using rule 58 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STAR            shift and go to state 235
    DIVIDE          shift and go to state 236
    MODULUS         shift and go to state 237


state 311

    (59) additive_expression -> additive_expression MINUS multiplicative_expression .
    (54) multiplicative_expression -> multiplicative_expression . STAR cast_expression
    (55) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (56) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    PLUS            reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LEFT_SHIFT      reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_SHIFT     reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_THAN       reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_THAN_EQUALS reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_THAN_EQUALS reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUALS_EQUALS   reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOT_EQUALS      reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    XOR             reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND_AND         reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QUESTION_MARK   reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_OR           reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_PARENTHESIS reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COLON           reduce using rule 59 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STAR            shift and go to state 235
    DIVIDE          shift and go to state 236
    MODULUS         shift and go to state 237


state 312

    (54) multiplicative_expression -> multiplicative_expression STAR cast_expression .

    STAR            reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    DIVIDE          reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    MODULUS         reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    PLUS            reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    MINUS           reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    LEFT_SHIFT      reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    RIGHT_SHIFT     reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    LESS_THAN       reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    GREATER_THAN    reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    LESS_THAN_EQUALS reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    GREATER_THAN_EQUALS reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    EQUALS_EQUALS   reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    NOT_EQUALS      reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    AND             reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    XOR             reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    OR              reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    AND_AND         reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    QUESTION_MARK   reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    OR_OR           reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    SEMICOLON       reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    COMMA           reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)
    COLON           reduce using rule 54 (multiplicative_expression -> multiplicative_expression STAR cast_expression .)


state 313

    (55) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    STAR            reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MODULUS         reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LEFT_SHIFT      reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_SHIFT     reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LESS_THAN       reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GREATER_THAN    reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LESS_THAN_EQUALS reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GREATER_THAN_EQUALS reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQUALS_EQUALS   reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NOT_EQUALS      reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND             reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    XOR             reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR              reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    AND_AND         reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    QUESTION_MARK   reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    OR_OR           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMICOLON       reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 55 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 314

    (56) multiplicative_expression -> multiplicative_expression MODULUS cast_expression .

    STAR            reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    DIVIDE          reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    MODULUS         reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    PLUS            reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    MINUS           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LEFT_SHIFT      reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    RIGHT_SHIFT     reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LESS_THAN       reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    GREATER_THAN    reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LESS_THAN_EQUALS reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    GREATER_THAN_EQUALS reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    EQUALS_EQUALS   reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    NOT_EQUALS      reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    AND             reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    XOR             reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    OR              reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    AND_AND         reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    QUESTION_MARK   reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    OR_OR           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    SEMICOLON       reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    COMMA           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    COLON           reduce using rule 56 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)


state 315

    (174) base_specifier_list -> base_specifier_list COMMA base_specifier .

    COMMA           reduce using rule 174 (base_specifier_list -> base_specifier_list COMMA base_specifier .)
    LEFT_CURLY_BRACKET reduce using rule 174 (base_specifier_list -> base_specifier_list COMMA base_specifier .)


state 316

    (176) base_specifier -> access_specifier CLASS IDENTIFIER .

    COMMA           reduce using rule 176 (base_specifier -> access_specifier CLASS IDENTIFIER .)
    LEFT_CURLY_BRACKET reduce using rule 176 (base_specifier -> access_specifier CLASS IDENTIFIER .)


state 317

    (133) parameter_list -> parameter_list COMMA parameter_declaration .

    RIGHT_PARENTHESIS reduce using rule 133 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 133 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 318

    (119) identifier_list -> identifier_list COMMA IDENTIFIER .

    RIGHT_PARENTHESIS reduce using rule 119 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 119 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 319

    (183) abstract_declarator -> pointer direct_abstract_declarator .
    (187) direct_abstract_declarator -> direct_abstract_declarator . LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (188) direct_abstract_declarator -> direct_abstract_declarator . LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (191) direct_abstract_declarator -> direct_abstract_declarator . LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (192) direct_abstract_declarator -> direct_abstract_declarator . LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS reduce using rule 183 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 183 (abstract_declarator -> pointer direct_abstract_declarator .)
    LEFT_SQUARE_BRACKET shift and go to state 320
    LEFT_PARENTHESIS shift and go to state 321


state 320

    (187) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET . RIGHT_SQUARE_BRACKET
    (188) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET . conditional_expression RIGHT_SQUARE_BRACKET
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    RIGHT_SQUARE_BRACKET shift and go to state 351
    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    conditional_expression         shift and go to state 352
    logical_or_expression          shift and go to state 81
    logical_and_expression         shift and go to state 88
    or_expression                  shift and go to state 96
    xor_expression                 shift and go to state 100
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 321

    (191) direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS . RIGHT_PARENTHESIS
    (192) direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS . parameter_list RIGHT_PARENTHESIS
    (132) parameter_list -> . parameter_declaration
    (133) parameter_list -> . parameter_list COMMA parameter_declaration
    (134) parameter_declaration -> . type_specifier declarator
    (135) parameter_declaration -> . type_specifier abstract_declarator
    (136) parameter_declaration -> . type_specifier
    (105) type_specifier -> . VOID
    (106) type_specifier -> . CHAR
    (107) type_specifier -> . INT
    (108) type_specifier -> . FLOAT
    (109) type_specifier -> . DOUBLE
    (110) type_specifier -> . STRING
    (111) type_specifier -> . BOOL
    (112) type_specifier -> . LONG_LONG_INT
    (113) type_specifier -> . UNSIGNED_INT
    (114) type_specifier -> . struct_specifier
    (115) type_specifier -> . CLASS IDENTIFIER
    (137) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (138) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET
    (139) struct_specifier -> . STRUCT IDENTIFIER LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (140) struct_specifier -> . STRUCT LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (141) struct_specifier -> . STRUCT IDENTIFIER

    RIGHT_PARENTHESIS shift and go to state 353
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    STRING          shift and go to state 14
    BOOL            shift and go to state 15
    LONG_LONG_INT   shift and go to state 16
    UNSIGNED_INT    shift and go to state 17
    CLASS           shift and go to state 149
    STRUCT          shift and go to state 24

    parameter_list                 shift and go to state 354
    parameter_declaration          shift and go to state 146
    type_specifier                 shift and go to state 148
    struct_specifier               shift and go to state 18

state 322

    (189) direct_abstract_declarator -> LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 189 (direct_abstract_declarator -> LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 189 (direct_abstract_declarator -> LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 189 (direct_abstract_declarator -> LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 189 (direct_abstract_declarator -> LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 323

    (184) direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 355


state 324

    (190) direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list . RIGHT_PARENTHESIS
    (133) parameter_list -> parameter_list . COMMA parameter_declaration

    RIGHT_PARENTHESIS shift and go to state 356
    COMMA           shift and go to state 244


state 325

    (185) direct_abstract_declarator -> LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 185 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 185 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 185 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 185 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)


state 326

    (186) direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET shift and go to state 357


state 327

    (154) class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .

    VOID            reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    CHAR            reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    INT             reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    FLOAT           reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    DOUBLE          reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING          reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    BOOL            reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    LONG_LONG_INT   reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    UNSIGNED_INT    reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    CLASS           reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRUCT          reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STAR            reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    MAIN            reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    $end            reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    IF              reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    ASSERT          reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    WHILE           reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    FOR             reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    GOTO            reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    BREAK           reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    CONTINUE        reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    RETURN          reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    PLUS_PLUS       reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    MINUS_MINUS     reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    SIZEOF          reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    AND             reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    PLUS            reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    MINUS           reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    NOT             reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    TILDE           reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    NUMBER          reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    CHARACTER       reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    TRUE            reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    FALSE           reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    NULL            reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    INPUT           reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    SQUARE_ROOT     reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    SIN             reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    COS             reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    TAN             reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_COPY     reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_REVERSE  reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_LENGTH   reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    STRING_COMPARE  reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    WRITE           reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    READ            reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    OPEN            reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    OUTPUT          reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    PRIVATE         reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)
    PUBLIC          reduce using rule 154 (class_specifier -> class_head LEFT_CURLY_BRACKET member_list RIGHT_CURLY_BRACKET SEMICOLON .)


state 328

    (168) access_list -> access_specifier COLON member_access_list .

    RIGHT_CURLY_BRACKET reduce using rule 168 (access_list -> access_specifier COLON member_access_list .)
    PRIVATE         reduce using rule 168 (access_list -> access_specifier COLON member_access_list .)
    PUBLIC          reduce using rule 168 (access_list -> access_specifier COLON member_access_list .)


state 329

    (162) member_declaration -> type_specifier member_declarator_list SEMICOLON .

    SEMICOLON       reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    VOID            reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    CHAR            reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    INT             reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    STRING          reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    BOOL            reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    LONG_LONG_INT   reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    UNSIGNED_INT    reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    CLASS           reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    STAR            reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    IDENTIFIER      reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    MAIN            reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    RIGHT_CURLY_BRACKET reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    PRIVATE         reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)
    PUBLIC          reduce using rule 162 (member_declaration -> type_specifier member_declarator_list SEMICOLON .)


state 330

    (161) member_declarator_list -> member_declarator_list COMMA member_declarator .

    SEMICOLON       reduce using rule 161 (member_declarator_list -> member_declarator_list COMMA member_declarator .)
    COMMA           reduce using rule 161 (member_declarator_list -> member_declarator_list COMMA member_declarator .)


state 331

    (137) struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .

    SEMICOLON       reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STAR            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    IDENTIFIER      reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MAIN            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LEFT_SQUARE_BRACKET reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    VOID            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CHAR            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    INT             reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    FLOAT           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    DOUBLE          reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING          reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    BOOL            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    LONG_LONG_INT   reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    UNSIGNED_INT    reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CLASS           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRUCT          reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COLON           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    PLUS_PLUS       reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MINUS_MINUS     reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SIZEOF          reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    AND             reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    PLUS            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    MINUS           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    NOT             reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TILDE           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    NUMBER          reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    DECIMAL_NUMBER  reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    CHARACTER       reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TRUE            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    FALSE           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    NULL            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_LITERAL  reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    INPUT           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SQUARE_ROOT     reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    SIN             reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    COS             reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    TAN             reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_COPY     reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_REVERSE  reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_LENGTH   reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    STRING_COMPARE  reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    WRITE           reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    READ            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    OPEN            reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)
    OUTPUT          reduce using rule 137 (struct_specifier -> STRUCT IDENTIFIER LEFT_CURLY_BRACKET struct_declaration_list RIGHT_CURLY_BRACKET .)


state 332

    (147) struct_declaration -> specifier_list struct_declarator_list SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 147 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    VOID            reduce using rule 147 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    CHAR            reduce using rule 147 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    INT             reduce using rule 147 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    FLOAT           reduce using rule 147 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    DOUBLE          reduce using rule 147 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    STRING          reduce using rule 147 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    BOOL            reduce using rule 147 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    LONG_LONG_INT   reduce using rule 147 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    UNSIGNED_INT    reduce using rule 147 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    CLASS           reduce using rule 147 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)
    STRUCT          reduce using rule 147 (struct_declaration -> specifier_list struct_declarator_list SEMICOLON .)


state 333

    (146) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (142) struct_declarator -> . declarator
    (143) struct_declarator -> . COLON conditional_expression
    (144) struct_declarator -> . declarator COLON conditional_expression
    (130) declarator -> . pointer direct_declarator
    (131) declarator -> . direct_declarator
    (116) pointer -> . STAR
    (117) pointer -> . STAR pointer
    (122) direct_declarator -> . IDENTIFIER
    (123) direct_declarator -> . MAIN
    (124) direct_declarator -> . LEFT_PARENTHESIS declarator RIGHT_PARENTHESIS
    (125) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET
    (126) direct_declarator -> . direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
    (127) direct_declarator -> . direct_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS
    (128) direct_declarator -> . direct_declarator LEFT_PARENTHESIS identifier_list RIGHT_PARENTHESIS
    (129) direct_declarator -> . direct_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS

    COLON           shift and go to state 270
    STAR            shift and go to state 25
    IDENTIFIER      shift and go to state 20
    MAIN            shift and go to state 26
    LEFT_PARENTHESIS shift and go to state 27

    struct_declarator              shift and go to state 358
    declarator                     shift and go to state 269
    pointer                        shift and go to state 21
    direct_declarator              shift and go to state 22

state 334

    (144) struct_declarator -> declarator COLON . conditional_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    conditional_expression         shift and go to state 359
    logical_or_expression          shift and go to state 81
    logical_and_expression         shift and go to state 88
    or_expression                  shift and go to state 96
    xor_expression                 shift and go to state 100
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 335

    (143) struct_declarator -> COLON conditional_expression .

    SEMICOLON       reduce using rule 143 (struct_declarator -> COLON conditional_expression .)
    COMMA           reduce using rule 143 (struct_declarator -> COLON conditional_expression .)


state 336

    (193) initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET .

    SEMICOLON       reduce using rule 193 (initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET .)
    COMMA           reduce using rule 193 (initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 193 (initializer -> LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET .)


state 337

    (195) initializer_list -> initializer_list COMMA . initializer
    (193) initializer -> . LEFT_CURLY_BRACKET initializer_list RIGHT_CURLY_BRACKET
    (194) initializer -> . assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    LEFT_CURLY_BRACKET shift and go to state 173
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    initializer                    shift and go to state 360
    assignment_expression          shift and go to state 174
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 338

    (214) selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement
    (215) selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . statement ELSE statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) statement -> . labeled_statement
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (212) expression_statement -> . expression SEMICOLON
    (213) expression_statement -> . SEMICOLON
    (214) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (215) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (216) selection_statement -> . ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (217) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (219) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (220) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (221) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (222) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (223) jump_statement -> . BREAK SEMICOLON
    (224) jump_statement -> . CONTINUE SEMICOLON
    (225) jump_statement -> . RETURN SEMICOLON
    (226) jump_statement -> . RETURN expression SEMICOLON
    (203) labeled_statement -> . IDENTIFIER COLON statement
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    ASSERT          shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    GOTO            shift and go to state 74
    BREAK           shift and go to state 75
    CONTINUE        shift and go to state 76
    RETURN          shift and go to state 77
    IDENTIFIER      shift and go to state 67
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression                     shift and go to state 68
    statement                      shift and go to state 361
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 339

    (52) cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .

    STAR            reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    DIVIDE          reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    MODULUS         reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    PLUS            reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    MINUS           reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    LEFT_SHIFT      reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    RIGHT_SHIFT     reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    LESS_THAN       reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    GREATER_THAN    reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    LESS_THAN_EQUALS reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    GREATER_THAN_EQUALS reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    EQUALS_EQUALS   reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    NOT_EQUALS      reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    AND             reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    XOR             reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    OR              reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    AND_AND         reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    QUESTION_MARK   reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    OR_OR           reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    SEMICOLON       reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    COMMA           reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    RIGHT_PARENTHESIS reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    EQUALS          reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    DIVIDE_EQUALS   reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    MULTIPLY_EQUALS reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    MODULUS_EQUALS  reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    PLUS_EQUALS     reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    MINUS_EQUALS    reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    LEFT_SHIFT_EQUALS reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    RIGHT_SHIFT_EQUALS reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    AND_EQUALS      reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    OR_EQUALS       reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    XOR_EQUALS      reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)
    COLON           reduce using rule 52 (cast_expression -> LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression .)


state 340

    (216) selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 362


state 341

    (217) iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS . compound_statement
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 36

    compound_statement             shift and go to state 363

state 342

    (218) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement . expression RIGHT_PARENTHESIS compound_statement
    (220) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement . RIGHT_PARENTHESIS compound_statement
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_PARENTHESIS shift and go to state 365
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression                     shift and go to state 364
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 343

    (219) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement . expression_statement expression RIGHT_PARENTHESIS compound_statement
    (221) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement . expression_statement RIGHT_PARENTHESIS compound_statement
    (212) expression_statement -> . expression SEMICOLON
    (213) expression_statement -> . SEMICOLON
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    SEMICOLON       shift and go to state 60
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression_statement           shift and go to state 366
    expression                     shift and go to state 68
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 344

    (82) conditional_expression -> logical_or_expression QUESTION_MARK expression COLON . conditional_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 141
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    logical_or_expression          shift and go to state 81
    conditional_expression         shift and go to state 367
    logical_and_expression         shift and go to state 88
    or_expression                  shift and go to state 96
    xor_expression                 shift and go to state 100
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 86
    unary_expression               shift and go to state 140
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    primary_expression             shift and go to state 89
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    output                         shift and go to state 109
    input                          shift and go to state 110

state 345

    (31) postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    DOT             reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    ARROW           reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    PLUS_PLUS       reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    MINUS_MINUS     reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    EQUALS          reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    DIVIDE_EQUALS   reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    MULTIPLY_EQUALS reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    MODULUS_EQUALS  reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    PLUS_EQUALS     reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    MINUS_EQUALS    reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    LEFT_SHIFT_EQUALS reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    RIGHT_SHIFT_EQUALS reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    AND_EQUALS      reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    OR_EQUALS       reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    XOR_EQUALS      reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    STAR            reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    DIVIDE          reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    MODULUS         reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    PLUS            reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    MINUS           reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    LEFT_SHIFT      reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    RIGHT_SHIFT     reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    LESS_THAN       reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    GREATER_THAN    reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    LESS_THAN_EQUALS reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    GREATER_THAN_EQUALS reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    EQUALS_EQUALS   reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    NOT_EQUALS      reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    AND             reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    XOR             reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    OR              reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    AND_AND         reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    QUESTION_MARK   reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    OR_OR           reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    RIGHT_SQUARE_BRACKET reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    RIGHT_CURLY_BRACKET reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)
    COLON           reduce using rule 31 (postfix_expression -> postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET .)


state 346

    (33) postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DOT             reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS_PLUS       reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS_MINUS     reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIVIDE_EQUALS   reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MULTIPLY_EQUALS reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MODULUS_EQUALS  reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS_EQUALS     reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS_EQUALS    reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_SHIFT_EQUALS reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_SHIFT_EQUALS reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND_EQUALS      reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR_EQUALS       reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR_EQUALS      reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    STAR            reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LEFT_SHIFT      reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_SHIFT     reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    LESS_THAN_EQUALS reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    GREATER_THAN_EQUALS reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    EQUALS_EQUALS   reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND             reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    XOR             reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR              reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    AND_AND         reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    QUESTION_MARK   reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    OR_OR           reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_SQUARE_BRACKET reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    RIGHT_CURLY_BRACKET reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)
    COLON           reduce using rule 33 (postfix_expression -> postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS .)


state 347

    (39) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    assignment_expression          shift and go to state 368
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 348

    (44) unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .

    EQUALS          reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    DIVIDE_EQUALS   reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    MULTIPLY_EQUALS reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    MODULUS_EQUALS  reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    PLUS_EQUALS     reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    MINUS_EQUALS    reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    LEFT_SHIFT_EQUALS reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    RIGHT_SHIFT_EQUALS reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    AND_EQUALS      reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    OR_EQUALS       reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    XOR_EQUALS      reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    STAR            reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    LEFT_SHIFT      reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    RIGHT_SHIFT     reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    LESS_THAN_EQUALS reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    GREATER_THAN_EQUALS reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    EQUALS_EQUALS   reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    AND             reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    XOR             reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    OR              reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    AND_AND         reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    QUESTION_MARK   reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    OR_OR           reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    RIGHT_SQUARE_BRACKET reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    RIGHT_CURLY_BRACKET reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)
    COLON           reduce using rule 44 (unary_expression -> SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS .)


state 349

    (17) input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    DOT             reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    PLUS_PLUS       reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    MINUS_MINUS     reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    DIVIDE_EQUALS   reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    MULTIPLY_EQUALS reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    MODULUS_EQUALS  reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    PLUS_EQUALS     reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    MINUS_EQUALS    reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    LEFT_SHIFT_EQUALS reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    RIGHT_SHIFT_EQUALS reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    AND_EQUALS      reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    OR_EQUALS       reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    XOR_EQUALS      reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    STAR            reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    LEFT_SHIFT      reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    RIGHT_SHIFT     reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    LESS_THAN_EQUALS reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    GREATER_THAN_EQUALS reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    EQUALS_EQUALS   reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    AND_AND         reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    QUESTION_MARK   reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    OR_OR           reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    RIGHT_SQUARE_BRACKET reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    RIGHT_CURLY_BRACKET reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 17 (input -> INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)


state 350

    (16) output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    DOT             reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    ARROW           reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    PLUS_PLUS       reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    MINUS_MINUS     reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    EQUALS          reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    DIVIDE_EQUALS   reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    MULTIPLY_EQUALS reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    MODULUS_EQUALS  reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    PLUS_EQUALS     reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    MINUS_EQUALS    reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    LEFT_SHIFT_EQUALS reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    RIGHT_SHIFT_EQUALS reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    AND_EQUALS      reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    OR_EQUALS       reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    XOR_EQUALS      reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    STAR            reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    MODULUS         reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    PLUS            reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    LEFT_SHIFT      reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    RIGHT_SHIFT     reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    LESS_THAN       reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    GREATER_THAN    reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    LESS_THAN_EQUALS reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    GREATER_THAN_EQUALS reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    EQUALS_EQUALS   reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    NOT_EQUALS      reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    AND             reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    XOR             reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    OR              reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    AND_AND         reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    QUESTION_MARK   reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    OR_OR           reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    SEMICOLON       reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    RIGHT_SQUARE_BRACKET reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    RIGHT_CURLY_BRACKET reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)
    COLON           reduce using rule 16 (output -> OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS .)


state 351

    (187) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 187 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 187 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 187 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 187 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET .)


state 352

    (188) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression . RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET shift and go to state 369


state 353

    (191) direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 191 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 191 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 191 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 191 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS RIGHT_PARENTHESIS .)


state 354

    (192) direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list . RIGHT_PARENTHESIS
    (133) parameter_list -> parameter_list . COMMA parameter_declaration

    RIGHT_PARENTHESIS shift and go to state 370
    COMMA           shift and go to state 244


state 355

    (184) direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 184 (direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 184 (direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 184 (direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 184 (direct_abstract_declarator -> LEFT_PARENTHESIS abstract_declarator RIGHT_PARENTHESIS .)


state 356

    (190) direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 190 (direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 190 (direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 190 (direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 190 (direct_abstract_declarator -> LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)


state 357

    (186) direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 186 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 186 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 186 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 186 (direct_abstract_declarator -> LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)


state 358

    (146) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMICOLON       reduce using rule 146 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 146 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 359

    (144) struct_declarator -> declarator COLON conditional_expression .

    SEMICOLON       reduce using rule 144 (struct_declarator -> declarator COLON conditional_expression .)
    COMMA           reduce using rule 144 (struct_declarator -> declarator COLON conditional_expression .)


state 360

    (195) initializer_list -> initializer_list COMMA initializer .

    RIGHT_CURLY_BRACKET reduce using rule 195 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 195 (initializer_list -> initializer_list COMMA initializer .)


state 361

    (214) selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .
    (215) selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement . ELSE statement

    RIGHT_CURLY_BRACKET reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    LEFT_CURLY_BRACKET reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SEMICOLON       reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IF              reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ASSERT          reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WHILE           reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FOR             reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    GOTO            reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    BREAK           reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CONTINUE        reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    RETURN          reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    IDENTIFIER      reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    PLUS_PLUS       reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    MINUS_MINUS     reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SIZEOF          reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    AND             reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STAR            reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    PLUS            reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    MINUS           reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NOT             reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TILDE           reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    LEFT_PARENTHESIS reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NUMBER          reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    DECIMAL_NUMBER  reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    CHARACTER       reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TRUE            reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    FALSE           reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    NULL            reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING_LITERAL  reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    INPUT           reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SQUARE_ROOT     reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    SIN             reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    COS             reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    TAN             reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING_COPY     reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING_REVERSE  reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING_LENGTH   reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    STRING_COMPARE  reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    WRITE           reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    READ            reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    OPEN            reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    OUTPUT          reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .)
    ELSE            shift and go to state 371

  ! ELSE            [ reduce using rule 214 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement .) ]


state 362

    (216) selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .

    RIGHT_CURLY_BRACKET reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    LEFT_CURLY_BRACKET reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    SEMICOLON       reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    IF              reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ASSERT          reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    FOR             reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    GOTO            reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    BREAK           reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    CONTINUE        reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    RETURN          reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    IDENTIFIER      reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    PLUS_PLUS       reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    MINUS_MINUS     reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    SIZEOF          reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    AND             reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    STAR            reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    PLUS            reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    MINUS           reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    NOT             reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    TILDE           reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    LEFT_PARENTHESIS reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    NUMBER          reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    DECIMAL_NUMBER  reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    CHARACTER       reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    TRUE            reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    FALSE           reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    NULL            reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    STRING_LITERAL  reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    INPUT           reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    SQUARE_ROOT     reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    SIN             reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    COS             reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    TAN             reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    STRING_COPY     reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    STRING_REVERSE  reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    STRING_LENGTH   reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    STRING_COMPARE  reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    READ            reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    OPEN            reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    OUTPUT          reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)
    ELSE            reduce using rule 216 (selection_statement -> ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON .)


state 363

    (217) iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    SEMICOLON       reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    IF              reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    ASSERT          reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    WHILE           reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    FOR             reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    GOTO            reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    BREAK           reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    CONTINUE        reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    RETURN          reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    IDENTIFIER      reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    PLUS_PLUS       reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    MINUS_MINUS     reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    SIZEOF          reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    AND             reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    STAR            reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    PLUS            reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    MINUS           reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    NOT             reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    TILDE           reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    LEFT_PARENTHESIS reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    NUMBER          reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    DECIMAL_NUMBER  reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    CHARACTER       reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    TRUE            reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    FALSE           reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    NULL            reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    STRING_LITERAL  reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    INPUT           reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    SQUARE_ROOT     reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    SIN             reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    COS             reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    TAN             reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    STRING_COPY     reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    STRING_REVERSE  reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    STRING_LENGTH   reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    STRING_COMPARE  reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    WRITE           reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    READ            reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    OPEN            reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    OUTPUT          reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)
    ELSE            reduce using rule 217 (iteration_statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement .)


state 364

    (218) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression . RIGHT_PARENTHESIS compound_statement
    (97) expression -> expression . COMMA assignment_expression

    RIGHT_PARENTHESIS shift and go to state 372
    COMMA           shift and go to state 182


state 365

    (220) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS . compound_statement
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 36

    compound_statement             shift and go to state 373

state 366

    (219) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement . expression RIGHT_PARENTHESIS compound_statement
    (221) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement . RIGHT_PARENTHESIS compound_statement
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    RIGHT_PARENTHESIS shift and go to state 375
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    IDENTIFIER      shift and go to state 142
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression                     shift and go to state 374
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 367

    (82) conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .

    SEMICOLON       reduce using rule 82 (conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .)
    COMMA           reduce using rule 82 (conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .)
    RIGHT_SQUARE_BRACKET reduce using rule 82 (conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .)
    RIGHT_PARENTHESIS reduce using rule 82 (conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .)
    RIGHT_CURLY_BRACKET reduce using rule 82 (conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .)
    COLON           reduce using rule 82 (conditional_expression -> logical_or_expression QUESTION_MARK expression COLON conditional_expression .)


state 368

    (39) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RIGHT_PARENTHESIS reduce using rule 39 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 39 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 369

    (188) direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .

    LEFT_SQUARE_BRACKET reduce using rule 188 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    LEFT_PARENTHESIS reduce using rule 188 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    RIGHT_PARENTHESIS reduce using rule 188 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)
    COMMA           reduce using rule 188 (direct_abstract_declarator -> direct_abstract_declarator LEFT_SQUARE_BRACKET conditional_expression RIGHT_SQUARE_BRACKET .)


state 370

    (192) direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .

    LEFT_SQUARE_BRACKET reduce using rule 192 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 192 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 192 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)
    COMMA           reduce using rule 192 (direct_abstract_declarator -> direct_abstract_declarator LEFT_PARENTHESIS parameter_list RIGHT_PARENTHESIS .)


state 371

    (215) selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE . statement
    (197) statement -> . compound_statement
    (198) statement -> . expression_statement
    (199) statement -> . selection_statement
    (200) statement -> . iteration_statement
    (201) statement -> . jump_statement
    (202) statement -> . labeled_statement
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET
    (212) expression_statement -> . expression SEMICOLON
    (213) expression_statement -> . SEMICOLON
    (214) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement
    (215) selection_statement -> . IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement
    (216) selection_statement -> . ASSERT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON
    (217) iteration_statement -> . WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS compound_statement
    (218) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (219) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement
    (220) iteration_statement -> . FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (221) iteration_statement -> . FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement
    (222) jump_statement -> . GOTO IDENTIFIER SEMICOLON
    (223) jump_statement -> . BREAK SEMICOLON
    (224) jump_statement -> . CONTINUE SEMICOLON
    (225) jump_statement -> . RETURN SEMICOLON
    (226) jump_statement -> . RETURN expression SEMICOLON
    (203) labeled_statement -> . IDENTIFIER COLON statement
    (96) expression -> . assignment_expression
    (97) expression -> . expression COMMA assignment_expression
    (83) assignment_expression -> . conditional_expression
    (84) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (81) conditional_expression -> . logical_or_expression
    (82) conditional_expression -> . logical_or_expression QUESTION_MARK expression COLON conditional_expression
    (40) unary_expression -> . postfix_expression
    (41) unary_expression -> . PLUS_PLUS unary_expression
    (42) unary_expression -> . MINUS_MINUS unary_expression
    (43) unary_expression -> . unary_operator cast_expression
    (44) unary_expression -> . SIZEOF LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS
    (79) logical_or_expression -> . logical_and_expression
    (80) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (30) postfix_expression -> . primary_expression
    (31) postfix_expression -> . postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    (32) postfix_expression -> . postfix_expression LEFT_PARENTHESIS RIGHT_PARENTHESIS
    (33) postfix_expression -> . postfix_expression LEFT_PARENTHESIS argument_expression_list RIGHT_PARENTHESIS
    (34) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (35) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (36) postfix_expression -> . postfix_expression PLUS_PLUS
    (37) postfix_expression -> . postfix_expression MINUS_MINUS
    (45) unary_operator -> . AND
    (46) unary_operator -> . STAR
    (47) unary_operator -> . PLUS
    (48) unary_operator -> . MINUS
    (49) unary_operator -> . NOT
    (50) unary_operator -> . TILDE
    (77) logical_and_expression -> . or_expression
    (78) logical_and_expression -> . logical_and_expression AND_AND or_expression
    (18) primary_expression -> . IDENTIFIER
    (19) primary_expression -> . constant
    (20) primary_expression -> . string
    (21) primary_expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (22) primary_expression -> . predefined_functions
    (75) or_expression -> . xor_expression
    (76) or_expression -> . or_expression OR xor_expression
    (23) constant -> . NUMBER
    (24) constant -> . DECIMAL_NUMBER
    (25) constant -> . CHARACTER
    (26) constant -> . TRUE
    (27) constant -> . FALSE
    (28) constant -> . NULL
    (29) string -> . STRING_LITERAL
    (2) predefined_functions -> . INPUT
    (3) predefined_functions -> . output
    (4) predefined_functions -> . input
    (5) predefined_functions -> . SQUARE_ROOT
    (6) predefined_functions -> . SIN
    (7) predefined_functions -> . COS
    (8) predefined_functions -> . TAN
    (9) predefined_functions -> . STRING_COPY
    (10) predefined_functions -> . STRING_REVERSE
    (11) predefined_functions -> . STRING_LENGTH
    (12) predefined_functions -> . STRING_COMPARE
    (13) predefined_functions -> . WRITE
    (14) predefined_functions -> . READ
    (15) predefined_functions -> . OPEN
    (73) xor_expression -> . and_expression
    (74) xor_expression -> . xor_expression XOR and_expression
    (16) output -> . OUTPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (17) input -> . INPUT LEFT_PARENTHESIS primary_expression RIGHT_PARENTHESIS
    (71) and_expression -> . equality_expression
    (72) and_expression -> . and_expression AND equality_expression
    (68) equality_expression -> . relational_expression
    (69) equality_expression -> . equality_expression EQUALS_EQUALS relational_expression
    (70) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression LESS_THAN shift_expression
    (65) relational_expression -> . relational_expression GREATER_THAN shift_expression
    (66) relational_expression -> . relational_expression LESS_THAN_EQUALS shift_expression
    (67) relational_expression -> . relational_expression GREATER_THAN_EQUALS shift_expression
    (60) shift_expression -> . additive_expression
    (61) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (62) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (57) additive_expression -> . multiplicative_expression
    (58) additive_expression -> . additive_expression PLUS multiplicative_expression
    (59) additive_expression -> . additive_expression MINUS multiplicative_expression
    (53) multiplicative_expression -> . cast_expression
    (54) multiplicative_expression -> . multiplicative_expression STAR cast_expression
    (55) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (56) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (51) cast_expression -> . unary_expression
    (52) cast_expression -> . LEFT_PARENTHESIS type_specifier RIGHT_PARENTHESIS cast_expression

    LEFT_CURLY_BRACKET shift and go to state 36
    SEMICOLON       shift and go to state 60
    IF              shift and go to state 69
    ASSERT          shift and go to state 71
    WHILE           shift and go to state 72
    FOR             shift and go to state 73
    GOTO            shift and go to state 74
    BREAK           shift and go to state 75
    CONTINUE        shift and go to state 76
    RETURN          shift and go to state 77
    IDENTIFIER      shift and go to state 67
    PLUS_PLUS       shift and go to state 83
    MINUS_MINUS     shift and go to state 84
    SIZEOF          shift and go to state 87
    AND             shift and go to state 90
    STAR            shift and go to state 91
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93
    NOT             shift and go to state 94
    TILDE           shift and go to state 95
    LEFT_PARENTHESIS shift and go to state 70
    NUMBER          shift and go to state 101
    DECIMAL_NUMBER  shift and go to state 102
    CHARACTER       shift and go to state 103
    TRUE            shift and go to state 104
    FALSE           shift and go to state 105
    NULL            shift and go to state 106
    STRING_LITERAL  shift and go to state 107
    INPUT           shift and go to state 108
    SQUARE_ROOT     shift and go to state 111
    SIN             shift and go to state 112
    COS             shift and go to state 113
    TAN             shift and go to state 114
    STRING_COPY     shift and go to state 115
    STRING_REVERSE  shift and go to state 116
    STRING_LENGTH   shift and go to state 117
    STRING_COMPARE  shift and go to state 118
    WRITE           shift and go to state 119
    READ            shift and go to state 120
    OPEN            shift and go to state 121
    OUTPUT          shift and go to state 123

    expression                     shift and go to state 68
    statement                      shift and go to state 376
    compound_statement             shift and go to state 61
    expression_statement           shift and go to state 62
    selection_statement            shift and go to state 63
    iteration_statement            shift and go to state 64
    jump_statement                 shift and go to state 65
    labeled_statement              shift and go to state 66
    assignment_expression          shift and go to state 78
    conditional_expression         shift and go to state 79
    unary_expression               shift and go to state 80
    logical_or_expression          shift and go to state 81
    postfix_expression             shift and go to state 82
    unary_operator                 shift and go to state 85
    cast_expression                shift and go to state 86
    logical_and_expression         shift and go to state 88
    primary_expression             shift and go to state 89
    or_expression                  shift and go to state 96
    constant                       shift and go to state 97
    string                         shift and go to state 98
    predefined_functions           shift and go to state 99
    xor_expression                 shift and go to state 100
    output                         shift and go to state 109
    input                          shift and go to state 110
    and_expression                 shift and go to state 122
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 372

    (218) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS . compound_statement
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 36

    compound_statement             shift and go to state 377

state 373

    (220) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SEMICOLON       reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    IF              reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    ASSERT          reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    WHILE           reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    FOR             reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    GOTO            reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    BREAK           reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    CONTINUE        reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    RETURN          reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    IDENTIFIER      reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    PLUS_PLUS       reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    MINUS_MINUS     reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SIZEOF          reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    AND             reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STAR            reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    PLUS            reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    MINUS           reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    NOT             reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    TILDE           reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    LEFT_PARENTHESIS reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    NUMBER          reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    DECIMAL_NUMBER  reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    CHARACTER       reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    TRUE            reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    FALSE           reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    NULL            reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_LITERAL  reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    INPUT           reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SQUARE_ROOT     reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SIN             reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    COS             reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    TAN             reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_COPY     reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_REVERSE  reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_LENGTH   reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_COMPARE  reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    WRITE           reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    READ            reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    OPEN            reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    OUTPUT          reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    ELSE            reduce using rule 220 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)


state 374

    (219) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression . RIGHT_PARENTHESIS compound_statement
    (97) expression -> expression . COMMA assignment_expression

    RIGHT_PARENTHESIS shift and go to state 378
    COMMA           shift and go to state 182


state 375

    (221) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS . compound_statement
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 36

    compound_statement             shift and go to state 379

state 376

    (215) selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .

    RIGHT_CURLY_BRACKET reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    LEFT_CURLY_BRACKET reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    SEMICOLON       reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    IF              reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    ASSERT          reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    WHILE           reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    FOR             reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    GOTO            reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    BREAK           reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    CONTINUE        reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    RETURN          reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    IDENTIFIER      reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    PLUS_PLUS       reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    MINUS_MINUS     reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    SIZEOF          reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    AND             reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    STAR            reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    PLUS            reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    MINUS           reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    NOT             reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    TILDE           reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    LEFT_PARENTHESIS reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    NUMBER          reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    DECIMAL_NUMBER  reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    CHARACTER       reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    TRUE            reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    FALSE           reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    NULL            reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    STRING_LITERAL  reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    INPUT           reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    SQUARE_ROOT     reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    SIN             reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    COS             reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    TAN             reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    STRING_COPY     reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    STRING_REVERSE  reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    STRING_LENGTH   reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    STRING_COMPARE  reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    WRITE           reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    READ            reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    OPEN            reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    OUTPUT          reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)
    ELSE            reduce using rule 215 (selection_statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS statement ELSE statement .)


state 377

    (218) iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SEMICOLON       reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    IF              reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    ASSERT          reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    WHILE           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    FOR             reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    GOTO            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    BREAK           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    CONTINUE        reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    RETURN          reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    IDENTIFIER      reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    PLUS_PLUS       reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    MINUS_MINUS     reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SIZEOF          reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    AND             reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STAR            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    PLUS            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    MINUS           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    NOT             reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    TILDE           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    LEFT_PARENTHESIS reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    NUMBER          reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    DECIMAL_NUMBER  reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    CHARACTER       reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    TRUE            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    FALSE           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    NULL            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_LITERAL  reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    INPUT           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SQUARE_ROOT     reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SIN             reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    COS             reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    TAN             reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_COPY     reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_REVERSE  reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_LENGTH   reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_COMPARE  reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    WRITE           reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    READ            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    OPEN            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    OUTPUT          reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    ELSE            reduce using rule 218 (iteration_statement -> FOR LEFT_PARENTHESIS expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)


state 378

    (219) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS . compound_statement
    (204) compound_statement -> . LEFT_CURLY_BRACKET declaration_list statement_list RIGHT_CURLY_BRACKET
    (205) compound_statement -> . LEFT_CURLY_BRACKET declaration_list RIGHT_CURLY_BRACKET
    (206) compound_statement -> . LEFT_CURLY_BRACKET statement_list RIGHT_CURLY_BRACKET
    (207) compound_statement -> . LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET shift and go to state 36

    compound_statement             shift and go to state 380

state 379

    (221) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SEMICOLON       reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    IF              reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    ASSERT          reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    WHILE           reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    FOR             reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    GOTO            reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    BREAK           reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    CONTINUE        reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    RETURN          reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    IDENTIFIER      reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    PLUS_PLUS       reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    MINUS_MINUS     reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SIZEOF          reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    AND             reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STAR            reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    PLUS            reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    MINUS           reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    NOT             reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    TILDE           reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    LEFT_PARENTHESIS reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    NUMBER          reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    DECIMAL_NUMBER  reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    CHARACTER       reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    TRUE            reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    FALSE           reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    NULL            reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_LITERAL  reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    INPUT           reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SQUARE_ROOT     reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    SIN             reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    COS             reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    TAN             reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_COPY     reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_REVERSE  reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_LENGTH   reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    STRING_COMPARE  reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    WRITE           reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    READ            reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    OPEN            reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    OUTPUT          reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)
    ELSE            reduce using rule 221 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement RIGHT_PARENTHESIS compound_statement .)


state 380

    (219) iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .

    RIGHT_CURLY_BRACKET reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    LEFT_CURLY_BRACKET reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SEMICOLON       reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    IF              reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    ASSERT          reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    WHILE           reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    FOR             reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    GOTO            reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    BREAK           reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    CONTINUE        reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    RETURN          reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    IDENTIFIER      reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    PLUS_PLUS       reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    MINUS_MINUS     reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SIZEOF          reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    AND             reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STAR            reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    PLUS            reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    MINUS           reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    NOT             reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    TILDE           reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    LEFT_PARENTHESIS reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    NUMBER          reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    DECIMAL_NUMBER  reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    CHARACTER       reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    TRUE            reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    FALSE           reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    NULL            reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_LITERAL  reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    INPUT           reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SQUARE_ROOT     reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    SIN             reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    COS             reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    TAN             reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_COPY     reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_REVERSE  reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_LENGTH   reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    STRING_COMPARE  reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    WRITE           reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    READ            reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    OPEN            reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    OUTPUT          reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)
    ELSE            reduce using rule 219 (iteration_statement -> FOR LEFT_PARENTHESIS type_specifier expression_statement expression_statement expression RIGHT_PARENTHESIS compound_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_PARENTHESIS in state 108 resolved as shift
